@{
    ViewBag.Title = "ERPAPD | Plan KPI";

    bool AllowCreate = (ViewBag.Assets.Create != null && ViewBag.Assets.Create);
    bool AllowUpdate = (ViewBag.Assets.Update != null && (bool)ViewBag.Assets.Update);
    bool AllowExport = (ViewBag.Assets.Export != null && (bool)ViewBag.Assets.Export);
    bool AllowImport = (ViewBag.Assets.Import != null && (bool)ViewBag.Assets.Import);
    bool AllowDelete = (ViewBag.Assets.Delete != null && (bool)ViewBag.Assets.Delete);
}
<style>
    .modal {
        width: 300px;
    }
</style>
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="widget-header widget-header-blue widget-header-flat">
                <p style="font-size:14px">@Resources.Multi.Filter</p>

                <span class="widget-toolbar">
                    <a href="#" data-action="collapse">
                        <i class="icon-chevron-up"></i>
                    </a>
                </span>
            </div>

            <div class="widget-body">
                <div class="widget-main">
                    <div class="row-fluid">
                        <div class="span12">
                            <input class="span1" type="text" id="month" value="@DateTime.Now.ToString("MM-yyyy")" placeholder="Year" style="width:200px" />
                            <select name="select" id="agent" class='chosen-select span2' style="width: 400px" data-placeholder="Chọn agent…" multiple>
                                <option value="">All</option>
                                @foreach (var item in ViewBag.listAgent)
                                {
                                    <option value="@item.UserName">@item.UserName</option>
                                }
                            </select>
                            <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="filter()" style="float:none">@Resources.Multi.Filter</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @(Html.Kendo()
    .Grid<ERPAPD.Models.Deca_Telesales_Agent_KPI>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.ForeignKey(p => p.Agent, (System.Collections.IEnumerable)ViewBag.listAgent, "UserName", "UserName").EditorTemplateName("GridNullableForeignKey").Title("Agent").Width(100).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Month).Width(80).Title("Month").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Revenue).Width(100).Title("Revenue(VNĐ)").Format("{0:N0}").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Order).Width(80).Title("#Order").Format("{0:N0}").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Call).Width(80).Title("#Call").Format("{0:N0}").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Customer).Width(100).Title("CustomerTouch").Format("{0:N0}").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.TalkTime).Width(100).Title("TalkTime(Hours)").Format("{0:N0}").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.CreatedAt).Width(120).Format("{0:" + Resources.Multi.DateFormat + " HH:mm:ss}").Title(Resources.Multi.CreatedAt);
        columns.Bound(p => p.CreatedBy).Width(100);
        columns.Bound(p => p.UpdatedAt).Width(120).Format("{0:" + Resources.Multi.DateFormat+ " HH:mm:ss}").Title(Resources.Multi.UpdatedAt).ClientTemplate("#if(kendo.toString(UpdatedAt,'dd/MM/yyyy') != '01/01/1900'){#" + "#=ConvertTimeZone(UpdatedAt," + Constants.TIME_ZONE + ")#" + "#}#").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
        columns.Bound(p => p.UpdatedBy).Width(100);
    })
    .ToolBar(tools =>
    {
        tools.Create().Text(Resources.Multi.Add);
        tools.Save().SaveText(Resources.Multi.Save).CancelText(Resources.Multi.Cancel);
        tools.Custom()
                .Text(Resources.Multi.Export)
                .HtmlAttributes(new { @class = "export btn btn-info" })
                .Url(Url.Action("ExportData", "TelesalesAgentKPI", new { filter = "~", sort = "~" }));
        //tools.Excel().HtmlAttributes(new { @class = "export btn btn-info", @style = "margin-left:0.1em;display:" + (AllowExport ? "inline-block" : "none") });
        tools.Custom()
               .Text(Resources.Multi.DowloadTemplate)
               .HtmlAttributes(new { @class = "btn" })
               .Url(Url.Action("ExportTemplate", "TelesalesAgentKPI"));
        tools.Custom()
            .Text(Resources.Multi.Import)
            .HtmlAttributes(new { @class = "btn btn-purple", id = "import", @style = "display:" + (AllowUpdate ? "inline-block" : "none"), Href = "javascript:void(0)" });
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Events(events => { events.DataBound("dataBound"); events.Edit("onEdit"); })
    .Pageable()
    .Sortable()
    .Scrollable()
    .Navigatable()
    .Filterable()
    .Reorderable(r => r.Columns(true))
    .Resizable(r => r.Columns(true))
    .ColumnMenu()
    .DataSource(
        dataSource => dataSource
        .Ajax()
        .Batch(true)
        .Model(model =>
        {
            model.Id(p => p.Id);
            model.Field(p => p.Id).Editable(false);
            model.Field(p => p.CreatedAt).Editable(false);
            model.Field(p => p.CreatedBy).Editable(false);
            model.Field(p => p.UpdatedAt).Editable(false);
            model.Field(p => p.UpdatedBy).Editable(false);
        })
        .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
        .PageSize(20)
        .Create(create => create.Action("Create", "TelesalesAgentKPI"))
        .Read(read => read.Action("Read", "TelesalesAgentKPI"))
        .Update(update => update.Action("Update", "TelesalesAgentKPI"))
    )
        )
    </div>
</div>

@(Html.Kendo()
      .Window()
      .Name("window")
      .Title("ImportForm")
      .Content(@<text>
        <div class="row-fluid">
            <div class="span4">
                <form id="importform" action="@Url.Content("~/TelesalesAgentKPI/ImportFromExcel")" method="post" class="form-horizontal" enctype="multipart/form-data" style="margin-bottom:0px;">
                    <input type="file" id="FileUpload" name="FileUpload" />
                </form>
            </div>
            <button type="button" id="btnImport" class="btn btn-purple btn-small span2" style="float: right;">Import</button>
        </div>
        <div class="row-fluid">
            <a id="btndownload" style="display: none" class="btn btn-warning btn-small">@Resources.Multi.DownloadTemplateError</a>
        </div>
    </text>)
      .Draggable()
      .Resizable()
      .Visible(false)
      .Width(1000)
      .Actions(actions => actions.Close())

)
<script>
    $("#filterText").keypress(function (e) {
        if (e.keyCode == 13) {
            filter();
        }
    });

    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 50);
    }
    $(window).resize(function () {
        resizeGrid();
    });

    function onEdit(e) {
        if (e.model.isNew() == false) {
            $('input[name=Agent]').parent().html(e.model.Agent);
            $('input[name=Month]').parent().html(e.model.Month);
        }
    }
    function dataBound() {
        resizeGrid();

        var grid = this;

        // ask the parameterMap to create the request object for you
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
        .options.parameterMap({
            page: grid.dataSource.page(),
            sort: grid.dataSource.sort(),
            filter: grid.dataSource.filter()
        });

        // Get the export link as jQuery object
        var $exportLink = grid.element.find('.export');


        // Get its 'href' attribute - the URL where it would navigate to
        var href = $exportLink.attr('href');

        // Update the 'page' parameter with the grid's current page
        //href = href.replace(/page=([^&]*)/, 'page=' + requestObject.page || '~');

        // Update the 'sort' parameter with the grid's current sort descriptor
        href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');

        // Update the 'pageSize' parameter with the grid's current pageSize
        //href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + grid.dataSource._pageSize);

        //update filter descriptor with the filters applied

        href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));

        // Update the 'href' attribute
        $exportLink.attr('href', href);
    }

    $("#agent").chosen();

    function filter() {

        grid = $("#grid").data("kendoGrid");
        var month = $('#month').val();
        var listAgent = $("#agent option:selected");
        var filterAgent = { logic: "or", filters: [] };
        var filter = { logic: "and", filters: [] };

        if (listAgent.length > 0) {
            for (var i = 0; i < listAgent.length; i++) {
                var option = listAgent[i].value;
                if (option == '') {
                    filterAgent.filters.push({ field: "Agent", operator: "contains", value: '' });
                }
                else {
                    filterAgent.filters.push({ field: "Agent", operator: "eq", value: option });
                }
            }
            filter.filters.push(filterAgent);
        }
        if (month) {
            filter.filters.push({ field: "Month", operator: "contains", value: month });
        }
        grid.dataSource.filter(filter);
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                    $("#grid").data("kendoGrid").dataSource.read();
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
    function onRequestEnd(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Update @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#grid").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#grid").data("kendoGrid").dataSource.read();
        }
    }

    $(document).ready(function () {
        $('#import').bind('click', function () {
            $("#window").kendoWindow({
                actions: {}, /*from Vlad's answer*/
                draggable: true,
                height: "300px",
                modal: true,
                resizable: false,
                width: "500px",
                visible: false /*don't show it yet*/
            }).data("kendoWindow").center().open();
            $('#FileUpload').ace_file_input({
                no_file: 'No File ...',
                btn_choose: 'Choose',
                btn_change: 'Change',
                droppable: false,
                onchange: null,
                thumbnail: false //| true | large
                //whitelist:'gif|png|jpg|jpeg'
                //blacklist:'exe|php'
                //onchange:''
                //
            });
        });

        //$('#import').attr('data-toggle', 'modal');
        $('#btnImport').bind('click', function () {
            $('#importform').submit();
        });

        (function () {
            $("#importform").ajaxForm({
                beforeSend: function () {
                    $("#window").data("kendoWindow").close();
                    $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
                },
                uploadProgress: function (event, position, total, percentComplete) {
                },
                success: function (data) {
                    if (data.success) {
                        $("#grid").data("kendoGrid").dataSource.read();
                        $.gritter.add({
                            // (string | mandatory) the heading of the notification
                            title: '',
                            // (string | mandatory) the text inside the notification
                            text: 'Import successfully ' + data.total + ' record(s)',
                            class_name: 'gritter-success'
                        });
                        if (data.totalError > 0) {
                            $("#window").data("kendoWindow").open();
                            $('#btndownload').css('display', 'inline-block');
                            $('#btndownload').attr('href', r + "/TelesalesAgentKPI/Download?file=" + data.link);
                        }
                        else {
                            $('#btndownload').css('display', 'none');
                            $('#btndownload').attr('href', "");
                        }
                    }
                    else {
                        $.gritter.add({
                            // (string | mandatory) the heading of the notification
                            title: '',
                            // (string | mandatory) the text inside the notification
                            text: data.error,
                            class_name: 'gritter-error'
                        });
                    }
                },
                complete: function (xhr) {

                }
            });
        })();
    });
</script>
