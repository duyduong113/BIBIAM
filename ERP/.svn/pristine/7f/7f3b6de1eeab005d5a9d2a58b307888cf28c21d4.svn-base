using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using ServiceStack.OrmLite;
using ServiceStack.OrmLite.SqlServer;
using BIBIAM.Core.Entities;
using MCC.Models;
using Kendo.Mvc.UI;
using Kendo.Mvc.Extensions;
using BIBIAM.Core.Data.DataObject;
using CloudinaryDotNet;
using System.Web;
using Newtonsoft.Json;
using System.Data;
using System.Data.SqlClient;
using MCC.Helpers;
using MCC.Filters;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using System.Data.Entity;
using BIBIAM.Core;
namespace MCC.Controllers
{
    [Authorize]
    [CustomActionFilter(permission = "all,view,create,update,delete,export")]
    public class CustomerController : CustomController
    {
        public ActionResult Index()
        {
            if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["view"]))
            {
                using (var db = MCC.Helpers.OrmliteConnection.openConn(AppConfigs.MCCConnectionString))
                {
                    ViewBag.listCity = db.Select<location_city>();
                    ViewBag.listDistrict = db.Select<location_district>();
                }
                return View();
            }
            else return RedirectToAction("NoAccess", "Error");
        }

        public ActionResult Read([DataSourceRequest] DataSourceRequest request)
        {
            if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["view"]))
            {
                using (var dbConn = MCC.Helpers.OrmliteConnection.openConn(AppConfigs.MCCConnectionString))
                {
                    var data = new DataSourceResult();
                    if (isAdmin)
                        data = KendoApplyFilter.KendoData<Customer>(request);
                    else
                        data = KendoApplyFilter.KendoData<Customer>(request, "select b.* from Merchant_Customer a left join Customer b on a.ma_khach_hang=b.ma_khach_hang where a.ma_gian_hang={0}".Params(currentUser.ma_gian_hang));

                    return Json(data, JsonRequestBehavior.AllowGet);
                }
            }
            return RedirectToAction("NoAccess", "Error");


        }
       
        [HttpPost]
        public ActionResult UpdateCustomer(Customer data)
        {
            if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["update"]))
            {
                using (var dbConn = MCC.Helpers.OrmliteConnection.openConn(AppConfigs.MCCConnectionString))
                {
                    try
                    {
                        var exist = dbConn.SingleOrDefault<Customer>("id={0}", data.id);
                        if (exist != null)
                        {
                            data.ngay_cap_nhat = DateTime.Now;
                            data.nguoi_cap_nhat = User.Identity.Name;
                            dbConn.UpdateOnly(data,
                                            onlyFields: p =>
                                                new
                                                {
                                                    p.ma_khach_hang,
                                                    p.ma_user,
                                                    p.email,
                                                    p.sdt,
                                                    p.hoten,
                                                    p.ngay_cap_nhat,
                                                    p.nguoi_cap_nhat
                                                },
                                        where: p => p.id == data.id);
                            return Json(new { success = true, JsonRequestBehavior.AllowGet });
                        }
                        else return Json(new { success = false, error = "Dữ liệu không hợp lệ", JsonRequestBehavior.AllowGet });
                    }
                    catch (Exception e)
                    {
                        return Json(new { success = false, error = e.Message.ToString(), JsonRequestBehavior.AllowGet });
                    }
                }
            }
            else return RedirectToAction("NoAccess", "Error");
        }

        [HttpPost]
        public ActionResult CreateUpdate(Customer data, List<Customer_Address> details)
        {
            try
            {
                using (var dbConn = Helpers.OrmliteConnection.openConn())
                {
                        try
                        {
                            if (data.id > 0)
                            {
                                if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["update"]))
                                {
                                    data.ngay_cap_nhat = DateTime.Now;
                                    data.nguoi_cap_nhat = User.Identity.Name;
                                    dbConn.UpdateOnly(data,
                                                    onlyFields: p =>
                                                        new
                                                        {
                                                            p.email,
                                                            p.sdt,
                                                            p.hoten,
                                                            p.ngay_cap_nhat,
                                                            p.nguoi_cap_nhat
                                                        },
                                                where: p => p.id == data.id);
                                 

                                }
                                else
                                {
                                    return Json(new { success = false, error = "Don't have permission to update" });
                                }
                            }
                            else
                            {
                                if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["create"]))
                                {
                                    data.ma_user = "___";
                                    data.ngay_tao = DateTime.Now;
                                    data.nguoi_tao = User.Identity.Name;
                                    //data.ngay_cap_nhat = !string.IsNullOrEmpty(data.ngay_cap_nhat.ToString()) ? data.ngay_cap_nhat : DateTime.Parse("1900-01-01");
                                    data.ma_khach_hang = AutoCode("KH", 1);
                                    //data.id = dbConn.QueryScalar<int>("select MAX(id)+1 from Customer");
                                    dbConn.Insert(data);
                                    int Id = (int)dbConn.GetLastInsertId();
                                    data.id = Id;
                                    var checkMerchant_Customer = dbConn.FirstOrDefault<Merchant_Customer>("ma_gian_hang={0} and ma_khach_hang={1}".Params(currentUser.ma_gian_hang, data.ma_khach_hang));
                                    if (checkMerchant_Customer == null)
                                    {
                                        Merchant_Customer mc = new Merchant_Customer();
                                        mc.ma_gian_hang = currentUser.ma_gian_hang;
                                        mc.ma_khach_hang = data.ma_khach_hang;
                                        dbConn.Insert(mc);
                                    }

                                  
                                }
                                else
                                {
                                    return Json(new { success = false, error = "Don't have permission to create" });
                                }
                            }
                        }
                        catch (Exception e)
                        {
                           
                            return Json(new { success = false, error = "Lỗi" });
                        }

                    

                  
                        try
                        {
                            if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["create"]))
                            {
                                //Xoa tat ca dia chi hien tai
                                string ma_kh = dbConn.QueryScalar<string>("select ma_khach_hang from Customer where id = " + data.id + " ");
                                string st = new Customer_DAO().Delete(ma_kh, AppConfigs.MCCConnectionString);
                                //Tạo CustomerAddress
                                if (details != null)
                                {
                                    Customer Customertinfo = new Customer();
                                    Customer_Address exist = new Customer_Address();
                                    foreach (Customer_Address item in details)
                                    {
                                        Customertinfo = dbConn.FirstOrDefault<Customer>("ma_khach_hang={0}", ma_kh);
                                        exist = dbConn.FirstOrDefault<Customer_Address>("ma_khach_hang={0}".Params(ma_kh));
                                        item.ma_khach_hang = data.ma_khach_hang;
                                        item.id = dbConn.QueryScalar<int>("select MAX(id)+1 from Customer_Address");
                                        item.ma_user = "";
                                        dbConn.Insert(item);

                                    }
                                   
                                }
                            }
                            else
                            {
                                return Json(new { success = false, error = "Không có quyền tạo" });
                            }
                        }
                        catch (Exception e)
                        {
                           
                            return Json(new { success = false, error = "Lỗi" });
                        }
                }
                return Json(new { success = true, data = data });
            }
            catch (Exception e)
            {
                return Json(new { success = false, error = e.Message });
            }
        }

        public ActionResult GetAddressesFromCustomer(string ma_khach_hang)
        {
            if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["view"]))
            {
                using (var db = MCC.Helpers.OrmliteConnection.openConn())
                {
                    var data = db.Select<Customer_Address>("ma_khach_hang={0}".Params(ma_khach_hang));
                    return Json(new { success = true, data = data, JsonRequestBehavior.AllowGet });
                }
            }
            return RedirectToAction("NoAccess", "Error");
        }
        public ActionResult GetAddresses([DataSourceRequest] DataSourceRequest request, string ma_khach_hang)
        {
            if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["view"]))
            {
                using (var db = MCC.Helpers.OrmliteConnection.openConn())
                {
                    var data = db.Select<Customer_Address>("ma_khach_hang={0}".Params(ma_khach_hang));
                    return Json(data.ToDataSourceResult(request));
                }
            }
            return RedirectToAction("NoAccess", "Error");
        }
        public string AutoCode(string text, int vt)
        {
            using (var db = MCC.Helpers.OrmliteConnection.openConn())
            {
                string makh_cuoi = db.QueryScalar<string>("select TOP 1 ma_khach_hang from Customer order by id desc");
                string g = "";
                if (makh_cuoi == "")
                    g = text + "0000001";
                else
                {
                    g = text;
                    int k = Convert.ToInt32(makh_cuoi.Substring(text.Length, 8));
                    k++;
                    //if (k < 10)
                    //    g += "000000";
                    //else 
                    //if (k < 100)
                    //    g += "00000";
                    //else if (k < 1000)
                    //    g += "0000";
                    g += "000000";
                    g += k.ToString();
                }
                return g;
            }
        }

    }
}