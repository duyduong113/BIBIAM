@{
    ViewBag.Title = "ERPAPD | SalesApp Banner";
}
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="widget-header widget-header-blue widget-header-flat">
                <p style="font-size:14px">@Resources.Multi.Filter</p>

                <span class="widget-toolbar">
                    <a href="#" data-action="collapse">
                        <i class="icon-chevron-up"></i>
                    </a>
                </span>
            </div>

            <div class="widget-body">
                <div class="widget-main">
                    <div class="row-fluid">
                        <div class="span12">
                            <input class="span1" type="text" id="filterText" placeholder="Tên banner…" style="width:200px" />
                            <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="filter()" style="float:none">@Resources.Multi.Filter</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @(Html.Kendo()
    .Grid<ERPAPD.Models.Deca_SalesApp_Banner>()
    .Name("grid")
    .HtmlAttributes(new { @style = "height:500px" })
    .Columns(columns =>
    {
        columns.Bound(p => p.Id).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=Id#'  />").Width(50).Filterable(false).Sortable(false);
        columns.Bound(p => p.Id).Width(80).Filterable(false).Visible(false);
        columns.Command(command => { command.Custom("Tải ảnh lên").Click("Update").HtmlAttributes(new { @class = "btn btn-purple", href = "javascript:void(0)", @style = "min-width:40px;" }); }).Width(100).Title("");
        columns.Bound(p => p.Name).Width(200).Title("Tên banner").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.url).Width(200).Title("Liên kết trang").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.ImageUrl).Width(300).Title("Đường dẫn ảnh (Chiều cao banner bằng nhau - 250px)").ClientTemplate("<img style='height:50px;' src = \"" + @Url.Content("~/") + "#=ImageUrl#\"/>");
        columns.Bound(p => p.Active).Width(80).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.CreatedAt).Width(120).Format("{0:" + Resources.Multi.DateFormat + " HH:mm:ss}").Title(Resources.Multi.CreatedAt).ClientTemplate("#=ConvertTimeZone(CreatedAt," + Constants.TIME_ZONE + ")#");
        columns.Bound(p => p.CreatedBy).Width(100);
        columns.Bound(p => p.UpdatedAt).Width(120).Format("{0:" + Resources.Multi.DateFormat+ " HH:mm:ss}").Title(Resources.Multi.UpdatedAt).ClientTemplate("#if(kendo.toString(UpdatedAt,'dd/MM/yyyy') != '01/01/1900'){#" + "#=ConvertTimeZone(UpdatedAt," + Constants.TIME_ZONE + ")#" + "#}#").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
        columns.Bound(p => p.UpdatedBy).Width(100);
    })
    .ToolBar(tools =>
    {
        tools.Create().Text(Resources.Multi.Add);
        tools.Save().SaveText(Resources.Multi.Save).CancelText(Resources.Multi.Cancel);
        tools.Excel().Text(Resources.Multi.Export);
        tools.Custom()
        .Text(Resources.Multi.Delete)
        .HtmlAttributes(new { @id = "btnDelete", @class = "btn btn-danger", @Href = "javascript:Delete()" });

    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Events(events => { events.DataBound("dataBound"); })
    .Pageable()
    .Sortable()
    .Scrollable()
                //.Groupable()
    .Navigatable()
    .Filterable()
    .Excel(excel => excel
    .FileName("SalesAppBannerList.xlsx")
    .Filterable(true)
    .ProxyURL(Url.Action("Excel_Export", "SalesAppBanner")))
    .Reorderable(r => r.Columns(true))
    .Resizable(r => r.Columns(true))
    .ColumnMenu()
    .DataSource(dataSource => dataSource
    .Ajax()
    .Batch(true)
    .PageSize(20)
            .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
    .Model(model =>
    {
        model.Id(p => p.Id);
        //model.Field(p => p.Active).DefaultValue(true);
        model.Field(p => p.ImageUrl).Editable(false);
        model.Field(p => p.Id).Editable(false);
        model.Field(p => p.CreatedAt).Editable(false);
        model.Field(p => p.CreatedBy).Editable(false);
        model.Field(p => p.UpdatedAt).Editable(false);
        model.Field(p => p.UpdatedBy).Editable(false);
    })
    .Create(create => create.Action("Create", "SalesAppBanner"))
    .Read(read => read.Action("Read", "SalesAppBanner"))
    .Update(update => update.Action("Update", "SalesAppBanner"))
    .Destroy("Destroy", "SalesAppBanner"))

        )
    </div>
</div>

<script type="text/x-kendo-template" id="upload">
    @(Html.Kendo().Upload()
            .Name("file")
            .Async(a => a
                .Save("UploadImage", "SalesAppBanner", new { Id = "#=Id#" })
                .AutoUpload(true)
            )
            .Events(events => events
                .Success("onSuccess")
                .Error("onError")
            )
            .Multiple(false)

            .ToClientTemplate()
    )
</script>
<script>
    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }

    $("#filterText").keypress(function (e) {
        if (e.keyCode == 13) {
            filter();
        }
    });

    function Delete() {
        var listrowid = "";
        $('#grid').find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            var c = confirm("@Resources.Multi.DeleteConfirm");
            if (c == true) {
                $.post(r + "/SalesAppBanner/Delete", { data: listrowid, }, function (data) {
                    if (data.success && data.totalError == 0) {
                        $.gritter.add({
                            text: '@Resources.Multi.Delete ' + data.totalSuccess + ' record(s) @Resources.Multi.Successfully',
                            class_name: 'gritter-success'
                        });
                        $("#grid").data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAll').prop('checked', false);
                    }
                    else if (data.success && data.totalError > 0) {
                        $.gritter.add({
                            text: '@Resources.Multi.Delete ' + data.totalSuccess + ' record(s) @Resources.Multi.Successfully.</br>  @Resources.Multi.Error  : ' + data.totalError + ' record(s) because this used.',
                            class_name: 'gritter-success'
                        });
                        $("#grid").data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAll').prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                        $("#grid").data("kendoGrid").dataSource.read();
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: '@Resources.Multi.Please @Resources.Multi.Select.ToLower() data.',
                class_name: 'gritter-error'
            });
            return false;
        }
    }

    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 50);
    }
    $(window).resize(function () {
        resizeGrid();
    });
    function dataBound() {
        $('[data-rel=popover]').popover({ container: 'body' });
        resizeGrid();
    }

    function onError(e) {
        $.gritter.add({
            title: '',
            text: "Upload failed",
            class_name: 'gritter-error'
        });
    }

    function onSuccess(e) {
        $.gritter.add({
            title: '',
            text: "Upload successfully",
            class_name: 'gritter-success'
        });
        $('#grid').data('kendoGrid').dataSource.read();
    }


    function filter() {

        grid = $("#grid").data("kendoGrid");
        var text = $('#filterText').val();
        var filter = { logic: "and", filters: [] };
        if (text) {
            filter.filters.push({ field: "Name", operator: "contains", value: text });
        }
        grid.dataSource.filter(filter);
    }
    function Update(e) {
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));


        var detailsTemplate = kendo.template($("#upload").html());
        bootbox.dialog(detailsTemplate(dataItem), [
              {
                  "label": "Đóng lại",
                  "class": "btn-small btn-grey",
                  "callback": function () {
                      //Example.show("Primary button");
                  }
              }]
         );


    }

    function error_handler(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            if (e.response.Errors == null) {
                $.gritter.add({
                    title: '',
                    text: message,
                    class_name: 'gritter-error'
                });
            }
        }
    }

    function onRequestEnd(e) {
        if (e.type == "update" || e.type == "create" || e.type == "delete") {
            if (e.response.Errors == null) {
                if (e.response.Errors == null) {
                    $.gritter.add({
                        title: '',
                        text: '@Resources.Multi.Save @Resources.Multi.Success.ToLower()',
                        class_name: 'gritter-success'
                    });
                }
            }
        }
    }
</script>
