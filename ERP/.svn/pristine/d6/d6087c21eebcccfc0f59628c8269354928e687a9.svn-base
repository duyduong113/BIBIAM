@model IEnumerable<ERPAPD.Models.CRM_Sync_Log>
@{
    ViewBag.Title = "Danh sách data sync từ ERPAPD";
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);

    var listDay = new List<int>();
    for (int i = 1; i <= 31; i++)
    {
        listDay.Add(i);
    }
    var listMonth = new List<int>();
    for (int i = 1; i <= 12; i++)
    {
        listMonth.Add(i);
    }
    var listYear = new List<int>();
    for (int i = DateTime.Now.Year; i > DateTime.Now.Year - 200; i--)
    {
        listYear.Add(i);
    }
}
<style>
    label.error {
        border: none !important;
        background-color: #fff !important;
        color: #ff0000;
    }

    #CustomerForm .control-label {
        text-align: left;
    }

    .actionGird {
        margin-left: 2px;
    }

    div.k-window-content {
        overflow: inherit;
    }
</style>

<div class="row-fluid">
    <div class="span9">
        <input id="txtInfoFilter" class="text-search span9" type="text" placeholder="Tên sp sync">
        @*<select id="listCustomerFilter" class="span3" data-placeholder="Chọn khách hàng">
            <option value="">Chọn</option>
            @foreach (var item in ViewBag.listCustomer)
            {
                <option value="@item.CustomerID">@item.CustomerName</option>
            }
        </select>*@
    </div>
    <div class="span3">
        <p>
            <button type="button" class="btn btn-small btn-primary" onclick="filter()">@*<i class="icon-search"></i>*@Tìm kiếm</button>
        </p>
    </div>
</div>
<div class="row-fluid mn-list">
    @(Html.Kendo().Grid(Model)
                    .Name("Grid")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.ID)
                                .Width(25).Filterable(false).Sortable(false).Groupable(false)
                                .HeaderTemplate("<input style='text-align:center;opacity:1;' hidden type='checkbox' id= 'checkboxcheckAll'  onclick='checkAll(this);' />")
                                .ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=StoreName#' sp-name='#=StoreName2#' />");
                        columns.Bound(p => p.SyncType).Title("SpNameSync").Width(80);
                        // ClientTemplate("<span> #if(TypeSync == 1){#<span>Sync Full</span>#} else {# <span>Sync Incremental</span> #}# </span>");
                        columns.Bound(p => p.StoreName2).Title("StoreName").Width(175);
                        columns.Bound(p => p.TableName).Title("TableName").Width(170);
                        columns.Bound(p => p.Status).Title("Trạng thái").Width(60);
                        columns.Bound(p => p.ErrorMessage).Title("ErrorMessage").Width(100);
                        columns.Bound(p => p.StartTime).Title("Bắt đầu").Format("{0:dd/MM/yyyy HH:mm}").Width(80);
                        columns.Bound(p => p.EndTime).Title("Kết thúc").Format("{0:dd/MM/yyyy HH:mm}").Width(80);
                        columns.Bound(p => p.InsertedRows).Title("InsertedRow").Width(60);
                        columns.Bound(p => p.UpdatedRows).Title("UpdatedRow").Width(60);
                        columns.Bound(p => p.IncrementalRows).Title("IncrementalRow").Width(60);
                        columns.Bound(p => p.TotalRows).Title("TotalRows").Width(60);

                    })
                    .ToolBar(toolbar =>
                    {
                    toolbar.Template(@<text>
                            <div class="pull-left">
                                @if (AllowCreate)
                                {
                                    <a class="btn btn-success btn-small" id="btnGridAdd" onclick="showConfirmPopup(1)">
                                        @*<i class="icon-plus"></i>*@ Đồng bộ Full
                                    </a>
                                }
                                @if (AllowCreate)
                                {
                                    <a class="btn btn-success btn-small" id="btnGridAdd" onclick="showConfirmPopup(0)">
                                        @*<i class="icon-plus"></i>*@ Đồng bộ Incremental
                                    </a>
                                }
                            </div>
                        </text>);
                    })                              .Events(events => { events.DataBound("dataBound"); })
                                                    .Pageable(pager => pager.PageSizes(new[] { 20, 50, 100, 200, 300 }))
                                                    .Navigatable()
                                                    .Scrollable(scrollable => scrollable.Virtual(false))
                                                    .Resizable(r => r.Columns(true))
                                                    .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                    .Batch(true)
                                                    .PageSize(20)
                                                    .Model(model =>
                                                    {
                                                        model.Id(p => p.ID);
                                                    })
                                                    .Read(read => read.Action("Read", "ManageSyncLog"))
                                                    ))

</div>
@*<div>
        @(Html.Kendo()
          .Window()
          .Name("actionForm")
          .Title("Thêm mới người giới thiệu")
          .Draggable()
          .Resizable()
          .Visible(false)
          .Width(800)
          .Actions(actions => actions.Close())
        )
    </div>*@
<div id="popup-confirm" class="row" style="margin:0 auto;display:none">
    <div class="widget-box">
        <p> <span id="txtcontent"></span> </p>
    </div>
    <div class="form-footer-custom">
        <div class="pull-right" style="padding-right:15px">
            <button type="button" class="btn btn-info btn-small " onclick="onChangeStatus()">
                @*<i class="icon-ok"></i>*@ Đồng ý
            </button>
            <button type="button" class="btn btn-default btn-small" onclick="onCloseForm()">
                @*<i class="icon-undo"></i>*@ Đóng lại
            </button>
        </div>
    </div>
</div>
@Html.Partial("_modal_form")
<script>
    function onCloseForm() {
        $('#popup-confirm').data('kendoWindow').close();
    }

    $(document).ready(function () {
        $("#listCustomerFilter ,#CustomerID").chosen();
        $('#CustomerID_chosen').css('width', '290px');

        $('#popup').kendoWindow({
            width: "550",
            actions: ["Close"],
            visible: false,
            resizable: false,
            close: function (e) {
                // $("#divMaskPopup").hide();
            }
        });
      
    });
   
    //popup
    function onOpenPopup(key, obj) {
        eventHotKey = true;
        //idPopup = ".k-window";
        //$("#divMaskPopup").show();
        var popup = $('#popup').data("kendoWindow");
        popup.center().open();
        //$(".k-window span.k-i-close").click(function () {
        //eventHotKey = false;
        //$("#divMaskPopup").hide();
        //});
        if (key == 0) {     // Create
            keyAction = key;
            popup.title('Thêm');
            $("#formPopup")[0].reset();
            $("#CustomerID option:selected").removeAttr("selected").trigger('chosen:updated');
        }
        else {// Update
            keyAction = -1;
            popup.title('Chỉnh sửa');
            //var id = $(obj).data('id');
            var currentRow = $(obj).closest("tr");
            var dataItem = $("#Grid").data("kendoGrid").dataItem(currentRow);
            onBindDataToForm(dataItem);
            $.post(r + "/CustomerPresenter/GetDetailCustomerByID", { Id: dataItem.Id }, function (data) {
                if (data.success) {
                    $.each(data.data, function (key, value) {
                        $("#CustomerID [value=" + value.CustomerID + "]").attr('selected', '');
                    });
                    $('#CustomerID').trigger('chosen:updated');
                    setTimeout(function () {
                    }, 500);
                }
                else { }
            });
        }
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid");
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 10);
    }
    function dataBound(e) {
        resizeGrid();
        var grid = this;
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
           .options.parameterMap({
               page: grid.dataSource.page(),
               sort: grid.dataSource.sort(),
               filter: grid.dataSource.filter()
           });
        formatHTMLPhone();
        //var $exportLink = grid.element.find('.exportClass');
        //var href = $exportLink.attr('href');
        //href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
        //href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));
        //$exportLink.attr('href', href);
    }
   
    function formatHTMLPhone() {
        var data = $("#Grid").data("kendoGrid").dataSource.data();
        $.each(data, function (i, row) {
            try {
                var listdataPhone = jQuery.parseJSON(row.Phone);
                if (typeof listdataPhone == 'object') {
                    // It is JSON
                    var listPhone = '';
                    $.each(listdataPhone, function (index, value) {
                        listPhone += '<span> ' + value + ' </span> - ';
                    })

                    $('tr[data-uid="' + row.uid + '"] td').find('span.mobile-format').html(listPhone.substring(0, listPhone.length - 2));
                }
            } catch (e) {
                // It not JSON
                $('tr[data-uid="' + row.uid + '"] td').find('span.mobile-format').html(row.Phone);
            }
        })

    }
    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }

    $("#pp-close").bind("click", function () {
        $('#popup').data("kendoWindow").close();
    });
    function filter() {
        grid = $("#Grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };
        var filterInfor = { logic: "or", filters: [] };
        //var valueSearch = $("#listCustomerFilter").val();

        var searchInfor = $("#txtInfoFilter").val().trim();
        if (searchInfor) {

            filterInfor.filters.push({ field: "StoreName", operator: "contains", value: searchInfor });
            filterInfor.filters.push({ field: "StoreName2", operator: "contains", value: searchInfor });
            filterInfor.filters.push({ field: "TableName", operator: "contains", value: searchInfor });
            //filterInfor.filters.push({ field: "Company", operator: "contains", value: searchInfor });
            //filterInfor.filters.push({ field: "Phone", operator: "contains", value: searchInfor });
            //filterInfor.filters.push({ field: "Email", operator: "contains", value: searchInfor });
          //  filterInfor.filters.push({ field: "Position", operator: "contains", value: searchInfor });
            filter.filters.push(filterInfor);
        }
        //if (valueSearch) {
        //    filter.filters.push({ field: "CustomerID", operator: "contains", value: valueSearch });
        //}
        grid.dataSource.filter(filter);
    }
    $('#txtInfoFilter').bind('keypress', function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            filter();
        }
    });
    
</script>