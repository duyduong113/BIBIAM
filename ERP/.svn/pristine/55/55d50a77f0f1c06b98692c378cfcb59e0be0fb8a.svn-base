@{
    ViewBag.Title = "Quản lý chủ đề khảo sát";
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
}
<style>
    #GridCustomer .k-grid-content {
        height: 300px !important;
    }

    #GridQuestion .k-grid-content {
        height: 300px !important;
    }

    #GridActionUser .k-grid-content {
        height: 300px !important;
    }
</style>
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div id="newlistICareID" style="display: inline-block;" class="newlistOrg">
                <input type="text" id="txtName" name="txtName" placeholder="@Resources.Multi.Filter @Resources.Multi.Follow.ToLower() @Resources.Multi.Title.ToLower(), @Resources.Multi.Desc.ToLower()..." style="width: 350px;" />
                <select name="select" id="slStatus" class='chosen-select span2' style="width:250px;" multiple data-placeholder="@Resources.Multi.Select @Resources.Multi.Status.ToLower()...">
                    <option value="Mới">@Resources.Multi.New</option>
                    <option value="Đang thực hiện">@Resources.Multi.InProcess</option>
                    <option value="Kết thúc">@Resources.Multi.End</option>
                </select>
            </div>
            <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="filter()" style="float:none">@Resources.Multi.Filter</button>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @* </ Hiện thị thông tin> *@
        @(Html.Kendo()
                    .Grid<ERPAPD.Models.CRM_Survey_Management>()
                    .Name("Grid")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.Id).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=Id#'  />").Width(35).Filterable(false).Sortable(false);
//                        columns.Bound(p => p.Id).Width(160).Title("").ClientTemplate(@"
//                        <button class='btn btn-primary btn-minier' data-id='#=Id#' data-title='#=Title#' data-detail='#=Detail#' data-status='#=Status#' data-start='#=kendo.toString(StartDate,'dd/MM/yyyy')#' data-end='#=kendo.toString(EndDate,'dd/MM/yyyy')#' data-target='#=Target#' data-actual='#=Actual#' data-count='#=QuestionCount#' onclick='showDetail(this)'>" + Resources.Multi.Detail + @"</button>
//                        #if(Status!='Mới'){#<button class='btn btn-warning btn-minier' data-id='#=Id#' onclick='showResult(this)'>" + Resources.Multi.Result + @"</button> #}#
//                        <button class='btn btn-purple btn-minier' data-id='#=Id#' onclick='startSurvey(this)'>" + Resources.Multi.Begin + @"</button>
//                        ");
                        columns.Bound(p => p.Title).Title(Resources.Multi.Title).Width(200).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.Bound(p => p.Detail).Title(Resources.Multi.Desc).Width(300).EditorTemplateName("Textarea").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.Bound(p => p.StartDate).Format("{0:" + Resources.Multi.DateFormat + "}").EditorTemplateName("DateTime").Width(100).Title(Resources.Multi.StartDate).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.Bound(p => p.EndDate).Format("{0:" + Resources.Multi.DateFormat + "}").EditorTemplateName("DateTime").Width(100).Title(Resources.Multi.EndDate).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        
                       // columns.Bound(p => p.StartDate).Width(60).Title(Resources.Multi.Begin).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).ClientTemplate((
                        //@Html.Kendo().DatePicker()
                        //.Name("#=StartDate#")
                        //.Value("#=StartDate#")
                        //.Format("{0:dd/MM/yyyy}")
                        //.ToClientTemplate()).ToHtmlString()); 

                        //columns.Bound(p => p.StartDate).Width(105).EditorTemplateName("DateTime").Format("{0:dd/MM/yyyy HH:mm}").Title(Resources.Multi.End).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });//.ClientTemplate("#=ConvertTimeZone(EndDate," + Constants.TIME_ZONE + ")#");
                        columns.Bound(p => p.Status).Title(Resources.Multi.Status).Width(100);
                        columns.Bound(p => p.Target).Title("Target").Width(70).Format("{0:N0}").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.Bound(p => p.Actual).Title("Actual").Width(70).Format("{0:N0}");
                        columns.Bound(p => p.Percent).Title("%").Width(40);
                        columns.Bound(p => p.QuestionCount).Title(Resources.Multi.QuestionNumber).Width(70).Format("{0:N0}");
                        columns.Bound(p => p.CreatedBy).Width(100).Title(Resources.Multi.CreatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
                        columns.Bound(p => p.CreatedAt).Width(100).Format("{0:" + Resources.Multi.DateFormat + "}").Title(Resources.Multi.CreatedAt).ClientTemplate("#if(kendo.toString(CreatedAt,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(CreatedAt,'" + Resources.Multi.DateFormat + "') #" + "#}#");
                        columns.Bound(p => p.UpdatedBy).Width(100).Title(Resources.Multi.UpdatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
                        columns.Bound(p => p.UpdatedAt).Format("{0:" + Resources.Multi.DateFormat + "}").Width(100).Title(Resources.Multi.UpdatedAt).ClientTemplate("#if(kendo.toString(UpdatedAt,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(UpdatedAt,'" + Resources.Multi.DateFormat + "') #" + "#}#").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
                    })
                    .ToolBar(toolbar =>
                    {
                         toolbar.Template(@<text>
                        <div class="pull-left">
                            @if (AllowCreate)
                                {
                                <a class="btn btn-success btn-small" href="javascript:void(0)" id="btnGridAdd">
                                    @*<i class="icon-plus"></i>*@ @Resources.Multi.Add
                                </a>
                                }
                            @if (AllowUpdate)
                                {
                                <a class="btn btn-primary btn-small" href="javascript:void(0)" id="btnGridSave">
                                    @*<i class="icon-ok"></i>*@ @Resources.Multi.GridSave
                                </a>
                                <a class="btn btn-default btn-small" href="javascript:void(0)" id="btnGridCancel">
                                    @*<i class="icon-remove"></i>*@ @Resources.Multi.GridCancel
                                </a>
                                }
                            <div class="btn-group" style="margin-left: 20px">
                                <button data-toggle="dropdown" class="btn btn-small btn-inverse dropdown-toggle">
                                    Thao tác khác
                                    <span class="caret"></span>
                                </button>
                                <ul class="dropdown-menu" style="min-width:110px !important">
                                    <li>
                                        @if (AllowDelete)
                                            {
                                            <a class="btn btn-small btn-danger" href="javascript:void(0)" id="btnGridDelete" onclick="showConfirmPopup(1)">
                                                @*<i class=" icon-trash">   </i>*@@Resources.Multi.GridDelete
                                            </a>
                                            }
                                    </li>
                                    @*<li>
                                        @if (AllowExport)
                                                {
                                            <a class="btn btn-small btn-info" href="@Url.Content("~/CRMSurvey/ExportCategory")" id="btnGridExport">
                                                <i class="fa fa-file-excel-o fa-1"></i> @Resources.Multi.GridExport
                                            </a>
                                                }
                                    </li>
                                    <li>
                                        <a class="btn btn-small btn-purple" style="text-align:left" href="javascript:void(0)" id="importOther" onclick="importCategory()">
                                            <i class="fa fa-file-excel-o fa-1"></i> @Resources.Multi.GridImport
                                        </a>
                                    </li>*@
                                </ul>
                            </div>
                        </div>
                        </text>);
                       // toolbar.Create().Text(Resources.Multi.Add).HtmlAttributes(new { @style = "display:" + (AllowCreate ? "inline-block" : "none") });
                      //  toolbar.Save().SaveText(Resources.Multi.Save).CancelText(Resources.Multi.Cancel).HtmlAttributes(new { @style = "display:" + (AllowUpdate ? "inline-block" : "none") });
                      ////  toolbar.Custom()
                      //  .Text(Resources.Multi.Delete)
                      //  .HtmlAttributes(new { @id = "btnDelete", @class = "btn btn-danger", @style = "display:" + (AllowDelete ? "inline-block" : "none"), @Href = "javascript:DeleteSurveyManagement()" });

                    })
                            .Events(events => { events.DataBound("dataBound"); events.Edit("onEdit"); })
                    .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
                    .Navigatable()
                    .Editable(editable => editable.Mode(GridEditMode.InCell))
                    .Scrollable(scrollable => scrollable.Virtual(false))
                    .Sortable()
                    .Resizable(resize => resize.Columns(true))
                    .DataSource(dataSource => dataSource
                    .Ajax()
                        //.Filter(f => { f.Add(a => a.Status).IsEqualTo(true); })
                    .Batch(true)
                    .PageSize(50)
                    .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                    .Model(model =>
                    {
                        model.Id(p => p.Id);
                        model.Field(p => p.Id).Editable(false);
                        model.Field(p => p.Active).DefaultValue(true);
                        model.Field(p => p.Status).DefaultValue("Mới").Editable(false);
                        model.Field(p => p.CreatedBy).Editable(false);
                        model.Field(p => p.QuestionCount).Editable(false);
                        model.Field(p => p.Actual).Editable(false);
                        model.Field(p => p.Percent).Editable(false);
                        model.Field(p => p.CreatedAt).Editable(false);
                        model.Field(p => p.UpdatedAt).Editable(false);
                        model.Field(p => p.UpdatedBy).Editable(false);
                    })
                                    .Read("SurveyManagement_Read", "CRMSurveyManagement")
                                    .Create("SurveyManagement_Create", "CRMSurveyManagement")
                                    .Update("SurveyManagement_Update", "CRMSurveyManagement")
                    )
                //.ClientDetailTemplateId("SurveyCategorDetails")
        )
    </div>
</div>

<script id="SurveyDetailTemplate" type="text/x-kendo-template">
    <div class="row-fluid">
        <div class="span12">
            <p class="detail-popup-title" id="DetailTitle">
                ID: #=Id# - #=Title# (#=QuestionCount# @Resources.Multi.Question.ToLower())
                #if(Target==0){#
                <span class="label label-important arrowed">@Resources.Multi.Progress: Chưa đặt mục tiêu</span>
                #}else{#
                #if((Actual/Target)*100< 50){#
                <span class="label label-important arrowed">@Resources.Multi.Progress: #=(Actual/Target)*100#% (#=Actual#/#=Target#)</span>
                #} else if((Actual/Target)*100< 65){#
                <span class="label label-warning arrowed">@Resources.Multi.Progress: #=(Actual/Target)*100#% (#=Actual#/#=Target#)</span>
                #}else{#
                <span class="label label-success arrowed">@Resources.Multi.Progress: #=(Actual/Target)*100#% (#=Actual#/#=Target#)</span>
                #}#
                #}#

                #if(Status=="Mới"){#
                <span class='label label-yellow arrowed' style='font-size:10px;'>@Resources.Multi.Status: @Resources.Multi.New</span>
                #}else if(Status=="Đang thực hiện"){#
                <span class="label label-success arrowed" style="font-size:10px;">@Resources.Multi.Status: @Resources.Multi.InProcess</span>
                <button class="btn btn-minier btn-grey" onclick="EndSurvey()">
                    <i class="icon-pause"></i>
                    @Resources.Multi.End
                </button>
                #}else{#
                <span class="label label-grey arrowed" style="font-size:10px;">@Resources.Multi.Status: @Resources.Multi.End</span>
                #}#

            </p>
            <p class="detail-popup-description" id="DetailDescription">#=Detail#</p>
            <p class="detail-popup-createdtime" id="DetailCreatedBy">@Resources.Multi.FromDate #=StartDate# @Resources.Multi.ToDate #=EndDate#</p>
        </div>

    </div>

    <div>
        <ul class="nav nav-tabs" id="myTab">
            <li class="active">
                <a data-toggle="tab" href="\\#question">
                    @Resources.Multi.Question
                </a>
            </li>
            <li class="">
                <a data-toggle="tab" href="\\#customer">
                    @Resources.Multi.Customer
                </a>
            </li>
            <li class="">
                <a data-toggle="tab" href="\\#user">
                    @Resources.Multi.Performer
                </a>
            </li>
        </ul>
        <div class="tab-content">
            <div id="question" class="tab-pane active">
                <div class="row-fluid" style="padding-bottom:4px;">
                    @using (Html.BeginForm("SaveQuestion", "CRMSurveyManagement", FormMethod.Post, new { @class = "form-inline", id = "AddQuestionForm", style = "margin:0;" }))
                    {
                        <input type="hidden" name="SurveyManagementID" value="#=Id#" />
                        <label>@Resources.Multi.Group @Resources.Multi.Question.ToLower()</label>
                        @(Html.Kendo().DropDownList()
                                    .Name("CategoryID")
                                    .HtmlAttributes(new { style = "width:150px" })
                                    .DataValueField("CategoryID")
                                    .DataTextField("Name")
                                    .OptionLabel(Resources.Multi.Choose + " " + Resources.Multi.Group.ToLower() + " " + Resources.Multi.Question.ToLower() + "...")
                                    .BindTo(ViewBag.Category)
                                    .ToClientTemplate()
                        )
                        <label>@Resources.Multi.Question</label>
                        @(Html.Kendo().DropDownList()
                                         .Name("QuestionID")
                                     .HtmlAttributes(new { style = "width:250px" })
                                     .DataValueField("QuestionID")
                                     .DataTextField("Description")
                                     .OptionLabel(@Resources.Multi.All)
                                     .SelectedIndex(0)
                                      .DataSource(source =>
                                      {
                                          source.Read(read =>
                                          {
                                              read.Action("GetQuestionByCategory", "CRMSurveyManagement")
                                                  .Data("filterQuestion");
                                          })
                                          .ServerFiltering(true);
                                      }).CascadeFrom("CategoryID").ToClientTemplate()
                        )
                        <label>@Resources.Multi.NumberOrder @Resources.Multi.Question.ToLower()</label>
                        <input type="number" value="1" name="SortOrder" id="txtOrder" style="width:25px;height:16px;" />
                        <button type="submit" id="btnAddQuestion" class="btn btn-success btn-mini">@Resources.Multi.Add</button>
                        <a id="btnRemoveQuestion" class="btn btn-danger btn-mini" onclick="DeleteQuestion()">@Resources.Multi.Delete</a>
                    }
                </div>
                <div class="row-fluid">
                    @(Html.Kendo()
                .Grid<ERPAPD.Models.CRM_Survey_Management_Question>()
                .Name("GridQuestion")
                .Columns(columns =>
                {
                    columns.Bound(p => p.QuestionID).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll2'  onClick='checkAll2(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='\\#=QuestionID\\#'  />").Width(35).Filterable(false).Sortable(false);
                    columns.Bound(p => p.Description).Title(Resources.Multi.Desc + " " + Resources.Multi.Question.ToLower()).Width(250);
                })
                .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
                .Navigatable()
                .Scrollable(scrollable => scrollable.Virtual(false))
                .Sortable()
                .Resizable(resize => resize.Columns(true))
                .DataSource(dataSource => dataSource
                .Ajax()
                .Sort(a => a.Add(m => m.SortOrder).Ascending())
                .PageSize(50)
                .Read("Question_Read", "CRMSurveyManagement", new { SurveyManagementID = "#=Id#" })
                ).ToClientTemplate()
                    )
                </div>
            </div>
            <div id="customer" class="tab-pane">
                <div class="row-fluid">
                    @(Html.Kendo()
                .Grid<ERPAPD.Models.CRM_Survey_Management_Customer>()
                .Name("GridCustomer")
                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll3'  onClick='checkAll3(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='\\#=Id\\#'  />").Width(35).Filterable(false).Sortable(false);
                    columns.Bound(p => p.OrderID).Title(Resources.Multi.OrderCode).HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(100);
                    columns.Bound(p => p.Name).Title(Resources.Multi.CustomerName).HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(120);
                    columns.Bound(p => p.Phone).Title(Resources.Multi.Phone).HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(80);
                    columns.Bound(p => p.PhysicalID).Title(Resources.Multi.ID).HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(80);
                    columns.Bound(p => p.CustomerRank).Title(Resources.Multi.CatagoryCustomer).HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(140);
                    columns.Bound(p => p.Merchant).Title(Resources.Multi.MerchantName).HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(140);
                    columns.Bound(p => p.Carrier).Title(Resources.Multi.Transproter).HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(140);
                    columns.Bound(p => p.IsDone).Title(Resources.Multi.Excute).ClientTemplate("\\#if(IsDone){\\#<i class='icon-ok green'></i> \\#}else{\\# \\#}\\# ").Width(70);

                })
                .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
                .Navigatable()
                .Editable(editable => editable.Mode(GridEditMode.InCell))
                .Scrollable(scrollable => scrollable.Virtual(false))
                .Sortable()
                .ToolBar(toolbar =>
                {
                    toolbar.Create().Text(Resources.Multi.Add).HtmlAttributes(new { @style = "display:" + (AllowCreate ? "inline-block" : "none") });
                    toolbar.Save().SaveText(Resources.Multi.Save).CancelText(Resources.Multi.Cancel).HtmlAttributes(new { @style = "display:" + (AllowUpdate ? "inline-block" : "none") });
                    toolbar.Custom()
                          .Text(Resources.Multi.Import)
                          .HtmlAttributes(new { @id = "btnImportCustomer", @class = "btn btn-purple", @style = "display:" + (AllowCreate ? "inline-block" : "none"), @Href = "javascript:importCustomer();" });
                    toolbar.Custom()
                     .Text(Resources.Multi.Export)
                     .HtmlAttributes(new { @class = "exportCustomer btn btn-primary" })
                     .Url(Url.Action("ExportCustomer", "CRMSurveyManagement", new { SurveyManagementID = "#=Id#" }));
                    toolbar.Custom()
                    .Text(Resources.Multi.Delete)
                    .HtmlAttributes(new { @class = "btn btn-danger", @style = "display:" + (AllowDelete ? "inline-block" : "none"), @Href = "javascript:DeleteCustomer()" });
                })
                .Resizable(resize => resize.Columns(true))
                .DataSource(dataSource => dataSource
                .Ajax()
                    //.Filter(f => { f.Add(a => a.Status).IsEqualTo(true); })
                .Batch(true)
                .PageSize(50)
                .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                .Model(model =>
                {
                    model.Id(p => p.Id);
                    model.Field(p => p.Id).Editable(false);
                    model.Field(p => p.IsDone).Editable(false);
                })
                  .Create("Customer_Create", "CRMSurveyManagement", new { SurveyManagementID = "#=Id#" })
                  .Read("Customer_Read", "CRMSurveyManagement", new { SurveyManagementID = "#=Id#" })
                  .Update("Customer_Update", "CRMSurveyManagement", new { SurveyManagementID = "#=Id#" })
                ).ToClientTemplate()
                    )
                </div>
            </div>
            <div id="user" class="tab-pane">
                <div class="row-fluid" style="padding-bottom:4px;">
                    @using (Html.BeginForm("SaveActionUser", "CRMSurveyManagement", FormMethod.Post, new { @class = "form-inline", id = "AddActionUserForm", style = "margin:0;" }))
                    {
                        <input type="hidden" name="SurveyManagementID" value="#=Id#" />
                        <label>Nhóm người dùng</label>
                        @(Html.Kendo().DropDownList()
                                        .Name("UserGroup")
                                    .HtmlAttributes(new { style = "width:150px" })
                                    .DataValueField("Id")
                                    .DataTextField("Name")
                                    .Events(e => e.Select("selectedUserGroup"))
                                    .OptionLabel("@Resources.Multi.Select @Resources.Multi.Group.ToLower() người dùng...")
                                    .BindTo(ViewBag.ListGroup)
                                    .ToClientTemplate()
                        )
                        <label>Người thực hiện</label>
                        <select id="slActionUser" data-placeholder="Chọn người thực hiện..." name="listUserName" style="height:15px" multiple></select>
                        <button type="submit" id="btnAddActionUser" class="btn btn-success btn-mini" style=" margin-left: 15px;">@Resources.Multi.Add</button>
                        <a id="btnRemoveActionUser" class="btn btn-danger btn-mini" onclick="DeleteActionUser()">@Resources.Multi.Delete</a>
                    }
                </div>
                <div class="row-fluid">
                    @(Html.Kendo()
                .Grid<ERPAPD.Models.CRM_Survey_Management_User>()
                .Name("GridActionUser")
                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll4'  onClick='checkAll4(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='\\#=Id\\#'  />").Width(35).Filterable(false).Sortable(false);
                    columns.Bound(p => p.UserName).Title("Username").Width(250);
                    columns.Bound(p => p.FullName).Title("Họ tên").Width(250);
                })
                .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
                .Navigatable()
                .Scrollable(scrollable => scrollable.Virtual(false))
                .Sortable()
                .Resizable(resize => resize.Columns(true))
                .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(50)
                        .Read("ActionUser_Read", "CRMSurveyManagement", new { SurveyManagementID = "#=Id#" })
                ).ToClientTemplate()
                    )
                </div>
            </div>
        </div>
    </div>
</script>
@( Html.Kendo().Window().Name("SurveyWindow")
      .Title(Resources.Multi.Detail)
      .Visible(false)
      .Modal(true)
      .Draggable(true)
      .Width(900)
)
@(Html.Kendo()
      .Window()
      .Name("windowimport")
      .Title("ImportForm")
      .Content(@<text>
        <div class="row-fluid">
            <div class="span7">
                <form id="importform" action="@Url.Content("~/CRMSurveyManagement/ImportCustomer")" method="post" class="form-horizontal" enctype="multipart/form-data" style="margin-bottom:0px;">
                    <input type="file" class="FileUpload" name="FileUpload" />
                    <input type="hidden" name="SurveyManagementID" />

                </form>
            </div>
            <button type="button" id="btnImport" class="btn btn-purple btn-small span2" style="float: right;">Import</button>
        </div>
        <div class="row-fluid">
            <a id="btndownload" style="display: none" class="btn btn-warning btn-small">Tải file lỗi</a>
        </div>
    </text>)
    .Draggable()
    .Resizable()
    .Visible(false)
    .Width(1000)
    .Actions(actions => actions.Close())
)
@Html.Partial("_popup")
<script>
    $('#btnGridAdd').click(function () {
        $("#Grid").data("kendoGrid").dataSource.insert();
    })

    $('#btnGridSave').bind('click', function () {
        if ($('#Grid').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#Grid').data('kendoGrid').saveChanges();
        }
    })
    $('#btnGridCancel').bind('click', function () {
        $('#Grid').data('kendoGrid').cancelChanges();
    })
    function onEdit(e) {
        if (e.model.isNew() == false) {
            if (e.model.Status != 'Mới') {
                $('#Grid').data("kendoGrid").closeCell(e); // khóa edit.
            }
        }
    }
    var currentID = "";
    function checkAll2(e) {
        var x = $(e).prop('checked');
        $('#GridQuestion').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    function checkAll3(e) {
        var x = $(e).prop('checked');
        $('#GridCustomer').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    function checkAll4(e) {
        var x = $(e).prop('checked');
        $('#GridActionUser').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    function DeleteQuestion() {
        var listrowid = "";
        $('#GridQuestion').find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            var c = confirm("Bạn muốn xóa câu hỏi?");
            if (c == true) {
                $.post(r + "/CRMSurveyManagement/DeleteQuestion", { data: listrowid, id: currentID }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: 'Xóa @Resources.Multi.Success.ToLower()',
                            class_name: 'gritter-success'
                        });
                        $("#GridQuestion").data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAll2').prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: 'Chọn câu hỏi',
                class_name: 'gritter-error'
            });
            return false;
        }
    }
    function DeleteCustomer() {
        var listrowid = "";
        $('#GridCustomer').find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            var c = confirm("Bạn muốn xóa khách hàng?");
            if (c == true) {
                $.post(r + "/CRMSurveyManagement/DeleteCustomer", { data: listrowid, id: currentID }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: 'Xóa @Resources.Multi.Success.ToLower()',
                            class_name: 'gritter-success'
                        });
                        $("#GridCustomer").data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAll3').prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: 'Chọn khách hàng',
                class_name: 'gritter-error'
            });
            return false;
        }
    }
    function filterQuestion() {
        return {
            CategoryID: $("#CategoryID").val()
        };
    }
    function dataBound(e) {
        resizeGrid();
       // drawcolor();
        var grid = this;
        // Get the export link as jQuery object
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            $.gritter.add({
                text: message,
                class_name: 'gritter-error'
            });
        } else {
            $.gritter.add({
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
        }
    }
    function onRequestEnd(e) {
        var grid = this;
        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '@Resources.Multi.Success',
                // (string | mandatory) the text inside the notification
                text: 'Cập nhật @Resources.Multi.Success.ToLower()',
                class_name: 'gritter-success'
            });
            grid.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '@Resources.Multi.Success',
                // (string | mandatory) the text inside the notification
                text: 'Tạo mới @Resources.Multi.Success.ToLower()',
                class_name: 'gritter-success'
            });
            grid.read();
            //changeTypeAsset();
        }
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid");
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 10);
    }
    function DeleteSurveyManagement() {
        var listrowid = "";
        $('#Grid').find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            var c = confirm("Bạn muốn xóa survey này?");
            if (c == true) {
                $.post(r + "/CRMSurveyManagement/DeleteSurveyManagement", { data: listrowid, }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: 'Xóa @Resources.Multi.Success.ToLower()',
                            class_name: 'gritter-success'
                        });
                        $("#Grid").data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAll').prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                        $("#Grid").data("kendoGrid").dataSource.read();
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: 'Chọn survey muốn xóa',
                class_name: 'gritter-error'
            });
            return false;
        }
    }
    function showDetail(obj) {
        var SurveyDetailTemplate = kendo.template($("#SurveyDetailTemplate").html());
        currentID = $(obj).data("id");
        var title = $(obj).data("title");
        var detail = $(obj).data("detail");
        var start = $(obj).data("start");
        var end = $(obj).data("end");
        var target = $(obj).data("target");
        var actual = $(obj).data("actual");
        var count = $(obj).data("count");
        var status = $(obj).data("status");
        var data = {
            Id: currentID,
            Title: title,
            Detail: detail,
            StartDate: start,
            EndDate: end,
            Target: target,
            Actual: actual,
            QuestionCount: count,
            Status: status
        };
        var popup = $("#SurveyWindow").data("kendoWindow");
        popup.title("Chi tiết " + title);
        popup.content(SurveyDetailTemplate(data));
        popup.center().open();
        $("#AddQuestionForm").validate({
            // Rules for form validation
            submitHandler: function (form) {
                $(form).ajaxSubmit({
                    beforeSend: function () {
                        $("#btnAddQuestion").attr("disabled", "disabled");
                        $.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })
                    },
                    success: function (data) {
                        if (data.success) {
                            $.gritter.add({
                                title: '@Resources.Multi.Success',
                                text: 'Thêm câu hỏi thành công.',
                                class_name: 'gritter-success'
                            });
                            $("#GridQuestion").data("kendoGrid").dataSource.read();
                        }
                        else {
                            $.gritter.add({
                                // (string | mandatory) the heading of the notification
                                title: "@Resources.Multi.Error",
                                // (string | mandatory) the text inside the notification
                                text: data.message,
                                class_name: 'gritter-error'
                            });
                        }
                        $("#btnAddQuestion").removeAttr("disabled");
                    },
                    complete: function () {
                        $.unblockUI();
                    }
                });
                return false;
            }
        });
        $("#AddActionUserForm").validate({
            // Rules for form validation
            submitHandler: function (form) {
                $(form).ajaxSubmit({
                    beforeSend: function () {
                        $("#btnAddActionUser").attr("disabled", "disabled");
                        $.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })
                    },
                    success: function (data) {
                        if (data.success) {
                            $.gritter.add({
                                title: '@Resources.Multi.Success',
                                text: 'Thêm người thực hiện thành công.',
                                class_name: 'gritter-success'
                            });
                            $("#GridActionUser").data("kendoGrid").dataSource.read();
                        }
                        else {
                            $.gritter.add({
                                // (string | mandatory) the heading of the notification
                                title: "@Resources.Multi.Error",
                                // (string | mandatory) the text inside the notification
                                text: data.message,
                                class_name: 'gritter-error'
                            });
                        }
                        $("#btnAddActionUser").removeAttr("disabled");
                    },
                    complete: function () {
                        $.unblockUI();
                    }
                });
                return false;
            }
        });
    }
    @*function drawcolor() {
        var collumStatus = 7;
        var data = $("#Grid").data("kendoGrid").dataSource.data();
        $.each(data, function (i, row) {
            try {
                if (row.Status == "Mới") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + collumStatus + ')').html("<span class='badge badge-yellow' style='font-size:10px;'>@Resources.Multi.New</span>");
                }
                else if (row.Status == "Đang thực hiện") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + collumStatus + ')').html('<span class="badge badge-success" style="font-size:10px;">@Resources.Multi.InProcess</span>');
                }
                else if (row.Status == "Kết thúc") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + collumStatus + ')').html('<span class="badge badge-grey" style="font-size:10px;">@Resources.Multi.End</span>');
                }
            }
            catch (err) {
            }
        });
    }*@
    function EndSurvey() {
        var isConfirm = confirm("Kết thúc khảo sát này?");
        if (isConfirm)
            $.post(r + "/CRMSurveyManagement/EndSurvey/", { data: '@@@@' + currentID }, function (data) {
                if (data.success) {
                    $.gritter.add({
                        // (string | mandatory) the heading of the notification
                        title: '@Resources.Multi.Success',
                        // (string | mandatory) the text inside the notification
                        text: 'Kết thúc thành công.',
                        class_name: 'gritter-success'
                    });
                    $("#Grid").data("kendoGrid").dataSource.read();
                } else {
                    $.gritter.add({
                        // (string | mandatory) the heading of the notification
                        title: "@Resources.Multi.Error",
                        // (string | mandatory) the text inside the notification
                        text: data.message,
                        class_name: 'gritter-error'
                    });
                }
            });
    }
    function importCustomer() {
        $("#windowimport").kendoWindow({
            actions: {}, /*from Vlad's answer*/
            draggable: true,
            height: "300px",
            modal: true,
            resizable: false,
            width: "500px",
            visible: false /*don't show it yet*/
        }).data("kendoWindow").center().open();
    }
    $("#txtName").keypress(function (e) {
        if (e.keyCode == 13) {
            filter();
        }
    });
    $("#slStatus").chosen();
    function filter() {
        grid = $("#Grid").data("kendoGrid");
        var Status = $("#slStatus option:selected");
        var Name = $('#txtName').val();
        var filter = { logic: "and", filters: [] };
        var filterStatus = { logic: "or", filters: [] };
        var filtertext = { logic: "or", filters: [] };
        debugger;
        if (Status.length > 0) {
            for (var i = 0; i < Status.length; i++) {
                var option = Status[i].value;
                filterStatus.filters.push({ field: "Status", operator: "eq", value: option });
            }
            filter.filters.push(filterStatus);
        }
        if (Name) {
            filtertext.filters.push({ field: "Title", operator: "contains", value: Name });
            filtertext.filters.push({ field: "Detail", operator: "contains", value: Name });
            filter.filters.push(filtertext);
        }
        grid.dataSource.filter(filter);
    }

    $('#btnImport').bind('click', function () {
        $('#importform input[name="SurveyManagementID"]').val(currentID);
        $('#importform').submit();
    });

    (function () {
        $("#importform").ajaxForm({
            beforeSend: function () {
                $("#windowimport").data("kendoWindow").close();
                $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
            },
            uploadProgress: function (event, position, total, percentComplete) {
            },
            success: function (data) {
                if (data.success) {
                    $("#GridCustomer").data("kendoGrid").dataSource.read();
                    $.gritter.add({
                        title: '',
                        text: 'Nhập thành công ' + data.total + ' khách hàng',
                        class_name: 'gritter-success'
                    });
                    if (data.totalError > 0) {
                        $("#windowimport").data("kendoWindow").open();
                        $('#btndownload').css('display', 'inline-block');
                        $('#btndownload').attr('href', r + "/PotentialCustomer/Download?file=" + data.link);
                    }
                    else {
                        $('#btndownload').css('display', 'none');
                        $('#btndownload').attr('href', "");
                    }
                }
                else {
                    $.gritter.add({
                        title: '',
                        text: 'Có lỗi xuất hiện',
                        class_name: 'gritter-error'
                    });
                }
            },
            complete: function (xhr) {
            }
        });

    })();

    function selectedUserGroup(e) {
        $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
        var dataItem = this.dataItem(e.item);
        $('#slActionUser').empty();
        $('#slActionUser').trigger("chosen:updated");
        $.post(r + "/CRMSurveyManagement/GetListUsersByGroup/", { GroupID: dataItem.Id }, function (data) {
            if (data.success) {
                $('#slActionUser').empty();
                var item = "";
                item += "<option value='Tất cả'>Tất cả</option>";
                for (var i = 0; i < data.data.length; i++) {
                    var value = data.data[i];
                    item += "<option value='" + value.UserName + "'>" + value.FullName + "</option>";
                }
                $("#slActionUser").append(item);
                $("#slActionUser").chosen();
                $('#slActionUser').trigger("chosen:updated");
                $("#slActionUser" + "_chosen").css('width', '430px');
                $("#slActionUser_chosen").find('div.chosen-drop ul').css('max-height', '200px');
            } else {
                $.gritter.add({
                    // (string | mandatory) the heading of the notification
                    title: "@Resources.Multi.Error",
                    // (string | mandatory) the text inside the notification
                    text: data.message,
                    class_name: 'gritter-error'
                });
            }
        });
    }

    function DeleteActionUser() {
        var listrowid = "";
        $('#GridActionUser').find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            var c = confirm("Bạn muốn xóa người thực hiện?");
            if (c == true) {
                $.post(r + "/CRMSurveyManagement/DeleteActionUser", { data: listrowid, id: currentID }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: 'Xóa @Resources.Multi.Success.ToLower()',
                            class_name: 'gritter-success'
                        });
                        $("#GridActionUser").data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAll4').prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: 'Chọn ngừoi thực hiện',
                class_name: 'gritter-error'
            });
            return false;
        }
    }

</script>