@model IEnumerable<ERPAPD.Models.CRM_Product>
@{
    //ViewBag.Title = Resources.Multi.ListOfDistrict;
    ViewBag.Title = "Danh sách sản phẩm";

    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
}
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="row-fluid">
                <input type="text" id="txtText" placeholder="Tên sản phẩm ... " style="width: 250px;" />
                <button type="button" id="btnSearch" class="btn btn-primary btn-small" style="float:none;" onclick="filter()">Tìm kiếm</button>
            </div>

        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @* </ Hiện thị thông tin> *@
        @(Html.Kendo()
        .Grid(Model)
        .Name("Grid")
        //.HtmlAttributes(new { style = "height: auto;" })
        .Columns(columns =>
        {
            columns.Bound(p => p.Id).HeaderTemplate("<input style='text-align:center;opaDistrict:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=Id#'  />").Width(25).Filterable(false).Sortable(false);
            columns.Bound(p => p.ProductName).Width(140).Title("Tên sản phẩm").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(p => p.QCType).Width(140).Title("Loại hình QC").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(p => p.Device).Width(140).Title("Thiết bị").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(p => p.Page).Width(140).Title("Trang").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(p => p.Position).Width(100).Title("Vị trí").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(p => p.Capacity).Width(100).Title("Kích thước").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(p => p.Number).Width(140).Title("Số lượng").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(p => p.Status).Width(100).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).Title("Hoạt động");
            columns.Bound(p => p.RowCreatedUser).Width(100).Title(Resources.Multi.CreatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
            columns.Bound(p => p.RowCreatedAt).Width(120).Format("{0:" + Resources.Multi.DateFormat + "}").Title(Resources.Multi.CreatedAt).ClientTemplate("#=ConvertTimeZone(RowCreatedAt," + Constants.TIME_ZONE + ")#");
            columns.Bound(p => p.RowUpdatedUser).Width(100).Title(Resources.Multi.UpdatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
            columns.Bound(p => p.RowUpdatedAt).Format("{0:" + Resources.Multi.DateFormat + "}").Width(120).Title(Resources.Multi.UpdatedAt).ClientTemplate("#if(kendo.toString(RowUpdatedAt,'dd/MM/yyyy') != '01/01/1900'){#" + "#= ConvertTimeZone(RowUpdatedAt," + Constants.TIME_ZONE + ") #" + "#}#").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
        })
        .ToolBar(toolbar =>
        {
        toolbar.Template(@<text>
            <div class="pull-left">
                @if (AllowCreate)
                {
                    <a class="btn btn-small btn-success" href="javascript:void(0)" id="btnGridAdd">
                        @*<i class="icon-plus"></i>*@ @Resources.Multi.Add
                    </a>
                }
                @if (AllowUpdate)
                {
                    <a class="btn btn-primary btn-small " href="javascript:void(0)" id="btnGridSave">
                        @*<i class="icon-ok"></i>*@ @Resources.Multi.GridSave
                    </a>
                    <a class="btn btn-default btn-small " href="javascript:void(0)" id="btnGridCancel">
                        @*<i class="icon-remove"></i>*@ @Resources.Multi.GridCancel
                    </a>
                    <a class="btn btn-small btn-danger" href="javascript:void(0)" id="btnGridDelete" onclick="showConfirmPopup(1)">
                        @*<i class=" icon-trash">   </i>*@@Resources.Multi.GridDelete
                    </a>
                }


            </div>
        </text>);

        })
        .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
        .Navigatable()
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Scrollable(scrollable => scrollable.Virtual(false))
        .Sortable()
        //.Selectable(selectable => selectable.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
        .Resizable(resize => resize.Columns(true))
        .DataSource(dataSource => dataSource.Ajax()
                                            .Batch(true)
                                            .PageSize(50)
                                            .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                                            .Model(model =>
                                            {
                                                model.Id(p => p.Id);
                                                model.Field(p => p.Id).Editable(false);
                                                model.Field(p => p.RowCreatedAt).Editable(false);
                                                model.Field(p => p.RowCreatedUser).Editable(false);
                                                model.Field(p => p.RowUpdatedAt).Editable(false);
                                                model.Field(p => p.RowUpdatedUser).Editable(false);
                                                model.Field(p => p.Status).DefaultValue(true);
                                            })
                                            .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                                            .Read("Read", "CRMProduct")
                                            .Create("Create", "CRMProduct")
                                            .Update("Update", "CRMProduct"))
        )
    </div>
</div>
@Html.Partial("_popup")

<script>
    $(document).ready(function () {
        resizeGrid();
    });
    function dataBound(e) {

        resizeGrid();
        var grid = this;
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
       .options.parameterMap({
           page: grid.dataSource.page(),
           sort: grid.dataSource.sort(),
           filter: grid.dataSource.filter()
       });
        //var $exportLink = grid.element.find('.exportClass');
        //var href = $exportLink.attr('href');
        //href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
        //href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));
        //$exportLink.attr('href', href);
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "Lỗi :\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                    //$("#Grid").data("kendoGrid").dataSource.read();
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
    function onRequestEnd(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Cập nhật dữ liệu thành công',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Thêm mới dữ liệu thành công',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid");
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 30);
    }
    $('.icon-chevron-up').bind('click', function () {
        setInterval(function () {
            resizeGrid();
        }, 500)
    });

    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }

    function filter() {
        var grid = $("#Grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };
        var filteText = { logic: "or", filters: [] };

        var text = $("#txtText").val();
        if (text) {
            filteText.filters.push({ field: "ProductName", operator: "contains", value: text });
            filter.filters.push(filteText);
        }
        grid.dataSource.filter(filter);
    }
    $('#txtText').bind('keypress', function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            filter();
        }
    });


    $('#btnGridAdd').click(function () {
        $("#Grid").data("kendoGrid").dataSource.insert();
    })

    $('#btnGridSave').bind('click', function () {
        console.log($('#Grid').data('kendoGrid').dataSource.hasChanges());
        if ($('#Grid').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#Grid').data('kendoGrid').saveChanges();
        }
    })

    $('#btnGridCancel').bind('click', function () {
        $('#Grid').data('kendoGrid').cancelChanges();
    })
</script>
<style>
    .dropdown-menu > li > a {
        margin-bottom: 4px !important;
        text-align: left;
    }
</style>