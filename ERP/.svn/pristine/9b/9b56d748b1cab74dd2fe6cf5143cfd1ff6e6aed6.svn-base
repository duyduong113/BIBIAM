@model IEnumerable<ERPAPD.Models.DC_AvoidCallingTimeFrame>
@{
    ViewBag.Title = "Định nghĩa khung giờ cấm gọi";
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
}
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="widget-header widget-header-blue widget-header-flat">
                <p style="font-size:14px">@Resources.Multi.Filter</p>

                <span class="widget-toolbar">
                    <a href="#" data-action="collapse">
                        <i class="icon-chevron-up"></i>
                    </a>
                </span>
            </div>
            <div class="widget-body">
                <div class="widget-main">
                    <div class="row-fluid">
                        <div id="newlistICareID" style="display: inline-block;">
                            <input type="text" id="HeaderName" name="HeaderName" placeholder="Khung giờ" style="width: 350px;height:20px" />
                        </div>
                        <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="filter()" style="float:none">@Resources.Multi.Filter</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @* </ Hiện thị thông tin> *@
        @(Html.Kendo()
        .Grid<ERPAPD.Models.DC_AvoidCallingTimeFrame>()
        .Name("Grid")
        .Columns(columns =>
        {
            columns.Bound(p => p.Id).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=Id#'  />").Width(35).Filterable(false).Sortable(false);
            columns.Bound(p => p.HeaderID).Width(110).Hidden();
            //columns.Bound(p => p.HeaderID).HeaderTemplate("").ClientTemplate("<button type='button' class='btn-success' style='display:inline-block;color:white;' onclick ='ShowUpdate(this)' ><i class='icon-ok bigger-100'></i>Edit</button>").Title("Action").Width(60);
            columns.Bound(p => p.HeaderName).Width(200).Title("Khung giờ").Width(150).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
            columns.Bound(p => p.RowCreatedUser).Width(100).Title(Resources.Multi.CreatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
            columns.Bound(p => p.RowCreatedTime).Width(140).Format("{0:" + Resources.Multi.DateFormat + "}").Title(Resources.Multi.CreatedAt).ClientTemplate("#if(kendo.toString(RowCreatedTime,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(RowCreatedTime,'dd/MM/yyyy HH:mm:ss') #" + "#}#");
            columns.Bound(p => p.RowLastUpdatedUser).Width(100).Title(Resources.Multi.UpdatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
            columns.Bound(p => p.RowLastUpdatedTime).Format("{0:" + Resources.Multi.DateFormat + "}").Width(140).Title(Resources.Multi.UpdatedAt).ClientTemplate("#if(kendo.toString(RowLastUpdatedTime,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(RowLastUpdatedTime,'dd/MM/yyyy HH:mm:ss') #" + "#}#").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
        })
        .ToolBar(toolbar =>
        {
            //toolbar.Custom()
            //.Text("Export To Excel")
            //.HtmlAttributes(new { @class = "exportClass" })
            //.Url(Url.Action("Export_AvoidCalling", "TelesalesAvoidCallingTimeFrame", new { filter = "~", sort = "~", HeaderID = "~" }));
            //toolbar.Custom()
            //.Text("Import From Excel")
            //.HtmlAttributes(new { id = "importAvoidCalling", Href = "javascript:void(0)" });
            toolbar.Create().Text(Resources.Multi.Add).HtmlAttributes(new { @style = "display:" + (AllowCreate ? "inline-block" : "none") });
            toolbar.Save().SaveText(Resources.Multi.Save).CancelText(Resources.Multi.Cancel).HtmlAttributes(new { @style = "display:" + (AllowUpdate ? "inline-block" : "none") });
            toolbar.Custom()
            .Text(Resources.Multi.Delete)
            .HtmlAttributes(new { @id = "btnDeleteAvoidCalling", @style = "background-color:#d3413b;color:white;display:" + (AllowDelete ? "inline-block" : "none"), @Href = "javascript:Delete()" });

        })
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Events(events => { events.DataBound("dataBound"); events.DetailExpand("detailExpand"); })
        .Pageable(pager => pager.PageSizes(new[] { 20, 50, 100, 200 }))
        .ClientDetailTemplateId("DetailsAvoidCalling")
        .Navigatable()
        .ColumnMenu()
        .Sortable()
        .Scrollable(scrollable => scrollable.Virtual(false))
        .Filterable()
        .Resizable(resize => resize.Columns(true))
        .DataSource(dataSource => dataSource
        .Ajax()
                .Batch(true)
                    .PageSize(50)
                    .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                    .Model(model =>
            {
                model.Id(p => p.HeaderID);
                model.Field(p => p.HeaderID).Editable(false);
                model.Field(p => p.Id).Editable(false);
                model.Field(p => p.HeaderName).Editable(true);
                model.Field(p => p.RowCreatedUser).Editable(false);
                model.Field(p => p.RowCreatedTime).Editable(false);
                model.Field(p => p.RowLastUpdatedTime).Editable(false);
                model.Field(p => p.RowLastUpdatedUser).Editable(false);

            })
                .Create(update => update.Action("Save_AvoidCallingTimeFrame", "TelesalesAvoidCallingTimeFrame"))
                    .Read(read => read.Action("Read_AvoidCallingTimeFrame", "TelesalesAvoidCallingTimeFrame"))
                    .Update(update => update.Action("Update_AvoidCallingTimeFrame", "TelesalesAvoidCallingTimeFrame"))
           )
        )
    </div>
    <script id="DetailsAvoidCalling" type="text/kendo-tmpl">
        <div class="span12">
            @(Html.Kendo()
                .TabStrip()
                .Name("tabStrip_#=Id#")
                .SelectedIndex(0)
                .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
                .Items(items =>
                {
                    items.Add().Text("Chi tiết khung giờ").Content(@<text>
                        @(Html.Kendo()
                .Grid<ERPAPD.Models.DC_DetailAvoidCallingTimeFrame>()
                .Name("GridDetail_#=Id#")
                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAllDetail'  onClick='checkAllDetail(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowidDetail' type='checkbox' id= '\\#=Id\\#' />").Width(40).Sortable(false).Filterable(false);
                    columns.Bound(p => p.DetailHeaderID).Title(Resources.Multi.Code).Width(110);
                    columns.Bound(p => p.HeaderID).Width(110).Hidden();
                    columns.Bound(p => p.FromHour).Width(100).EditorTemplateName("Time").Format("{0:hh:mm}").Title("Từ giờ").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71)" });
                    columns.Bound(p => p.ToHour).Width(100).EditorTemplateName("Time").Format("{0:hh:mm}").Title("Đến giờ").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71)" });
                    columns.Bound(o => o.RowCreatedTime).Width(140).Format("{0:MM/dd/yyyy HH:mm:ss}").Title(Resources.Multi.CreatedAt);
                    columns.Bound(o => o.RowCreatedUser).Width(140).Title(Resources.Multi.CreatedBy);
                    columns.Bound(o => o.RowLastUpdatedTime).Width(140).Format("{0:MM/dd/yyyy HH:mm:ss}").Title(Resources.Multi.UpdatedAt).ClientTemplate("\\#if(kendo.toString(RowLastUpdatedTime,'dd/MM/yyyy') != '01/01/1900'){\\#" + "\\#= kendo.toString(RowLastUpdatedTime,'dd/MM/yyyy HH:mm:ss') \\#" + "\\#}\\#");
                    columns.Bound(o => o.RowLastUpdatedUser).Width(140).Title(Resources.Multi.UpdatedBy);
                })
                .ToolBar(toolbar =>
                {
                    //toolbar.Custom()
                    //.Text("Export To Excel")
                    //.HtmlAttributes(new { @class = "exportClass" })
                    //.Url(Url.Action("ExportExcel", "DetailAvoidCallingTimeFrame", new { filter = "~", sort = "~" }));
                    //toolbar.Custom()
                    //.Text("Import From Excel")
                    //.HtmlAttributes(new { id = "importDetailAvoidCalling", Href = "javascript:void(0)" });
                    toolbar.Create().Text(Resources.Multi.Add).HtmlAttributes(new { @style = "display:" + (AllowCreate ? "inline-block" : "none") });
                    toolbar.Save().SaveText(Resources.Multi.Save).CancelText(Resources.Multi.Cancel).HtmlAttributes(new { @style = "display:" + (AllowUpdate ? "inline-block" : "none") });
                    toolbar.Custom()
                    .Text(Resources.Multi.Delete)
                    .HtmlAttributes(new { @id = "btnDeleteAvoidCalling", @style = "background-color:\\#d3413b;color:white;display:" + (AllowDelete ? "inline-block" : "none"), @Href = "javascript:DeleteDetail()" });

                })
                .Pageable(pager => pager
                .PageSizes(new[] { 20, 50, 100, 200, 300 }))
                .Editable(editable => editable.Mode(GridEditMode.InCell))
                .Sortable()
                .ColumnMenu()
                .Filterable()
                .Resizable(resize => resize.Columns(true))
                .DataSource(dataSource => dataSource
                .Ajax()
                .Batch(true)
                    .PageSize(50)
                                    .Events(events => { events.Error("error_handlerDetail"); events.RequestEnd("onRequestEndDetail"); })
                    .Model(model =>
                {
                    model.Id(p => p.DetailHeaderID);
                    model.Field(p => p.HeaderID).Editable(false);
                    model.Field(p => p.Id).Editable(false);
                    model.Field(p => p.DetailHeaderID).Editable(false);
                    model.Field(p => p.FromHour).Editable(true);
                    model.Field(p => p.ToHour).Editable(true);
                    model.Field(p => p.RowCreatedTime).Editable(false);
                    model.Field(p => p.RowCreatedUser).Editable(false);
                    model.Field(p => p.RowLastUpdatedTime).Editable(false);
                    model.Field(p => p.RowLastUpdatedUser).Editable(false);
                })
                .PageSize(20)
                .Read(read => read.Action("Read_DetailAvoidCallingTimeFrame", "TelesalesAvoidCallingTimeFrame", new { HeaderID = "#=Id#" }))
                .Create(update => update.Action("Save_DetailAvoidCallingTimeFrame", "TelesalesAvoidCallingTimeFrame", new { HeaderID = "#=Id#" }))
                .Update(update => update.Action("Update_DetailAvoidCallingTimeFrame", "TelesalesAvoidCallingTimeFrame"))
                )
                .ToClientTemplate())
                    </text>);
                }).ToClientTemplate())
        </div>
    </script>
</div>
@(Html.Kendo()
      .Window()
      .Name("windowimport")
      .Title("ImportForm")
      .Content(@<text>
        <div class="row-fluid">
            <div class="span7">
                <form id="importform" action="@Url.Content("~/TelesalesAvoidCallingTimeFrame/ImportFromExcel_AvoidCalling")" method="post" class="form-horizontal" enctype="multipart/form-data" style="margin-bottom:0px;">
                    <input type="file" id="FileUpload" name="FileUpload" />
                </form>
            </div>
            <button type="button" id="btnImport" class="btn btn-purple btn-small span2" style="float: right;">Import</button>
        </div>
        <div class="row-fluid">
            <a id="btndownload" style="display: none" class="btn btn-warning btn-small">@Resources.Multi.DownloadTemplateError</a>
        </div>
    </text>)
      .Draggable()
      .Resizable()
      .Visible(false)
      .Width(1000)
      .Actions(actions => actions.Close())

)

<script>

    var expandedRow; var currentid;
    function detailExpand(e) {
        // Only one open at a time
        if (expandedRow != null && expandedRow[0] != e.masterRow[0]) {
            var grid = $('#Grid').data('kendoGrid');

            grid.collapseRow(expandedRow);
        }
        expandedRow = e.masterRow;
        id = expandedRow[0].cells[0].innerText;

        var masterDataItem = $('#Grid').data('kendoGrid').dataItem(expandedRow);
        currentid = masterDataItem.Id;
    }

    $('#FileUpload').ace_file_input({
        no_file: 'No File ...',
        btn_choose: 'Choose',
        btn_change: 'Change',
        droppable: false,
        onchange: null,
        thumbnail: false //| true | large
    });
    $('#importAvoidCalling').bind('click', function () {
        $("#windowimport").kendoWindow({
            actions: {}, /*from Vlad's answer*/
            draggable: true,
            height: "300px",
            modal: true,
            resizable: false,
            width: "500px",
            visible: false /*don't show it yet*/
        }).data("kendoWindow").center().open();
    });

    $('#btnImport').bind('click', function () {
        $('#importform').submit();
    });
    (function () {
        $("#importform").ajaxForm({
            beforeSend: function () {
                $("#windowimport").data("kendoWindow").close();
                $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
            },
            uploadProgress: function (event, position, total, percentComplete) {
            },
            success: function (data) {
                if (data.success) {
                    $("#Grid").data("kendoGrid").dataSource.read();
                    $.unblockUI;
                    $.gritter.add({
                        title: '',
                        text: 'Import successfully ' + data.total + ' record(s)',
                        class_name: 'gritter-success'
                    });
                    if (data.totalError > 0) {
                        $("#windowimport").data("kendoWindow").open();
                        $('#btndownload').css('display', 'inline-block');
                        $('#btndownload').attr('href', r + "/PotentialCustomer/Download?file=" + data.link);
                    }
                    else {
                        $('#btndownload').css('display', 'none');
                        $('#btndownload').attr('href', "");
                    }
                }
                else {
                    $.gritter.add({
                        title: '',
                        text: 'Import Error',
                        class_name: 'gritter-error'
                    });
                    $.unblockUI;
                }
            },
            complete: function (xhr) {

            }
        });

    })();
    $('#HeaderName').bind('keypress', function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            filter();
        }
    });
    function filter() {
    
        grid = $("#Grid").data("kendoGrid");
        var HeaderName = $("#HeaderName").val();
        var filter = { logic: "and", filters: [] };
        var filterHeaderName = { logic: "or", filters: [] };
        if (HeaderName) {
            for (var i = 0; i < HeaderName.split(';').length; i++) {
                filterHeaderName.filters.push({ field: "HeaderName", operator: "contains", value: HeaderName.split(';')[i] });
            }
            filter.filters.push(filterHeaderName);
        }
        grid.dataSource.filter(filter);
    }

    function Delete() {
        var listrowid = "";
        $('#Grid').find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            var c = confirm("@Resources.Multi.DeleteConfirm");
            if (c == true) {
                $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
                $.post(r + "/TelesalesAvoidCallingTimeFrame/Delete", { data: listrowid, }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: '@Resources.Multi.Delete @Resources.Multi.Successfully',
                            class_name: 'gritter-success'
                        });
                        $("#Grid").data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAll').prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                        $("#Grid").data("kendoGrid").dataSource.read();
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: '@Resources.Multi.Please @Resources.Multi.Select.ToLower() data.',
                class_name: 'gritter-error'
            });
            return false;
        }
    }

    function DeleteDetail() {
        var listrowid = "";
        $("#GridDetail_" + currentid).find(".checkrowidDetail").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            var c = confirm("@Resources.Multi.DeleteConfirm");
            if (c == true) {
                $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
                $.post(r + "/TelesalesAvoidCallingTimeFrame/DeleteDetail", { data: listrowid, }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: '@Resources.Multi.Delete @Resources.Multi.Successfully',
                            class_name: 'gritter-success'
                        });
                        $("#GridDetail_" + currentid).data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAll').prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                        $("#GridDetail_" + currentid).data("kendoGrid").dataSource.read();
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: '@Resources.Multi.Please @Resources.Multi.Select.ToLower() data.',
                class_name: 'gritter-error'
            });
            return false;
        }
    }
    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }

    function checkAllDetail(e) {
        var x = $(e).prop('checked');
        $("#GridDetail_" + currentid).find(".checkrowidDetail").each(function () {
            $(this).prop('checked', x);
        });
    }

    function validateEmail(email) {
        var re = /\S+@@\S+\.\S+/;
        return re.test(email);
    }

    function dataBound(e) {
        resizeGrid();
        var grid = this;
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
       .options.parameterMap({
           page: grid.dataSource.page(),
           sort: grid.dataSource.sort(),
           filter: grid.dataSource.filter()
       });
        //var $exportLink = grid.element.find('.exportClass');
        //var href = $exportLink.attr('href');
        //href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
        //href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));
        //$exportLink.attr('href', href);
    }
    $(window).resize(function () {
        resizeGrid();
    });
    function error_handler(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                    $("#Grid").data("kendoGrid").dataSource.read();
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        } else {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
        }
    }

    function error_handlerDetail(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                    $("#GridDetail_" + currentid).data("kendoGrid").dataSource.read();
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        } else {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
        }
    }

    function onRequestEnd(e) {
        
        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Update @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
    }

    function onRequestEndDetail(e) {
       
        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Update @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#GridDetail_" + currentid).data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#GridDetail_" + currentid).data("kendoGrid").dataSource.read();
        }
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid");
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 30);
    }
    $('.icon-chevron-up').bind('click', function () {
        setInterval(function () {
            resizeGrid();
        }, 500)
    });

</script>
<style>
    .newlistExam .chosen-choices {
        width: 800px;
    }

    .newlistExam .chosen-drop {
        width: 800px;
    }

    .newlistExam .chosen-container {
        width: 800px !important;
    }
</style>
