@model IEnumerable<ERPAPD.Models.CRM_Category>
@{
    //ViewBag.Title = Resources.Multi.ListOfDistrict;
    ViewBag.Title = " Nhóm ngành";
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
}
<div class="row-fluid">
    <div class="span12">
        <div class="row-fluid">
            <input type="text" id="CodeInfoFilter" placeholder="Nhập mã/tên " style="width: 250px;" />
            <button type="button" id="btnSearch" class="btn btn-primary btn-small" style="float:none;" onclick="filter()">Tìm kiếm</button>
        </div>   
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @* </ Hiện thị thông tin> *@
        @(Html.Kendo()
        .Grid(Model)
        .Name("Grid")
        //.HtmlAttributes(new { style = "height: auto;" })
        .Columns(columns =>
        {
            columns.Bound(p => p.ID).HeaderTemplate("<input style='text-align:center;opaDistrict:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=ID#'  />").Width(25).Filterable(false).Sortable(false);
            columns.Bound(p => p.CategoryID).Width(140).Title("Mã nhóm ngành").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(p => p.CategoryName).Width(140).Title("Tên nhóm ngành").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(p => p.Active).Width(100).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).Title("Hoạt động");
            columns.Bound(p => p.RowCreatedUser).Width(100).Title(Resources.Multi.CreatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
            columns.Bound(p => p.RowCreatedTime).Width(100).Format("{0:" + Resources.Multi.DateFormat + "}").Title(Resources.Multi.CreatedAt).ClientTemplate("#=ConvertTimeZone(RowCreatedTime," + Constants.TIME_ZONE + ")#");
            columns.Bound(p => p.RowLastUpdatedUser).Width(100).Title(Resources.Multi.UpdatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
            columns.Bound(p => p.RowLastUpdatedTime).Format("{0:" + Resources.Multi.DateFormat + "}").Width(100).Title(Resources.Multi.UpdatedAt).ClientTemplate("#if(kendo.toString(RowLastUpdatedTime,'dd/MM/yyyy') != '01/01/1900'){#" + "#= ConvertTimeZone(RowLastUpdatedTime," + Constants.TIME_ZONE + ") #" + "#}#").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
        })
        .ToolBar(toolbar =>
        {
            toolbar.Create().Text("Thêm mới").HtmlAttributes(new { @style = "display:" + (AllowCreate ? "inline-block" : "none") });
            toolbar.Save().CancelText("Bỏ qua").SaveText("Lưu lại").HtmlAttributes(new { @style = "display:" + (AllowUpdate ? "inline-block" : "none") });
            toolbar.Custom()
                    .Text("Xóa bỏ")
                    .HtmlAttributes(new { @id = "btnDelete", @class = "btn btn-danger", @style = "display:" + (AllowDelete ? "inline-block" : "none"), @Href = "javascript:Delete()" });
        })
        .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
        .Navigatable()
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Scrollable(scrollable => scrollable.Virtual(false))
        .Sortable()
        //.Selectable(selectable => selectable.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
        .Resizable(resize => resize.Columns(true))
        .DataSource(dataSource => dataSource
                                            .Ajax()
                                            .Batch(true)
                                            .PageSize(50)
                                            .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                                            .Model(model =>
                                            {
                                                model.Id(p => p.ID);
                                                model.Field(p => p.ID).Editable(false);
                                                model.Field(p => p.RowCreatedTime).Editable(false);
                                                model.Field(p => p.RowCreatedUser).Editable(false);
                                                model.Field(p => p.RowLastUpdatedTime).Editable(false);
                                                model.Field(p => p.RowLastUpdatedUser).Editable(false);

                                                model.Field(p => p.Active).DefaultValue(true);

                                            })
                                            .Read("Read", "Category")
                                            .Create("Create", "Category")
                                            .Update("Update", "Category")
            )
        )
    </div>
</div>

<script>
    $(document).ready(function () {
        resizeGrid();
        //$("#listDistrictFilter").chosen();
        //$("#listCityFilter").chosen();
        //$("#listRegionFilter").chosen();
        //$("#listCountryFilter").chosen();
    });

    function dataBound(e) {

        resizeGrid();
        var grid = this;
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
       .options.parameterMap({
           page: grid.dataSource.page(),
           sort: grid.dataSource.sort(),
           filter: grid.dataSource.filter()
       });
        var $exportLink = grid.element.find('.exportClass');
        var href = $exportLink.attr('href');
        href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
        href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));
        $exportLink.attr('href', href);
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "Lỗi :\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                    //$("#Grid").data("kendoGrid").dataSource.read();
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
    function onRequestEnd(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Cập nhật dữ liệu thành công',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Thêm mới dữ liệu thành công',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid");
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 30);
    }
    $('.icon-chevron-up').bind('click', function () {
        setInterval(function () {
            resizeGrid();
        }, 500)
    });

    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }

    function Delete() {
        var listrowid = "";
        $('#Grid').find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            var c = confirm("Bạn có chắc chắn xóa dữ liệu");
            if (c == true) {
                $.post(r + "/Category/Delete", { data: listrowid, }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: '@Resources.Multi.Delete @Resources.Multi.Successfully',
                            class_name: 'gritter-success'
                        });
                        $("#Grid").data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAll').prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                        $("#Grid").data("kendoGrid").dataSource.read();
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: '@Resources.Multi.Please @Resources.Multi.Select.ToLower() dữ liệu.',
                class_name: 'gritter-error'
            });
            return false;
        }
    }

    function filter() {

        grid = $("#Grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };
        var filterCodeInfo = { logic: "or", filters: [] };


        var codeInfo = $("#CodeInfoFilter").val();
        if (codeInfo) {
            for (var i = 0; i < codeInfo.split(';').length; i++) {
                filterCodeInfo.filters.push({ field: "CategoryID", operator: "contains", value: codeInfo.split(';')[i] });
                filterCodeInfo.filters.push({ field: "CategoryName", operator: "contains", value: codeInfo.split(';')[i] });
            }
            filter.filters.push(filterCodeInfo);
        }
        grid.dataSource.filter(filter);
    }

    $('#CodeInfoFilter').bind('keypress', function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            filter();
        }
    });
</script>