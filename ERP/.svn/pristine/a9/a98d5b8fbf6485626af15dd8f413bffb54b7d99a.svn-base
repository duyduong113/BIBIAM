@using MCC.Models;
@using BIBIAM.Core;
@{
    ViewBag.Title = Html.Raw(Resources.Global._article_mgnt);
    bool all = ViewBag.accessDetail != null ? ViewBag.accessDetail.access["all"] : false;
    bool view = ViewBag.accessDetail != null ? ViewBag.accessDetail.access["view"] : false;
    bool update = ViewBag.accessDetail != null ? ViewBag.accessDetail.access["update"] : false;
    bool create = ViewBag.accessDetail != null ? ViewBag.accessDetail.access["create"] : false;
    bool delete = ViewBag.accessDetail != null ? ViewBag.accessDetail.access["delete"] : false;
}
@{
    var newData = new Article();
    newData.active = true;
}

<style>
    .k-pager-wrap {
        background: none;
        border: none;
        box-shadow: none;
        padding-top: 10px;
    }
    .info-title {
        font-weight: bold !important;
        color: darkblue !important;
    }
    .todo-tasklist-item.selected {
        background-color: #D2EDF3;
    }

    .displaynone {
        display: none;
    }

    .displayblock {
        display: block;
    }
</style>

<div class="col-md-12">
    <div class="tabbable-line">
        <ul class="nav nav-tabs">
            <li class="active">
                <a href="\\#tab_1" data-toggle="tab">Danh sách bài viết</a>
            </li>
            <li>
                <a href="\\#tab_2" data-toggle="tab" id="tab_2_click"> Tạo/Chỉnh sửa </a>
            </li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane in active" id="tab_1">
                <form method="post" id="FilterForm" novalidate="novalidate" style="padding-top:10px">
                    <div class="row">
                        <div class="col-md-2">
                            <div class="form-group">
                                @(Html.Kendo().DropDownList()
                                    .Name("active")
                                    .DataTextField("Text")
                                    .DataValueField("Value")
                                    .Events(e => e.Change("filter"))
                                    .OptionLabel("TRẠNG THÁI")
                                    .BindTo(new List<SelectListItem>() {
                                        new SelectListItem() {
                                            Text = "ĐANG SỬ DỤNG",
                                            Value = "true"
                                        },
                                        new SelectListItem() {
                                            Text = "KHÔNG SỬ DỤNG",

                                            Value ="false"
                                        }
                                })
                                .HtmlAttributes(new { style = "width: 100%;" })
                                )
                            </div>
                        </div>

                        <div class="col-md-7"></div>
 
                        <div class="col-md-3 form-group">
                            <div class="input-icon right">
                                <div class="input-group-btn input-icon right">
                                    <i class="icon-magnifier" onclick="filter()"></i>
                                    <input type="text" class="form-control form-control-solid" id="txtSearch" name="txtSearch" onkeyup="filter()" placeholder="@Html.Raw(Resources.Global._search)...">
                                </div>
                            </div>
                        </div>
                    </div>
                </form>

                <div class="row-fluid">
                    @(Html.Kendo().Grid<MCC.Models.Article>()
                .Name("Grid")
                .Columns(columns =>
                {
                columns.Bound(p => p.id)
                .HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />")
                .ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=id#+@@+#=active#+@@+#=name#'/>")
                .Width(20).Filterable(false).Sortable(false).HtmlAttributes(new { @class = "text-center" });
                columns.Template(@<text></text>).ClientTemplate("<a class='btn btn-xs btn-success' onClick='edit(this)'><i class='fa fa-pencil-square-o' aria-hidden='true'></i></a>").Width(35).HtmlAttributes(new { @class = "text-center" });
                columns.Template(@<text></text>).Width(300).Title("Thông tin bài viết")
                    .ClientTemplate("<div class='col-md-3' style='padding-left: 0; text-align: center;'><img src='#=imagesPublicId ? imagesPublicId : 'http://www.placehold.it/150x150/EFEFEF/AAAAAA&amp;text=no+image'#' alt='' style='display: inline' class='img-responsive'></div>"
                    + "<div class='col-md-8' style='padding-left:0;'" 
                    + "</br><span class='info-title'>tên bài viết :</span><span> #=name ? name : ''#</span></br>" +
                    "<span class='info-title'>" + Html.Raw(Resources.Global._created_by) + ":</span><span> #=createdBy#</span></br>" +
                    "<span class='info-title'>" + Html.Raw(Resources.Global._created_at) + ":</span><span> #=kendo.toString(kendo.parseDate(createdAt),'dd/MM/yyyy HH:mm')#</span></br>" +
                    "<div>#if(isDefault){#<span class='fa fa-check font-green'></span>" + @Html.Raw(Resources.Global._default) + " #}#</div>"
                    + "</div>");
                columns.Template(@<text></text>).Width(300).Title("mô tả: ")
                    .ClientTemplate("<div class='todo-tasklist-item-text'>#=description#</div>");
                columns.Template(@<text></text>).Width(210).Title("Trạng thái sử dụng")
                    .ClientTemplate(
                    "#if(active==true){#"
                    + "<label style='text-align:center;opacity:1;' class='btn green btn-outline btn-circle btn-sm active'>Đang sử dụng</label>"
                    + "#}else{#"
                    + "<label style='text-align:center;opacity:1;' class='btn red btn-outline btn-circle btn-sm active'>Không sử dụng</label>"
                    + "#}#"
                    + "</br><span class='info-title'>Người cập nhật :</span><span> #=createdBy ? createdBy : ''#</span></br>"
                    + "<span class='info-title'>Ngày cập nhật:</span><span> #=kendo.toString(kendo.parseDate(updatedAt),'dd/MM/yyyy') != '01/01/1900' ? kendo.toString(kendo.parseDate(updatedAt),'dd/MM/yyyy') : ''#</span></br>"
                    + "</br><span class='info-title'>Người tạo :</span><span> #=createdBy ? createdBy : ''#</span></br>"
                    + "<span class='info-title'>Ngày tạo:</span><span> #=kendo.toString(kendo.parseDate(createdAt),'dd/MM/yyyy') != '01/01/1900' ? kendo.toString(kendo.parseDate(createdAt),'dd/MM/yyyy') : ''#</span></br>"
                    );
                })
                .Pageable(pager => pager.PageSizes(new[] { 10, 100, 200, 300, 500 }))
                .Scrollable()
                .ToolBar(toolbar =>
                {
                toolbar.Template(@<text>
                                    <div class="pull-left">
                                        @if (create || all)
                                        {
                                            <a onclick='create()' class="btn btn-success btn-small"><i class="fa fa-plus" aria-hidden="true"></i> @Html.Raw(Resources.Global._add)</a>
                                        }
                                        @if (delete || all)
                                        {
                                            <button class="btn btn-small btn-danger" onclick=DelArticle()><i class="fa fa-trash" aria-hidden="true"></i> @Resources.Global._delete</button>
                                        }
                                        @if (all || update)
                                        {
                                            <button class="btn btn-small btn-primary" onclick="ActiveArticle()"><i class="fa fa-check-square-o" aria-hidden="true"></i> Sử dụng</button>
                                            <button class="btn btn-small btn-warning" onclick="InActiveArticle()"><i class="fa fa-exclamation-triangle" aria-hidden="true"></i> Không sử dụng</button>
                                        }
                                    </div>
                </text>);
                })
                .Events(events =>
                {
                    events.DataBound("onDatabound");
                })
                .Sortable()
                .Reorderable(reorderable => reorderable.Columns(true))
                .HtmlAttributes(new { @style = "height:700px" })
                .Resizable(resizable => resizable.Columns(true))
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Batch(false)
                    .PageSize(10)
                    .Sort(s => s.Add(a => a.id).Descending())
                    .Model(model =>
                    {
                        model.Id(p => p.id);
                    })
                    .Read(read => read.Action("Read", "Article"))
                ))
                </div>
            </div>

            <div class="tab-pane" id="tab_2">
                <div class="col-md-12 formEdit"></div>
            </div>
        </div>
    </div>
</div>
        
<script type="text/x-kendo-template" id="EditTemplate">
    <form action="@Url.Content("~/Article/CreateUpdate")" method="post" id="EditForm" novalidate="novalidate">
        <input type="hidden" name="id" value="#=id#" />
        <div class="portlet light bordered">
            <div class="portlet-title">
                <div class="actions">
                    @if (all || create || update)
                    {
                        <a onclick="clearForm()" class="btn default btn-circle"><i class="fa fa-ban" aria-hidden="true"></i> @Html.Raw(Resources.Global._cancel)</a>
                    }
                    #if(id>0){#
                    @if (all || delete)
                    {
                        <a onclick="removeArticle('#=id#')" class="btn red btn-circle"><i class="fa fa-trash" aria-hidden="true"></i> @Html.Raw(Resources.Global._delete)</a>
                    }
                    #}#
                    @if (all || create || update)
                    {
                        <button type="submit" class="btn blue btn-circle"><i class="fa fa-floppy-o" aria-hidden="true"></i> @Html.Raw(Resources.Global._save)</button>
                        <a onclick="saveAndClear()" class="btn green btn-circle"><i class="fa fa-floppy-o" aria-hidden="true"></i> @Html.Raw(Resources.Global._save_new)</a>
                    }
                </div>
            </div>
            <div class="portlet-body form ">
                <div class="form-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                #if(isDefault==false){#
                                <input type="hidden" name="isDefault" value="false">
                                #}else{#
                                <input type="hidden" name="isDefault" value="true">
                                #}#
                                <label>@Html.Raw(Resources.Global._type)<span class="required"> * </span></label>
                                <div class="input-group">
                                    @(Html.Kendo().DropDownList()
                                    .Name("type")
                                    .Value("#=type ? type : ''#")
                                    .DataTextField("Text")
                                    .DataValueField("Value")
                                    .OptionLabel(Html.Raw(Resources.Global._type).ToString() + "...")
                                    .BindTo(new List<SelectListItem>() {
                                        new SelectListItem() {
                                        Text = Html.Raw(Resources.Global._news).ToString(),
                                        Value = "news"
                                        },
                                        new SelectListItem() {
                                        Text = Html.Raw(Resources.Global._policy).ToString(),
                                        Value = "policy"
                                        }
                                        })
                                        .HtmlAttributes(new { style = "width: 100%" }).ToClientTemplate()
                                    )
                                    <span class="input-group-btn">
                                        <a class="btn #=isDefault==false ? 'default' : 'green'# btn-sm" onclick="changeDefault(this)">
                                            <i class="fa fa-check"></i> @Html.Raw(Resources.Global._default)
                                        </a>
                                    </span>
                                </div>
                            </div>

                            @if (ViewBag.isAdmin)
                            {
                                <div class="form-group">
                                    <div class="clearfix">
                                        <div class="btn-group btn-group-circle" data-toggle="buttons">
                                            <label class="btn red btn-sm btn-outline #=!allUser ? 'active' : ''#">
                                                #if(allUser==false){#
                                                <input type="radio" name="allUser" value="false" class="toggle" checked> @Html.Raw(Resources.Global._in_showroom)
                                                #}else{#
                                                <input type="radio" name="allUser" value="false" class="toggle"> @Html.Raw(Resources.Global._in_showroom)
                                                #}#
                                            </label>
                                            <label class="btn green btn-sm btn-outline #=allUser ? 'active' : ''#">
                                                #if(allUser==true){#
                                                <input type="radio" name="allUser" value="true" class="toggle" checked> @Html.Raw(Resources.Global._all)
                                                #}else{#
                                                <input type="radio" name="allUser" value="true" class="toggle"> @Html.Raw(Resources.Global._all)
                                                #}#
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            }
                           
                            <div class="form-group">
                                <label>@Html.Raw(Resources.Global._name_Caps)<span class="required"> * </span></label>
                                <div class="input-icon right">
                                    <i class="fa"></i>
                                    <input type="text" class="form-control input-sm" placeholder="@Html.Raw(Resources.Global._name_Caps)" name="name" value="#=name!=null ? name : ''#">
                                </div>
                            </div>
                            <div class="form-group">
                                <label>@Html.Raw(Resources.Global._description)<span class="required"> * </span></label>
                                <textarea class="form-control" name="description" rows="2">#=description!=null ? description : ''#</textarea>
                            </div>

                            #if(id>0){#
                            <div class="form-group">
                                <label>@Html.Raw(Resources.Global._date_created):</label>
                                <div class="input-group input-icon right date date-picker" data-date-format="dd/mm/yyyy">
                                    <input type="text" class="form-control" placeholder="@DateTime.Now.ToString("yyyy-MM-dd")" name="createdAt" value="#=kendo.toString(kendo.parseDate(createdAt),'yyyy/MM/dd') !='0001/01/01' && createdAt !=null ? kendo.toString(kendo.parseDate(createdAt),'dd/MM/yyyy'): ''#" readonly>
                                    <span class="input-group-btn">
                                        <button class="btn default" type="button">
                                            <i class="fa fa-calendar"></i>
                                        </button>
                                    </span>
                                </div>
                            </div>
                            <div class="form-group">
                                <label>@Html.Raw(Resources.Global._date_update):</label>
                                <div class="input-group input-icon right date date-picker" data-date-format="dd/mm/yyyy">
                                    <input type="text" class="form-control" placeholder="@DateTime.Now.ToString("yyyy-MM-dd")" name="updatedAt" value="#=kendo.toString(kendo.parseDate(updatedAt),'yyyy/MM/dd') !='0001/01/01' && updatedAt !=null ? kendo.toString(kendo.parseDate(updatedAt),'dd/MM/yyyy'): ''#" readonly>
                                    <span class="input-group-btn">
                                        <button class="btn default" type="button">
                                            <i class="fa fa-calendar"></i>
                                        </button>
                                    </span>
                                </div>
                            </div>
                            #}#

                        </div>
                        <div class="col-md-6">
                            <div class="col-md-2"></div>
                            <div class="col-md-10">
                                <div class="form-group">
                                    <div class="fileinput fileinput-new" data-provides="fileinput">
                                        <label>Ảnh đại diện</label>
                                        <div class="clearfix">
                                            <div class="input-group">
                                                <div class="fileinput fileinput-new" data-provides="fileinput">
                                                    <div class="fileinput-new thumbnail" style="width: 255px; height:200px;">
                                                        <img src="#=imagesPublicId ? imagesPublicId : 'http://www.placehold.it/280x160/EFEFEF/AAAAAA&amp;text=no+image'#" style="width: 255px; height:200px;" alt="" />
                                                    </div>
                                                    <div class="fileinput-preview fileinput-exists thumbnail" style="width: 255px; height:200px;"> </div>
                                                    <div>
                                                        <span class="btn default btn-file btn-sm btn-circle">
                                                            <span class="fileinput-new"> @Html.Raw(Resources.Global._select_image) </span>
                                                            <span class="fileinput-exists"> @Html.Raw(Resources.Global._change) </span>
                                                            <input type="hidden"><input type="file" name="file">
                                                        </span>
                                                        <a href="javascript:;" class="btn red fileinput-exists btn-sm btn-circle" data-dismiss="fileinput" onclick="resetDefaultFileInput()"> @Html.Raw(Resources.Global._remove) </a>
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label>@Html.Raw(Resources.Global._status)</label>
                                    <div class="clearfix">
                                        <div class="btn-group btn-group-circle" data-toggle="buttons">
                                            <label class="btn red btn-sm btn-outline #=!active ? 'active' : ''#">
                                                #if(active==false){#
                                                <input type="radio" name="active" value="false" class="toggle" checked>@Html.Raw(Resources.Global._not_used)
                                                #}else{#
                                                <input type="radio" name="active" value="false" class="toggle"> @Html.Raw(Resources.Global._not_used)
                                                #}#
                                            </label>
                                            <label class="btn green btn-sm btn-outline #=active ? 'active' : ''#">
                                                #if(active==true){#
                                                <input type="radio" name="active" value="true" class="toggle" checked> @Resources.Global._used
                                                #}else{#
                                                <input type="radio" name="active" value="true" class="toggle"> @Resources.Global._used
                                                #}#
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
       
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label>@Html.Raw(Resources.Global._content_Caps)</label>
                                <div class="clearfix">
                                    @(Html.Kendo().Editor().Name("content")
                                        .Value("#=content ? content : ''#")
                                        .Encode(false)
                                        .HtmlAttributes(new { style = "height:450px;width:100%;", placeholder = Html.Raw(Resources.Global._content_Caps) })
                                        .Tools(tools => tools
                                        .Clear()
                                        .Bold().Italic().Underline().Strikethrough()
                                        .JustifyLeft().JustifyCenter().JustifyRight().JustifyFull()
                                        .InsertUnorderedList().InsertOrderedList()
                                        .Outdent()
                                        .Indent()
                                        .CreateLink().Unlink()
                                        //.InsertImage()
                                        .InsertFile()
                                        .SubScript()
                                        .SuperScript()
                                        .TableEditing()
                                        .ViewHtml()
                                        .Formatting()
                                        .CleanFormatting()
                                        .FontColor()
                                        .BackColor()
                                        .CustomTemplate(template => template.Template("<a class='k-button' onclick='onFullScreen(this)'>" + Html.Raw(Resources.Global._full_screen) + "</a><a class='k-button' onclick='show_popup_selectimage()'>" + Html.Raw(Resources.Global._select_image) + "</a>")))
                                        .Messages(m => m
                                            .ImageWebAddress(@Resources.Global._image_addr)
                                            .DialogCancel(@Resources.Global._cancel)
                                            .DialogInsert(@Resources.Global._add)
                                        )
                                        .FileBrowser(fileBrowser => fileBrowser
                                        .File(@HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority) + "/Content/Upload/docs/{0}")
                                        .Read("Read", "FileBrowser")
                                        .Create("Create", "FileBrowser")
                                        .Destroy("Destroy", "FileBrowser")
                                        .Upload("Upload", "FileBrowser")
                                        ).ToClientTemplate()
                                    )
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </form>
    
</script>
@Html.Partial("_popup_select_image")

<script type="text/x-kendo-template" id="NoItemsTemplate">
    <div class="text-center" style="padding: 30px 0 20px 0;">
        <i class="fa fa-newspaper-o" style="font-size: 72px; color:\\#e1e5ec"></i>
        <div style="font-size: 18px; margin-top: 10px;">Không tìm thấy kết quả nào!</div>
    </div>
</script>

<script>
        $(document).ready(function () {
        loadForm(@Html.Raw(Json.Encode(newData)));
        $('.date-picker').datepicker({ format: 'dd/MM/yyyy', autoclose: true, orientation: "auto", todayHighlight: true, });
        //$(".date-picker").datepicker({ rtl: App.isRTL(), orientation: "left", autoclose: !0 });
    });
    function onDatabound() {
        //var Grid = this;
        //if (this.dataSource.total() == 0) {
        //    var NoItemsTemplate = kendo.template($("#NoItemsTemplate").html());
        //    $(this.element).next("#Grid").css('display', 'none');
        //    $(this.element).html(NoItemsTemplate({}));
        //} else {
        //    $(this.element).next("#NoItemsTemplate").css('display', 'none');
        //    $(this.element).next("#Grid").css('display', 'block');
        //}
    }
     function Getlistcheck(type) {
        var listrowid = [];
        var listrowidyes = '';
        var listrowidno = '';
        switch (type) {
            case 1:
                {
                    $('#Grid').find(".checkrowid").each(function () {
                        if ($(this).prop('checked') == true){
                            if($(this).attr("id").split(/@@@@/)[1].trim()!='true'){
                                listrowidyes += $(this).attr("id").split(/@@@@/)[0].trim() + ',';
                                $(this).data();
                            }
                            else
                            {
                                toastr.error('',$(this).attr("id").split(/@@@@/)[2].trim()+" đang được sử dụng!" );
                                listrowidno += $(this).attr("id").split(/@@@@/)[0].trim() + ',';
                                $(this).data();
                            }
                        }
                    })
                }
                break;
            case 2:
                {
                    $('#Grid').find(".checkrowid").each(function () {
                        if ($(this).prop('checked') == true){
                            if($(this).attr("id").split(/@@@@/)[1].trim()!='false'){
                                listrowidyes += $(this).attr("id").split(/@@@@/)[0].trim() + ',';
                                $(this).data();
                            }
                            else
                            {
                                toastr.error('',$(this).attr("id").split(/@@@@/)[2].trim()+" đã không sử dụng!" );
                                listrowidno += $(this).attr("id").split(/@@@@/)[0].trim() + ',';
                                $(this).data();
                            }
                        }
                    })
                }
                break;
            case 3:
                {
                    $('#Grid').find(".checkrowid").each(function () {
                        if ($(this).prop('checked') == true) {
                            listrowidyes += $(this).attr("id").split(/@@@@/)[0].trim() + ',';
                            $(this).data();
                        }
                    })
                }
                break;
        }
        listrowid.listrowidyes = listrowidyes;
        listrowid.listrowidno = listrowidno;
        return listrowid;
    }
     function DelArticle() {
        var data = Getlistcheck(3);
        if(data.listrowidyes=='')
        {
            toastr.error('', "Vui lòng chọn Bài viết cần xóa!");
            return;
        }
        bootbox.dialog({
            message: "@Resources.Global._are_your_sure", title: "Xóa các Bài viết đã chọn!",
            buttons:
                {
                    danger: { label: "@Resources.Global._close", className: "btn default btn-circle btn-sm", callback: function () { } },
                    main: {
                        label: "@Resources.Global._confirm", className: "btn green btn-circle btn-sm", callback: function () {
                            App.blockUI({ boxed: !0, message: '@Resources.Global._just_amoment...' });
                            $.post(r + "/Article/Delete", { data: data.listrowidyes}, function (data) {
                                if (data.success) {
                                    toastr.clear();
                                    $("#Grid").data("kendoGrid").dataSource.read();
                                    toastr.success('', 'Xóa thành công');
                                } else {
                                    toastr.clear();
                                    toastr.error('', data.message);
                                }
                                App.unblockUI();
                            });
                        }
                    }
                }
        })
    }
    function ActiveArticle() {
        var data = Getlistcheck(1);
        if(data.listrowidyes=='')
        {
            return;
        }
        bootbox.dialog({
            message: "@Resources.Global._are_your_sure", title: "Sử dụng các Bài viết đã chọn!",
            buttons:
                {

                    danger: { label: "@Resources.Global._close", className: "btn default btn-circle btn-sm", callback: function () { } },
                    main: {
                        label: "@Resources.Global._confirm", className: "btn green btn-circle btn-sm", callback: function () {
                            App.blockUI({ boxed: !0, message: '@Resources.Global._just_amoment...' });
                            $.post(r + "/Article/Active", { data: data.listrowidyes }, function (data) {
                                if (data.success) {
                                    toastr.clear();
                                    $("#Grid").data("kendoGrid").dataSource.read();
                                    toastr.success('', 'Sử dụng thành công');
                                } else {
                                    toastr.clear();
                                    toastr.error('', data.message);
                                }
                                App.unblockUI();
                            });
                        }
                    }
                }
        })
    }
    function InActiveArticle() {
        var data = Getlistcheck(2);
        if(data.listrowidyes=='')
        {
            return;
        }
        bootbox.dialog({
            message: "@Resources.Global._are_your_sure", title: "Không sử dụng các Bài viết đã chọn!",
            buttons:
                {

                    danger: { label: "@Resources.Global._close", className: "btn default btn-circle btn-sm", callback: function () { } },
                    main: {
                        label: "@Resources.Global._confirm", className: "btn green btn-circle btn-sm", callback: function () {
                            App.blockUI({ boxed: !0, message: '@Resources.Global._just_amoment...' });
                            $.post(r + "/Article/Active", { data: data.listrowidyes }, function (data) {
                                if (data.success) {
                                    toastr.clear();
                                    $("#Grid").data("kendoGrid").dataSource.read();
                                    toastr.success('', 'Ngưng sử dụng thành công');
                                } else {
                                    toastr.clear();
                                    toastr.error('', data.message);
                                }
                                App.unblockUI();
                            });
                        }
                    }
                }
        })
    }

    function changeDefault(e) {
        var checkDefault = $(e).hasClass("green");
        if (checkDefault) {
            $(e).removeClass("green").addClass("default");
            $("input[name='isDefault']").val("false");
        } else {
            $(e).removeClass("default").addClass("green");
            $("input[name='isDefault']").val("true");
        }
    }

    function toggleFullScreen() {
        if (!document.fullscreenElement &&
            !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {
            if (document.documentElement.requestFullscreen) {
                document.documentElement.requestFullscreen();
            } else if (document.documentElement.msRequestFullscreen) {
                document.documentElement.msRequestFullscreen();
            } else if (document.documentElement.mozRequestFullScreen) {
                document.documentElement.mozRequestFullScreen();
            } else if (document.documentElement.webkitRequestFullscreen) {
                document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
            }
            return true;
        } else {
            if (document.exitFullscreen) {
                document.exitFullscreen();
            } else if (document.msExitFullscreen) {
                document.msExitFullscreen();
            } else if (document.mozCancelFullScreen) {
                document.mozCancelFullScreen();
            } else if (document.webkitExitFullscreen) {
                document.webkitExitFullscreen();
            }
            return false;
        }
    }


    function cardSelected(e) {
        $(".todo-tasklist-item").removeClass("selected");
        $(e).closest(".todo-tasklist-item").addClass("selected");
    }
    function removeArticle(id) {
        bootbox.dialog({
            message: "@Html.Raw(Resources.Global._are_your_sure)", title: "@Html.Raw(Resources.Global._delete) @Html.Raw(Resources.Global._article)",
            buttons:
                {
                    danger: { label: "@Html.Raw(Resources.Global._close)", className: "btn default btn-circle btn-sm", callback: function () { } },
                    main: {
                        label: "@Html.Raw(Resources.Global._confirm)", className: "btn green btn-circle btn-sm", callback: function () {
                            App.blockUI({ boxed: !0, message: '@Resources.Global._just_amoment...' });
                            $.post(r + "/Article/Delete", { data: id }, function (data) {
                                if (data.success) {
                                    $("#Grid").data("kendoGrid").dataSource.read();
                                    toastr.clear();
                                    toastr.success('', '@Resources.Global._delete_successfully');
                                    clearForm();
                                } else {
                                    toastr.clear();
                                    toastr.error('', data.error);
                                }
                                App.unblockUI();
                            });
                        }
                    }
                }
        })
    }
    var reset = false;
    function saveAndClear() {
        reset = true;
        $('#EditForm').submit();
    }
    function clearForm() {
        loadForm(JSON.parse('@Html.Raw(Json.Encode(newData))'));
    }
    function create() {
        clearForm();
        $("#tab_2_click").trigger("click");
    }
    function getTextById(datas, key, value, requestField) {
        var response = _.filter(JSON.parse(datas), function (data) {
            return data[key] == value;
        });
        return response[0] ? response[0][requestField] : "";
    }
    function edit(e) {
        var data = $('#Grid').data('kendoGrid').dataItem($(e).closest('tr'));
        loadForm(data);
        $("#tab_2_click").trigger("click");
        loadValidate();
        cardSelected(e);
        if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
            $("html, body").animate({
                scrollTop: $(".formEdit").offset().top
            }, 600);
        } else {
            $("html, body").animate({
                scrollTop: $(".formEdit").offset().top - 70
            }, 600);
        }
    }
    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }


    function loadForm(data) {
        var EditTemplate = kendo.template($("#EditTemplate").html());
        $(".formEdit").html(EditTemplate(data));
        loadValidate();

    }


    function loadValidate() {
        var e = $("#EditForm"),
        r = $(".alert-danger", e),
        i = $(".alert-success", e);
        e.validate(
            {
                errorElement: "span",
                errorClass: "help-block help-block-error",
                focusInvalid: !1,
                ignore: "",
                rules:
                    {
                        name: { required: !0 },
                        description: { required: !0 },
                    },
                invalidHandler: function (e, t) {
                    i.hide(), r.show(), App.scrollTo(r, -200)
                },
                errorPlacement: function (e, r) {
                    var i = $(r).parent(".input-icon").children("i");
                    i.removeClass("fa-check").addClass("fa-warning"),
                    i.attr("data-original-title",
                        e.text()).tooltip({ container: "body" })
                },
                highlight: function (e) {
                    $(e).closest(".form-group").removeClass("has-success").addClass("has-error")
                },
                unhighlight: function (e) {
                },
                success: function (e, r) {
                    var i = $(r).parent(".input-icon").children("i");
                    $(r).closest(".form-group").removeClass("has-error").addClass("has-success"),
                    i.removeClass("fa-warning").addClass("fa-check")
                },
                submitHandler: function (e) {
                    i.show(); r.hide();
                    $(e).ajaxSubmit({
                        beforeSend: function () {
                            App.blockUI({ boxed: !0, message: '@Html.Raw(Resources.Global._just_amoment)...' });
                        },
                        success: function (data) {
                            if (data.success) {
                                toastr.success('', '@Html.Raw(Resources.Global._save_successfully)')
                                $("#Grid").data("kendoGrid").dataSource.read();
                                if (reset) {
                                    reset = false;
                                    loadForm(JSON.parse('@Html.Raw(Json.Encode(newData))'));
                                } else {
                                    loadForm(data.data);
                                }
                                setTimeout(function () { $(".todo-tasklist-item_" + data.data.id).addClass("selected") }, 1000);
                            }
                            else {
                                toastr.error('', data.error)
                            }
                        },
                        complete: function (xhr) {
                            App.unblockUI();
                        }
                    });
                }
            });

    }

    function filter() {
        Grid = $("#Grid").data("kendoGrid");
        var seachText = $("#txtSearch").val();
        var filter = { logic: "and", filters: [] };
        var filterDesc = { logic: "or", filters: [] };

        if (seachText.length) {
            filterDesc.filters.push({ field: "name", operator: "contains", value: seachText });
            filterDesc.filters.push({ field: "description", operator: "contains", value: seachText });
            filterDesc.filters.push({ field: "content", operator: "contains", value: seachText });
            filter.filters.push(filterDesc);
        }
        var trang_thai = $('#active').val();
        if (trang_thai != null && trang_thai != "") {
            filter.filters.push({ field: "active", operator: "eq", value: trang_thai });
        }
        Grid.dataSource.filter(filter);
    }
    function onFullScreen(e) {
        var editor = $("#content").data("kendoEditor");
        if ($(e).html() == "@Html.Raw(Resources.Global._full_screen)") {
            $(e).html("@Html.Raw(Resources.Global._restore_down)");
            editor.wrapper.css("height", $(window).height())
            .css("width", "100%")
            .css("position", 'fixed')
            .css("top", 0)
            .css("left", 0).css("z-index", 10000).css("overflow", "hidden");
        } else {
            $(e).html("@Html.Raw(Resources.Global._full_screen)");
            editor.wrapper.css("height", "450px").css("position", 'relative').css("width", "100%").css("z-index", 10).css("overflow", "auto");
        }
    }
</script>