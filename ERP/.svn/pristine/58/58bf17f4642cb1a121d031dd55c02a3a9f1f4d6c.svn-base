using MCC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using ServiceStack.OrmLite;
using ServiceStack.OrmLite.SqlServer;
using Kendo.Mvc.UI;
using System.Data;
using System.IO;
using OfficeOpenXml;
using CloudinaryDotNet;
using System.Configuration;
using Hangfire;
using MCC.Controllers;
using MCC.Filters;
using MCC.Helpers;
using Kendo.Mvc.Extensions;
using System.Text.RegularExpressions;
using System.Text;
using BIBIAM.Core.Entities;
using BIBIAM.Core.Data.DataObject;
using BIBIAM.Core;

namespace MCC.Controllers
{
    [Authorize]
    [CustomActionFilter(permission = "all,view,update,create,delete,export")]
    public class Merchant_OrderController : CustomController
    {
        public ActionResult Index()
        {
            if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["view"]))
            {
                ViewBag.isAdmin = isAdmin;
                return View();
            }
            return RedirectToAction("NoAccess", "Error");
        }
        public ActionResult Read([DataSourceRequest]DataSourceRequest request)
        {

            if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["view"]))
            {
                using (var dbConn = MCC.Helpers.OrmliteConnection.openConn(AppConfigs.MCCConnectionString))
                {
                    var data = new DataSourceResult();
                    if (isAdmin)
                        data = KendoApplyFilter.KendoData<Merchant_OrderHeader>(request);
                    else
                        data = KendoApplyFilter.KendoData<Merchant_OrderHeader>(request, "ma_gian_hang={0}".Params(currentUser.ma_gian_hang));
                    return Json(data, JsonRequestBehavior.AllowGet);
                }
            }
            return RedirectToAction("NoAccess", "Error");
        }
        public ActionResult ChangeStatus(string ma_don_hang, string trang_thai_don_hang)
        {
            if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["create"] || accessDetail.access["edit"]))
            {
                string rs = new Merchant_Order_DAO().ChangeStatus(ma_don_hang, trang_thai_don_hang, currentUser.name, AppConfigs.MCCConnectionString);
                if (!string.IsNullOrEmpty(rs))
                {
                    string[] StringSplit = new string[] { "@@" };
                    if (rs.Split(StringSplit, StringSplitOptions.None)[0] == "false")
                        return Json(new { success = false, error = rs.Split(StringSplit, StringSplitOptions.None)[1] });
                    using (var dbConn = MCC.Helpers.OrmliteConnection.openConn())
                    {
                        var data = dbConn.FirstOrDefault<Merchant_OrderHeader>("ma_don_hang={0}".Params(ma_don_hang));
                        return Json(new { success = true, data = data });
                    }
                }
            }
            else
            {
                return Json(new { success = false, error = "Không có quyền" });
            }
            return Json(new { success = true });
        }
        public ActionResult Cancel(string ma_don_hang, string ly_do_huy)
        {
            if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["create"] || accessDetail.access["edit"]))
            {
                string rs = new Merchant_Order_DAO().Cancel(ma_don_hang, ly_do_huy, currentUser.name, AppConfigs.MCCConnectionString);
                if (!string.IsNullOrEmpty(rs))
                {
                    string[] StringSplit = new string[] { "@@" };
                    if (rs.Split(StringSplit, StringSplitOptions.None)[0] == "false")
                        return Json(new { success = false, error = rs.Split(StringSplit, StringSplitOptions.None)[1] });
                    using (var dbConn = MCC.Helpers.OrmliteConnection.openConn())
                    {
                        var data = dbConn.FirstOrDefault<Merchant_OrderHeader>("ma_don_hang={0}".Params(ma_don_hang));
                        return Json(new { success = true, data = data });
                    }
                }
            }
            else
            {
                return Json(new { success = false, error = "Không có quyền" });
            }
            return Json(new { success = true });
        }
        public ActionResult CreateUpdate(Merchant_OrderHeader data, List<Merchant_OrderDetail> details)
        {
            using (var dbConn = MCC.Helpers.OrmliteConnection.openConn())
            {
                    try
                    {
                        if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["create"]))
                        {
                            if (details == null)
                            {
                                return Json(new { success = false, error = "Vui lòng chọn sản phẩm!" });
                            }
                            //Tạo OrderHeader
                            var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                            var beginString = new char[3];
                            var lastString = new char[3];
                            var random = new Random();

                            for (int i = 0; i < beginString.Length; i++)
                            {
                                beginString[i] = chars[random.Next(chars.Length)];
                            }
                            for (int i = 0; i < lastString.Length; i++)
                            {
                                lastString[i] = chars[random.Next(chars.Length)];
                            }
                            data.ma_don_hang = string.Join("", beginString) + DateTime.Now.ToString("yyyyMMddHHmm") + string.Join("", lastString);
                            Customer custom = dbConn.FirstOrDefault<Customer>("ma_khach_hang={0}".Params(data.ma_khach_hang));
                            location_city city = dbConn.FirstOrDefault<location_city>("ma_thanh_pho={0}".Params(data.tinh_thanh_giao));
                            location_district district = dbConn.FirstOrDefault<location_district>("ma_quan_huyen={0}".Params(data.quan_huyen_giao));
                            data.quan_huyen_giao = district.ten_quan_huyen;
                            data.tinh_thanh_giao = city.ten_thanh_pho;
                            data.ma_gian_hang = currentUser.ma_gian_hang;
                            data.hoten = custom.hoten;
                            data.trang_thai_don_hang = "New";
                            data.ngay_tao = DateTime.Now;
                            data.ngay_cap_nhat = DateTime.Now;
                            data.ngay_lay_hang = DateTime.Now;
                            data.ngay_giao_hang = DateTime.Now;
                            data.ngay_xac_nhan = DateTime.Now;
                            data.ngay_hen_giao_hang = DateTime.Now;
                            data.nguoi_tao = User.Identity.Name;
                            dbConn.Insert(data);
                            int Id = (int)dbConn.GetLastInsertId();
                            data.id = Id;

                            //Tạo OrderDetail
                            Merchant_Product productinfo = new Merchant_Product();
                            Merchant_OrderDetail exist = new Merchant_OrderDetail();
                            foreach (Merchant_OrderDetail item in details)
                            {
                                if (item.ma_san_pham != null)
                                {
                                    if (isAdmin)
                                    {
                                        productinfo = dbConn.FirstOrDefault<Merchant_Product>("ma_san_pham={0}", item.ma_san_pham);
                                        exist = dbConn.FirstOrDefault<Merchant_OrderDetail>("ma_don_hang={0} and ma_san_pham={1}".Params(data.ma_don_hang, item.ma_san_pham));
                                    }
                                    else
                                    {
                                        productinfo = dbConn.FirstOrDefault<Merchant_Product>("ma_san_pham={0} and ma_gian_hang={1}", item.ma_san_pham, currentUser.ma_gian_hang);
                                        exist = dbConn.FirstOrDefault<Merchant_OrderDetail>("ma_don_hang={0} and ma_san_pham={1} and ma_gian_hang={2}".Params(data.ma_don_hang, item.ma_san_pham, currentUser.ma_gian_hang));
                                    }
                                    if (exist != null)
                                    {
                                        exist.so_luong = exist.so_luong + item.so_luong;
                                        dbConn.UpdateOnly(exist,
                                        onlyFields: p =>
                                        new
                                        {
                                            p.so_luong,
                                        },
                                         where: p => p.ma_don_hang == exist.ma_don_hang && p.ma_san_pham == exist.ma_san_pham && p.ma_gian_hang == currentUser.ma_gian_hang);
                                    }
                                    else
                                    {
                                        item.ma_don_hang = data.ma_don_hang;
                                        item.ma_gian_hang = currentUser.ma_gian_hang;
                                        item.ten_san_pham = productinfo.ten_san_pham;
                                        item.don_gia = productinfo.don_gia;
                                        item.thanh_tien = item.so_luong * productinfo.don_gia;
                                        item.ngay_tao = DateTime.Now;
                                        item.ngay_cap_nhat = DateTime.Now;
                                        item.nguoi_tao = User.Identity.Name;
                                        dbConn.Insert(item);
                                    }
                                }

                            }
                            new Merchant_Order_DAO().SyncOrderToFE(data.ma_don_hang, data.ma_gian_hang, AppConfigs.MCCConnectionString);

                        }
                        else
                        {
                            return Json(new { success = false, error = "Không có quyền tạo" });
                        }
                    }
                    catch (Exception e)
                    {
                        return Json(new { success = false, error = "Lỗi" });
                    }
            }
            return Json(new { success = true, data = data });
        }

        public ActionResult ReadOrderDetail([DataSourceRequest]DataSourceRequest request, string ma_don_hang)
        {
            using (IDbConnection dbConn = Helpers.OrmliteConnection.openConn())
            {
                var data = new List<Merchant_OrderDetail>();
                if (isAdmin)
                    data = dbConn.Select<Merchant_OrderDetail>("ma_don_hang = {0}", ma_don_hang);
                else
                    data = dbConn.Select<Merchant_OrderDetail>("ma_gian_hang ={0} and ma_don_hang = {1}", currentUser.ma_gian_hang, ma_don_hang);
                return Json(data.ToDataSourceResult(request));
            }
        }

        public ActionResult GetProductInfo(string ma_san_pham)
        {
            using (IDbConnection dbConn = Helpers.OrmliteConnection.openConn())
            {
                var data = new Merchant_Product();
                if (isAdmin)
                    data = dbConn.FirstOrDefault<Merchant_Product>("ma_san_pham = {0}", ma_san_pham);
                else
                    data = dbConn.FirstOrDefault<Merchant_Product>("ma_gian_hang ={0} and ma_san_pham = {1}", currentUser.ma_gian_hang, ma_san_pham);
                if (data != null)
                {
                    return Json(new { success = true, data = data, JsonRequestBehavior.AllowGet });
                }
                return Json(new { success = false, error = "Sản phẩm không tồn tại!", JsonRequestBehavior.AllowGet });
            }
        }
        public ActionResult GetCustomer([DataSourceRequest]DataSourceRequest request, string text)
        {
            using (IDbConnection dbConn = Helpers.OrmliteConnection.openConn())
            {
                if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["read"]))
                {
                    var data = new List<CustomerModelView>();
                    if (isAdmin)
                    {
                        data = dbConn.Select<CustomerModelView>("select  TOP 5 ma_khach_hang,hoten,sdt from Customer WHERE hoten COLLATE Latin1_General_CI_AI  LIKE N'%" + text + "%' or sdt COLLATE Latin1_General_CI_AI  LIKE N'%" + text + "%'");
                    }
                    else
                    {
                        data = dbConn.Select<CustomerModelView>("select TOP 5 b.ma_khach_hang,b.hoten,b.sdt from Merchant_Customer a left join Customer b on a.ma_khach_hang=b.ma_khach_hang where a.ma_gian_hang={0}".Params(currentUser.ma_gian_hang) + " and (b.hoten COLLATE Latin1_General_CI_AI  LIKE N'%" + text + "%' or b.sdt COLLATE Latin1_General_CI_AI  LIKE N'%" + text + "%')");
                    }

                    return Json(data, JsonRequestBehavior.AllowGet);
                }
                return Json(new { message = "Không có quyền!" }, JsonRequestBehavior.AllowGet);
            }
        }
        public ActionResult GetCustomerInfo(string ma_khach_hang)
        {
            using (IDbConnection dbConn = Helpers.OrmliteConnection.openConn())
            {
                if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["read"]))
                {
                    var data = new Customer();
                    data = dbConn.FirstOrDefault<Customer>("ma_khach_hang={0}".Params(ma_khach_hang));
                    return Json(new { success = true, data = data, JsonRequestBehavior.AllowGet });
                }
                return Json(new { success = false, error = "Lỗi", JsonRequestBehavior.AllowGet });
            }
        }
        public ActionResult GetCity()
        {
            using (var dbConn = MCC.Helpers.OrmliteConnection.openConn())
            {
                var data = new List<location_city>();
                data = dbConn.Select<location_city>();
                return Json(data, JsonRequestBehavior.AllowGet);
            }
        }
        public ActionResult GetDistrict(string ma_thanh_pho)
        {
            using (var dbConn = MCC.Helpers.OrmliteConnection.openConn())
            {
                var data = new List<location_district>();
                data = dbConn.Select<location_district>("ma_thanh_pho={0}".Params(ma_thanh_pho));
                return Json(data, JsonRequestBehavior.AllowGet);
            }
        }
    }
}