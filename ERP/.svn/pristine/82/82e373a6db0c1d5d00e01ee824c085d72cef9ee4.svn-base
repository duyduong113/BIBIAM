@{
    ViewBag.Title = "ERPAPD | Group Management";
}
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="row-fluid">
                <div class="span12">
                    <input class="span1" type="text" id="filterText" placeholder="@Resources.Multi.Name, @Resources.Multi.Desc…" style="width:250px" />
                    <select name="select" id="listStatus" class='chosen-select span2' data-placeholder="Trạng thái..." multiple onchange="filter()">
                        <option value="true">Active</option>
                        <option value="false">Inactive</option>
                    </select>
                    <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="filter()" style="float:none">@Resources.Multi.Filter</button>
                </div>
            </div>

        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @(Html.Kendo()
.Grid<ERPAPD.Models.Groups>()
.Name("grid")
//.HtmlAttributes(new { @style = "height:500px" })
.Columns(columns =>
{
    columns.Command(command => { command.Custom("Chi tiết").Click("Edit")
        .HtmlAttributes(new { href = "javascript:void(0)", @class = "btn btn-primary btn-small", @style = "margin-left: 5px" }); }).Width(60).Title("Thao tác")
        .HeaderHtmlAttributes(new { style = "color: #428BCA" }); 
    columns.Bound(p => p.Id).Width(80).Filterable(false).Visible(false);
    columns.Bound(p => p.Name).Width(120).Title(Resources.Multi.Name);
    columns.Bound(p => p.Description).Width(250).Title(Resources.Multi.Desc).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
    columns.Bound(p => p.Active).Width(120).Filterable(false).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).Title("Trạng thái").ClientTemplate("#if(Active == true){#Hoạt động#}else{#Ngưng hoạt động#}#");
    columns.Bound(p => p.CreatedAt).Width(100).Format("{0:" + Resources.Multi.DateFormat + " HH:mm}").Title(Resources.Multi.CreatedAt).ClientTemplate("#=ConvertTimeZone(CreatedAt," + Constants.TIME_ZONE + ")#").HtmlAttributes(new { style = "text-align: right" }); ;
    columns.Bound(p => p.CreatedBy).Width(100).Title(Resources.Multi.CreatedBy);
    columns.Bound(p => p.UpdatedAt).Width(100).Format("{0:" + Resources.Multi.DateFormat + " HH:mm}").Title(Resources.Multi.UpdatedAt).ClientTemplate("#if(kendo.toString(UpdatedAt,'dd/MM/yyyy') != '01/01/1900'){#" + "#=ConvertTimeZone(UpdatedAt," + Constants.TIME_ZONE + ")#" + "#}#").HtmlAttributes(new { style = "text-align: right" }); ;
    columns.Bound(p => p.UpdatedBy).Width(100).Title(Resources.Multi.UpdatedBy);
})
.ToolBar(tools =>
{
    tools.Template(@<text>
        <div class="pull-left">
            <a class="btn btn-success btn-small" href="javascript:void(0)" id="btnGridAdd">
                @*<i class="icon-plus"></i>*@ @Resources.Multi.btnAdd
            </a>
            <a class="btn btn-primary btn-small" href="javascript:void(0)" id="btnGridSave">
                @*<i class="icon-plus"></i>*@ @Resources.Multi.btnSave
            </a>
            <a class="btn btn-default btn-small " href="javascript:void(0)" id="btnGridCancel">
                @*<i class="icon-plus"></i>*@ Hủy
            </a>
            <a class="btn btn-info btn-small" @*href="@Url.Content("~/Groups/Excel_Export")"*@ id="btnGridExport">
                @*<i class="fa fa-file-excel-o fa-1"></i>*@ @Resources.Multi.GridExport
            </a>
        </div>
    </text>);

})
                .Editable(editable => editable.Mode(GridEditMode.InCell))
                .Pageable()
                .Sortable()
                .Scrollable()
                //.Groupable()
                        .Navigatable()
                //.Filterable()
                        .Excel(excel => excel
                        .FileName("GroupsList.xlsx")
                        .Filterable(true)
                        .ProxyURL(Url.Action("Excel_Export", "Groups")))
                //.Reorderable(r => r.Columns(true))
                        .Resizable(r => r.Columns(true))
                        .Events(e => { e.DataBound("Databound"); e.Edit("onEdit"); })
                //.ColumnMenu()
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .Batch(true)
                        .PageSize(20)
                                .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                        .Model(model =>
                        {
                            model.Id(p => p.Id);
                            model.Field(p => p.Id).Editable(false);
                            //model.Field(p => p.Name).Editable(false);
                            model.Field(p => p.Active).DefaultValue(true);
                            model.Field(p => p.CreatedAt).Editable(false);
                            model.Field(p => p.CreatedBy).Editable(false);
                            model.Field(p => p.UpdatedAt).Editable(false);
                            model.Field(p => p.UpdatedBy).Editable(false);
                        })
                        .Create(create => create.Action("Create", "Groups"))
                        .Read(read => read.Action("Read", "Groups"))
                        .Update(update => update.Action("Update", "Groups"))
                        .Destroy("Destroy", "Groups"))
        )
    </div>
</div>

<script>
    var detailsTemplate;
    var dataItemGoblal;
    function doSearch() {
        debugger;
        detailsTemplate = kendo.template($("#addsearch").html());
        $.post(r + "/Groups/GetListAssetsSearch/?Id=" + $('#txtSearch').val(), function (data) {
            debugger;
            if (data) {
                debugger;
                dataItemGoblal.listAsset = data;
                bootbox.dialog(detailsTemplate(dataItemGoblal), [{
                    "label": "@Resources.Multi.Close",
                    "size": "large",
                    "class": "btn btn-default btn-small",
                    "i": "icon-undo",
                    "title": "title",
                    "callback": function () {
                    }
                }]
               );
            }
        });
    };
    function changeAsset(seft, AssetID, Group, Func) {
        if (seft.checked) {
            $.post(r + "/Groups/UpdateAssets", { AssetID: AssetID, Group: Group, Func: Func, Checked: true }, function (data) {
                if (data.success) {
                    $.gritter.add({
                        title: '',
                        text: '@Resources.Multi.Save @Resources.Multi.Success.ToLower()',
                        class_name: 'gritter-success'
                    });
                } else {
                    $.gritter.add({
                        title: '',
                        text: data.error,
                        class_name: 'gritter-error'
                    });
                }
            });
        } else {
            $.post(r + "/Groups/UpdateAssets", { AssetID: AssetID, Group: Group, Func: Func, Checked: false }, function (data) {
                if (data.success) {
                    $.gritter.add({
                        title: '',
                        text: '@Resources.Multi.Save @Resources.Multi.Success.ToLower()',
                        class_name: 'gritter-success'
                    });
                } else {
                    $.gritter.add({
                        title: '',
                        text: data.error,
                        class_name: 'gritter-error'
                    });
                }
            });
        }
    }
</script>
<script id="view-template" type="text/kendo-ui-template">
    <tr>
        <td> #: item.Name# Controller</td>
        <td>
            # if (item.View != null && item.View.indexOf(item.Group) > -1) { #
            <input name="form-field-checkbox" type="checkbox" checked onchange="changeAsset(this,'#=item.Id#','#=item.Group#','View')">
            # }else{ #
            <input name="form-field-checkbox" type="checkbox" onchange="changeAsset(this,'#=item.Id#','#=item.Group#','View')">
            #}#
        </td>
        <td>
            # if (item.Create != null && item.Create.indexOf(item.Group) > -1) { #
            <input name="form-field-checkbox" type="checkbox" checked onchange="changeAsset(this,'#=item.Id#','#=item.Group#','Create')">
            # }else{ #
            <input name="form-field-checkbox" type="checkbox" onchange="changeAsset(this,'#=item.Id#','#=item.Group#','Create')">
            #}#
        </td>
        <td>
            # if (item.Update != null && item.Update.indexOf(item.Group) > -1) { #
            <input name="form-field-checkbox" type="checkbox" checked onchange="changeAsset(this,'#=item.Id#','#=item.Group#','Update')">
            # }else{ #
            <input name="form-field-checkbox" type="checkbox" onchange="changeAsset(this,'#=item.Id#','#=item.Group#','Update')">
            #}#
        </td>
        <td>
            # if (item.Delete != null && item.Delete.indexOf(item.Group) > -1) { #
            <input name="form-field-checkbox" type="checkbox" checked onchange="changeAsset(this,'#=item.Id#','#=item.Group#','Delete')">
            # }else{ #
            <input name="form-field-checkbox" type="checkbox" onchange="changeAsset(this,'#=item.Id#','#=item.Group#','Delete')">
            #}#
        </td>
        <td>
            # if (item.Export != null && item.Export.indexOf(item.Group) > -1) { #
            <input name="form-field-checkbox" type="checkbox" checked onchange="changeAsset(this,'#=item.Id#','#=item.Group#','Export')">
            # }else{ #
            <input name="form-field-checkbox" type="checkbox" onchange="changeAsset(this,'#=item.Id#','#=item.Group#','Export')">
            #}#
        </td>
        <td>
            # if (item.Import != null && item.Import.indexOf(item.Group) > -1) { #
            <input name="form-field-checkbox" type="checkbox" checked onchange="changeAsset(this,'#=item.Id#','#=item.Group#','Import')">
            # }else{ #
            <input name="form-field-checkbox" type="checkbox" onchange="changeAsset(this,'#=item.Id#','#=item.Group#','Import')">
            #}#
        </td>
    </tr>
</script>
<script id="create-template" type="text/kendo-ui-template">

</script>
<script id="update-template" type="text/kendo-ui-template">

</script>
<script id="delete-template" type="text/kendo-ui-template">

</script>
<script id="export-template" type="text/kendo-ui-template">

</script>
<script id="import-template" type="text/kendo-ui-template">

</script>
<script type="text/x-kendo-template" id="edit">

    <div>
        <div class="control-group">
            <label class="control-label" style="float:left; ">Tên nhóm quyền: </label>
            <div class="controls" style="padding-left: 95px;">
                <label><b><span id="TenNhom"></span></b></label>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" style="float: left; ">Mô tả nhóm: </label>
            <div class="controls" style="padding-left: 95px;">
                <label><b><span id="MoTaNhom"></span></b></label>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" style="float: left;">Trạng thái</label>
            <div class="controls" style="padding-left: 95px;">
                <label><b><span id="Active"></span></b></label> 
            </div>
        </div>
        @*<div class="control-group">
                <label class="control-label" for="form-field-6">Tìm controller</label>
                <div class="controls">
                    <input name="form-field-checkbox" type="text" id="txtSearch" value="Avoi" style=" width: 535px; height: 20px;" onchange="doSearch()">
                </div>
            </div>*@
    </div>
    @*<div id="addsearch"></div>*@
    <table class="table table-striped table-bordered table-hover" id="table">
        <colgroup>
            <col style="width:180px;" />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
        </colgroup>
        <thead>
            <tr>
                <th>Controller</th>
                <th>View</th>
                <th>Create</th>
                <th>Update</th>
                <th>Delete</th>
                <th>Export</th>
                <th>Import</th>
                <th>All</th>
            </tr>
        </thead>
        <tbody>
            #  for(var i=0;i< listAsset.length;i++){#
            <tr>
                <td> #: listAsset[i].Name#</td>
                <td>
                    # if (listAsset[i].View != null && listAsset[i].View.indexOf(listAsset[i].Group) > -1) { #
                    <input name="form-field-checkbox" class="box_#:listAsset[i].Name#" type="checkbox" checked onchange="changeAsset(this,'#=listAsset[i].Id#','#=listAsset[i].Group#','View')">
                    # }else{ #
                    <input name="form-field-checkbox" class="box_#:listAsset[i].Name#" type="checkbox" onchange="changeAsset(this,'#=listAsset[i].Id#','#=listAsset[i].Group#','View')">
                    #}#
                </td>
                <td>
                    # if (listAsset[i].Create != null && listAsset[i].Create.indexOf(listAsset[i].Group) > -1) { #
                    <input name="form-field-checkbox" class="box_#:listAsset[i].Name#" type="checkbox" checked onchange="changeAsset(this,'#=listAsset[i].Id#','#=listAsset[i].Group#','Create')">
                    # }else{ #
                    <input name="form-field-checkbox" class="box_#:listAsset[i].Name#" type="checkbox" onchange="changeAsset(this,'#=listAsset[i].Id#','#=listAsset[i].Group#','Create')">
                    #}#
                </td>
                <td>
                    # if (listAsset[i].Update != null && listAsset[i].Update.indexOf(listAsset[i].Group) > -1) { #
                    <input name="form-field-checkbox" class="box_#:listAsset[i].Name#" type="checkbox" checked onchange="changeAsset(this,'#=listAsset[i].Id#','#=listAsset[i].Group#','Update')">
                    # }else{ #
                    <input name="form-field-checkbox" class="box_#:listAsset[i].Name#" type="checkbox" onchange="changeAsset(this,'#=listAsset[i].Id#','#=listAsset[i].Group#','Update')">
                    #}#
                </td>
                <td>
                    # if (listAsset[i].Delete != null && listAsset[i].Delete.indexOf(listAsset[i].Group) > -1) { #
                    <input name="form-field-checkbox" class="box_#:listAsset[i].Name#" type="checkbox" checked onchange="changeAsset(this,'#=listAsset[i].Id#','#=listAsset[i].Group#','Delete')">
                    # }else{ #
                    <input name="form-field-checkbox" class="box_#:listAsset[i].Name#" type="checkbox" onchange="changeAsset(this,'#=listAsset[i].Id#','#=listAsset[i].Group#','Delete')">
                    #}#
                </td>
                <td>
                    # if (listAsset[i].Export != null && listAsset[i].Export.indexOf(listAsset[i].Group) > -1) { #
                    <input name="form-field-checkbox" class="box_#:listAsset[i].Name#" type="checkbox" checked onchange="changeAsset(this,'#=listAsset[i].Id#','#=listAsset[i].Group#','Export')">
                    # }else{ #
                    <input name="form-field-checkbox" class="box_#:listAsset[i].Name#" type="checkbox" onchange="changeAsset(this,'#=listAsset[i].Id#','#=listAsset[i].Group#','Export')">
                    #}#
                </td>
                <td>
                    # if (listAsset[i].Import != null && listAsset[i].Import.indexOf(listAsset[i].Group) > -1) { #
                    <input name="form-field-checkbox" class="box_#:listAsset[i].Name#" type="checkbox" checked onchange="changeAsset(this,'#=listAsset[i].Id#','#=listAsset[i].Group#','Import')">
                    # }else{ #
                    <input name="form-field-checkbox" class="box_#:listAsset[i].Name#" type="checkbox" onchange="changeAsset(this,'#=listAsset[i].Id#','#=listAsset[i].Group#','Import')">
                    #}#
                </td>
                <td>
                    <input name="form-field-checkbox" id="checkAll_#:listAsset[i].Name#" type="checkbox" onchange="checkAll('.box_#:listAsset[i].Name#','checkAll_#:listAsset[i].Name#')">
                </td>
            </tr>
            #}#
        </tbody>
    </table>
</script>

<script>
    $('#btnGridAdd').click(function () {
        $("#grid").data("kendoGrid").dataSource.insert();
    });
    $('#btnGridSave').bind('click', function () {
        if ($('#grid').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#grid').data('kendoGrid').saveChanges();
        }
    });
    $('#btnGridCancel').bind('click', function () {
        $('#grid').data('kendoGrid').cancelChanges();
    });
    $('#btnGridExport').bind('click', function () {
        $("#grid").getkendoGrid().saveAsExcel();
    });
    function onEdit(e) {
        if (!e.model.isNew()) {
            $("#Name").attr("disabled", "true");
        }
    }
    $("#listStatus").chosen();
    function Edit(e) {
        detailsTemplate = kendo.template($("#edit").html());
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        dataItemGoblal = dataItem;
        $.post(r + "/Groups/GetListAssets/?Id=" + dataItem.Id, function (data) {
            debugger;
            if (data) {
                dataItem.listAsset = data;
                bootbox.dialog(detailsTemplate(dataItem), [{
                    "label": "@Resources.Multi.Close",
                    "size": "large",
                    "class": "btn-grey btn btn-mini",
                    "title": "title",
                    "callback": function () {
                    }
                }]
               );
                $("#TenNhom").text(dataItem.Name);
                $("#MoTaNhom").text(dataItem.Description);
                dataItem.Active = true ? $("#Active").text("Đang hoạt động") : $("#Active").text("Ngưng hoạt động");
                //$("#Active").prop('checked',dataItem.Active);
                $("#table").kendoGrid({
                    height: 300,
                    sortable: true
                });
            }
        });
    }
    function checkAll(obj, id) {
        var a = $('#' + id).is(':checked');
        debugger;
        if (a) {
            $(obj).prop('checked', true).trigger('change');
        }
    }
    function Databound() {
        resizeGrid();
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 10);
    }
    $('#btnDelete').bind('click', function () {
        var c = confirm("Are you sure you want to delete?");
        if (c) {
            var data = $('#Grid').attr('data-kendoGrid-selected');
            if (data != "" && data != null) {
                $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
                $.post(r + "/RequestExpense/Delete", { data: data }, function (data) {
                    if (data.success) {
                        $('#Grid').attr('data-kendoGrid-selected', '');
                        $("#Grid").data("kendoGrid").dataSource.read();
                        $.gritter.add({
                            // (string | mandatory) the heading of the notification
                            title: '',
                            // (string | mandatory) the text inside the notification
                            text: '@Resources.Multi.Delete successfull',
                            class_name: 'gritter-success'
                        });
                    } else {
                        $.gritter.add({
                            // (string | mandatory) the heading of the notification
                            title: '',
                            // (string | mandatory) the text inside the notification
                            text: data.error,
                            class_name: 'gritter-error'
                        });
                    }
                });
            } else {
                $.gritter.add({
                    // (string | mandatory) the heading of the notification
                    title: '',
                    // (string | mandatory) the text inside the notification
                    text: 'Please choosen contract',
                    class_name: 'gritter-error'
                });
            }
        } else {
            return false;
        }
    });
    function error_handler(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
        }
    }

    function onRequestEnd(e) {
        if (e.type == "update" || e.type == "create" || e.type == "delete") {
            if (e.response.Errors == null) {
                if (e.response.Errors == null) {
                    $.gritter.add({
                        title: '',
                        text: '@Resources.Multi.Save @Resources.Multi.Success.ToLower()',
                        class_name: 'gritter-success'
                    });
                }
            }
        }
    }
    $(window).resize(function () {
        resizeGrid();
    });
    function filter() {

        grid = $("#grid").data("kendoGrid");
        var listStatus = $("#listStatus option:selected");
        var text = $('#filterText').val();
        var filter = { logic: "and", filters: [] };
        var fillterStatus = { logic: "or", filters: [] };
        var filtertext = { logic: "or", filters: [] };
        if (listStatus.length > 0) {
            for (var i = 0; i < listStatus.length; i++) {
                var option = listStatus[i].value;
                if (option == '') {
                    fillterStatus.filters.push({ field: "Active", operator: "contains", value: '' });
                }
                else {
                    fillterStatus.filters.push({ field: "Active", operator: "eq", value: option });
                }
            }
            filter.filters.push(fillterStatus);
        }
        if (text) {
            filtertext.filters.push({ field: "Name", operator: "contains", value: text });
            filtertext.filters.push({ field: "Description", operator: "contains", value: text });
            filter.filters.push(filtertext);
        }

        grid.dataSource.filter(filter);
    }
    $("#filterText").keypress(function (e) {
        if (e.keyCode == 13) {
            filter();
        }
    });
</script>
