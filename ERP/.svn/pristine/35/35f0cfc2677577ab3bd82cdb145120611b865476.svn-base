@{
    ViewBag.Title = "Quản lý loại công nợ";
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
}
<style>
    #GridCustomer .k-grid-content {
        height: 300px !important;
    }

    #GridQuestion .k-grid-content {
        height: 300px !important;
    }

    #GridActionUser .k-grid-content {
        height: 300px !important;
    }
</style>
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div id="newlistICareID" style="display: inline-block;" class="newlistOrg">
                <input type="text" id="txtName" name="txtName" placeholder="@Resources.Multi.Filter @Resources.Multi.Follow.ToLower() @Resources.Multi.Title.ToLower(), @Resources.Multi.Desc.ToLower()..." style="width: 350px;" />
                @*<select name="select" id="slStatus" class='chosen-select span2' style="width:250px;" multiple data-placeholder="@Resources.Multi.Select @Resources.Multi.Status.ToLower()...">
                    <option value="Mới">@Resources.Multi.New</option>
                    <option value="Đang thực hiện">@Resources.Multi.InProcess</option>
                    <option value="Kết thúc">@Resources.Multi.End</option>
                </select>*@
            </div>
            <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="filter()" style="float:none">@Resources.Multi.Filter</button>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @* </ Hiện thị thông tin> *@
        @(Html.Kendo()
                            .Grid<ERPAPD.Models.CRM_Debit_Management>()
                    .Name("Grid")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.Id).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=Id#'  />").Width(35).Filterable(false).Sortable(false);
                        columns.Bound(p => p.Title).Title(Resources.Multi.Title).Width(200).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.Bound(p => p.From).Format("{0:N0}").Width(100).Title("Từ").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.Bound(p => p.To).Format("{0:N0}").Width(100).Title("Đến").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.Bound(p => p.Status).Title(Resources.Multi.Status).Width(100);
                        columns.Bound(p => p.CreatedBy).Width(100).Title(Resources.Multi.CreatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
                        columns.Bound(p => p.CreatedAt).Width(100).Format("{0:" + Resources.Multi.DateFormat + "}").Title(Resources.Multi.CreatedAt).ClientTemplate("#if(kendo.toString(CreatedAt,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(CreatedAt,'" + Resources.Multi.DateFormat + "') #" + "#}#");
                        columns.Bound(p => p.UpdatedBy).Width(100).Title(Resources.Multi.UpdatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
                        columns.Bound(p => p.UpdatedAt).Format("{0:" + Resources.Multi.DateFormat + "}").Width(100).Title(Resources.Multi.UpdatedAt).ClientTemplate("#if(kendo.toString(UpdatedAt,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(UpdatedAt,'" + Resources.Multi.DateFormat + "') #" + "#}#").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
                    })
                    .ToolBar(toolbar =>
                    {
                        toolbar.Template(@<text>
                            <div class="pull-left">
                                @if (AllowCreate)
                                {
                                    <a class="btn btn-success btn-small" href="javascript:void(0)" id="btnGridAdd">
                                        @*<i class="icon-plus"></i>*@ @Resources.Multi.Add
                                    </a>
                                }
                                @if (AllowUpdate)
                                {
                                    <a class="btn btn-primary btn-small" href="javascript:void(0)" id="btnGridSave">
                                        @*<i class="icon-ok"></i>*@ @Resources.Multi.GridSave
                                    </a>
                                    <a class="btn btn-default btn-small" href="javascript:void(0)" id="btnGridCancel">
                                        @*<i class="icon-remove"></i>*@ @Resources.Multi.GridCancel
                                    </a>
                                }
                                @if (AllowDelete)
                                {
                                    <a class="btn btn-small btn-danger" href="javascript:void(0)" id="btnGridDelete" onclick="showConfirmPopup(1)">
                                        @*<i class=" icon-trash">   </i>*@@Resources.Multi.GridDelete
                                    </a>
                                }
                            </div>
                        </text>);
                 
})
                            .Events(events => { events.DataBound("onDatabound"); })
                            .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
                            .Navigatable()
                            .Editable(editable => editable.Mode(GridEditMode.InCell))
                            .Scrollable(scrollable => scrollable.Virtual(false))
                            // .Sortable()
                            .Resizable(resize => resize.Columns(true))
                            .DataSource(dataSource => dataSource
                            .Ajax()
                            .Batch(true)
                            .PageSize(50)
                            .Model(model =>
                            {
                                model.Id(p => p.Id);
                                model.Field(p => p.Id).Editable(false);
                                //
                                model.Field(p => p.Title).Editable(true);
                                model.Field(p => p.From).Editable(true);
                                model.Field(p => p.To).Editable(true);
                                model.Field(p => p.Status).Editable(true);
                                //
                                model.Field(p => p.CreatedAt).Editable(false);
                                model.Field(p => p.CreatedBy).Editable(false);
                                model.Field(p => p.CreatedBy).DefaultValue(User.Identity.Name);
                                model.Field(p => p.Status).DefaultValue(true);
                                model.Field(p => p.UpdatedAt).Editable(false);
                                model.Field(p => p.UpdatedAt).DefaultValue(DateTime.Parse("1900-01-01"));
                                model.Field(p => p.UpdatedBy).Editable(false);
                                model.Field(p => p.UpdatedBy).DefaultValue("");
                              
                                
                            })
                                .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                                .Read("Read", "CRM_Debit_Management")
                                .Create("Create", "CRM_Debit_Management")
                                .Update("Update", "CRM_Debit_Management")
                                                    )
                //.ClientDetailTemplateId("SurveyCategorDetails")
        )
    </div>
</div>

@Html.Partial("_popup")
<script>
    $('#btnGridAdd').click(function () {
        $("#Grid").data("kendoGrid").dataSource.insert();
    })

    $('#btnGridSave').bind('click', function () {
        if ($('#Grid').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#Grid').data('kendoGrid').saveChanges();
        }
    })
    $('#btnGridCancel').bind('click', function () {
        $('#Grid').data('kendoGrid').cancelChanges();
    })

    function onDatabound(e) {
        resizegrid();
        var grid = $("#Grid").data("kendoGrid");
        // ask the parameterMap to create the request object for you
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
        .options.parameterMap({
            page: grid.dataSource.page(),
            sort: grid.dataSource.sort(),
            filter: grid.dataSource.filter()
        });
        var $exportLink = grid.element.find('.export');

        var href = $exportLink.attr('href');
        if (href) {
            href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
            href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));
            $exportLink.attr('href', href);
        }
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
        }
    }
    function onRequestEnd(e) {
        if (e.type == "update" || e.type == "create" || e.type == "delete") {
            if (e.response.Errors == null) {
                if (e.response.Errors == null) {
                    $.gritter.add({
                        title: '',
                        text: '@Resources.Multi.Save @Resources.Multi.Success.ToLower()',
                        class_name: 'gritter-success'
                    });
                }
            }
        }
    }
    function resizegrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 1);
    }
    $("#txtName").keypress(function (e) {
        if (e.keyCode == 13) {
            filter();
        }
    });

    function filter() {
        grid = $("#Grid").data("kendoGrid");
        var Name = $('#txtName').val();
        var filter = { logic: "and", filters: [] };
        var filtertext = { logic: "or", filters: [] };
        if (Name) {
            filtertext.filters.push({ field: "Title", operator: "contains", value: Name });
            filtertext.filters.push({ field: "From", operator: "contains", value: Name });
            filtertext.filters.push({ field: "To", operator: "contains", value: Name });
            filter.filters.push(filtertext);
        }
        grid.dataSource.filter(filter);
    }

</script>