using MCC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using ServiceStack.OrmLite;
using ServiceStack.OrmLite.SqlServer;
using Kendo.Mvc.UI;
using System.Data;
using MCC.Helpers;
using System.IO;
using OfficeOpenXml;
using CloudinaryDotNet;
using System.Configuration;
using Hangfire;
using MCC.Filters;
using BIBIAM.Core;

namespace MCC.Controllers
{
    [Authorize]
    [CustomActionFilter(permission = "all,view,update,create,delete")]
    public class ArticleController : CustomController
    {
        //private readonly bool overwrite;
        //
        // GET: /Article/Article

        public ActionResult Index()
        {
            if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["view"]))
            {
                ViewBag.isAdmin = isAdmin;
                ViewBag.ma_gian_hang = currentUser.ma_gian_hang;
                return View();
            }
            return RedirectToAction("NoAccess", "Error");
        }

        public ActionResult Read([DataSourceRequest]DataSourceRequest request)
        {
            using (IDbConnection dbConn = Helpers.OrmliteConnection.openConn())
            {
                var data = new DataSourceResult();
                if (isAdmin == true)
                {
                    data = KendoApplyFilter.KendoData<Article>(request);
                }
                else
                {
                    data = KendoApplyFilter.KendoData<Article>(request, " ma_gian_hang={0} ".Params(currentUser.ma_gian_hang));
                }
                return Json(data);
            }
        }
        [HttpPost]
        [ValidateInput(false)]
        public ActionResult CreateUpdate(Article data, HttpPostedFileBase file)
        {
            try
            {
                using (var dbConn = Helpers.OrmliteConnection.openConn())
                {
                    if (data.id == 0 && file == null)
                    {
                        return Json(new { success = false, error = "Vui lòng chọn ảnh!" });
                    }
                    if (data.id > 0)
                    {
                        if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["update"]))
                        {
                            if (data.isDefault)
                            {
                                var existL = dbConn.Select<Article>("id<>{0}", data.id);
                                existL.ForEach(s => { s.isDefault = false; });
                                dbConn.UpdateAll(existL);
                            }
                            var exist = dbConn.SingleOrDefault<Article>("id={0}", data.id);
                            data.allUser = isAdmin ? data.allUser : false;
                            data.imagesPublicId = exist.imagesPublicId;
                            data.imagesSize = exist.imagesSize;
                            data.updatedAt = DateTime.Now;
                            data.updatedBy = currentUser.name;
                            data.ma_gian_hang = exist.ma_gian_hang;
                            if (file != null)
                            {
                                string LocalPath = "";
                                data.imagesPublicId = new AzureHelper().UploadImageToAzure(AllConstant.FoldderName_Merchant_Product, file, currentUser.name, ref LocalPath);
                            }
                            dbConn.UpdateOnly(data,
                                    onlyFields: p =>
                                        new
                                        {
                                            p.isDefault,
                                            p.allUser,
                                            p.ma_gian_hang,
                                            p.type,
                                            p.name,
                                            p.description,
                                            p.content,
                                            p.active,
                                            p.imagesSize,
                                            p.imagesPublicId,
                                            p.updatedAt,
                                            p.updatedBy
                                        },
                                where: p => p.id == data.id);
                        }
                        else
                        {
                            return Json(new { success = false, error = "Don't have permission to update" });
                        }
                    }
                    else
                    {
                        if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["create"]))
                        {
                            if (data.isDefault)
                            {
                                var existL = dbConn.Select<Article>("ma_gian_hang={0}", currentUser.ma_gian_hang);
                                existL.ForEach(s => { s.isDefault = false; });
                                dbConn.UpdateAll(existL);
                            }
                            if (file != null)
                            {
                                /* 
                                 xử lý

                                */
                                // kết quả
                                string LocalPath = "";
                                data.imagesPublicId = new AzureHelper().UploadImageToAzure(AllConstant.FoldderName_Merchant_Article, file, currentUser.name, ref LocalPath);
                            }
                            data.ma_gian_hang = currentUser.ma_gian_hang;
                            data.allUser = isAdmin ? data.allUser : false;
                            data.updatedAt = DateTime.Parse("01/01/1900");
                            data.createdAt = DateTime.Now;
                            data.createdBy = currentUser.name;
                            dbConn.Insert(data);
                            int Id = (int)dbConn.GetLastInsertId();
                            data.id = Id;
                        }
                        else
                        {
                            return Json(new { success = false, error = "Don't have permission to create" });
                        }
                    }
                }
                return Json(new { success = true, data = data });
            }
            catch (Exception e)
            {
                return Json(new { success = false, error = e.Message });
            }
        }

        public ActionResult Delete(string data)
        {
            if (isAdmin && accessDetail != null && (accessDetail.access["all"] || accessDetail.access["delete"]))
            {
                try
                {
                    using (var dbConn = Helpers.OrmliteConnection.openConn())
                    {
                        string[] separators = { "," };
                        string[] ids = data.Split(separators, StringSplitOptions.RemoveEmptyEntries);
                        if (ids.Length == 0)
                        {
                            return Json(new { success = false, message = "Chọn các Bài viết cần xóa!" });
                        }
                        foreach(var id in ids)
                        {
                            dbConn.Delete<Article>("id={0} and ma_gian_hang={1}".Params(id, currentUser.ma_gian_hang));
                        }
                        return Json(new { success = true, message = "Thành công!" });
                    }
                }
                catch (Exception e)
                {
                    return Json(new { success = false, error = e.Message });
                }
            }
            return RedirectToAction("NoAccess", "Error");
        }



        public ActionResult Active(string data)
        {
            if (accessDetail != null && (accessDetail.access["all"] || accessDetail.access["update"]))
            {
                try
                {
                    string[] separators = { "," };
                    string[] ids = data.Split(separators, StringSplitOptions.RemoveEmptyEntries);
                    if (ids.Length == 0)
                    {
                        return Json(new { success = false, message = "Chọn các Bài viết cần kích hoạt!" });
                    }

                    using (var dbConn = MCC.Helpers.OrmliteConnection.openConn(AppConfigs.MCCConnectionString))
                    {
                        foreach (var id in ids)
                        {
                            var exists = dbConn.FirstOrDefault<Article>("id={0}".Params(id));
                            dbConn.UpdateOnly(new Article { active = exists.active == true ? false : true, updatedBy = currentUser.name, updatedAt = DateTime.Now }, onlyFields: p => new { p.active, p.updatedBy, p.updatedAt }, where: p => p.id == int.Parse(id));
                        }
                    }
                    return Json(new { success = true, message = "Thành công!" });
                }
                catch (Exception e)
                {
                    return Json(new { success = false, error = e.Message });
                }
            }
            else
            {
                return Json(new { success = false, error = "Bạn không có quyền thực hiên chức năng này!" });
            }
        }

    }
}