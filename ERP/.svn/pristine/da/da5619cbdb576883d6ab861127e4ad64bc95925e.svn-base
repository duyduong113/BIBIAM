@{
    ViewBag.Title = "Danh sách khuyến mãi";
}
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="widget-header widget-header-blue widget-header-flat">
                <p style="font-size:14px">Lọc dữ liệu theo điều kiện</p>

                <span class="widget-toolbar">
                    <a href="#" data-action="collapse">
                        <i class="icon-chevron-up"></i>
                    </a>
                </span>
            </div>
            <div class="widget-body">
                <div class="widget-main">
                    <div class="row-fluid">
                        <div class="span12">
                            <input class="span1" type="text" id="filterText" placeholder="Tìm theo mã…" style="width:310px" />
                            <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="filter()" style="float:none">Lọc dữ liệu</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @(Html.Kendo()
            .Grid<DecaPay.Models.Sales_Promotion_Header>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.PromotionCode).Width(100).Title("Mã CTKM");
        columns.Bound(p => p.PromotionName).Width(100).Title("Tên CTKM");
        columns.Bound(p => p.FromDate).Title("Từ ngày").Width(120).Format("{0:dd/MM/yyyy HH:mm:ss}");
        columns.Bound(p => p.ToDate).Title("Đến ngày").Width(120).Format("{0:dd/MM/yyyy HH:mm:ss}");
        columns.Bound(p => p.Active).Width(120).Title("Áp dụng");
        columns.Bound(p => p.CreatedAt).Title("Tạo lúc").Width(120).Format("{0:dd/MM/yyyy HH:mm:ss}");
        columns.Bound(p => p.CreatedBy).Title("Tạo bởi").Width(100);
        columns.Bound(p => p.UpdatedAt).Title("Cập nhật lúc").Width(120).Format("{0:dd/MM/yyyy HH:mm:ss}");
        columns.Bound(p => p.UpdatedBy).Title("Cập nhật bởi").Width(100);
    })
    .Pageable(pager => pager.PageSizes(new[] { 20, 50, 100 }))
    .Sortable()
    .Scrollable()
    .Events(events => { events.DataBound("dataBound"); })
            .ToolBar(toolbar =>
            {
                toolbar.Custom()
                .Text("Tạo khuyến mãi")
               .HtmlAttributes(new { @class = "btn btn-primary", @Href = "javascript:CreateOrder()" });
                toolbar.Excel().Text("Xuất ra Excel").HtmlAttributes(new { @style = "margin-left:10px" });
            })
    .Excel(excel => excel
            .FileName("PromotionList.xlsx")
            .AllPages(true)
            .Filterable(true)
            .ProxyURL(Url.Action("Excel_Export", "SalesPromotion")))
    .Navigatable()
    .Filterable()
    .Reorderable(r => r.Columns(true))
    .Resizable(r => r.Columns(true))
    .ColumnMenu()
    .Pageable(a => a.PageSizes(new int[] { 20, 50, 100 }))
    .DataSource(dataSource => dataSource

    .Ajax()
    .Batch(true)
    .Sort(a => a.Add(b => b.CreatedAt).Descending())
    .PageSize(20)
        .Read(read => read.Action("Read", "SalesPromotion")))
        .ClientDetailTemplateId("promotionDetail")
        )
    </div>
</div>

<script id="promotionDetail" type="text/kendo-tmpl">
    <div class="row-fluid">
        <div style="width:1200px">
            @(Html.Kendo()
                .TabStrip()
                .Name("tabStrip_#=Id#")
                .SelectedIndex(0)
                .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
                .Items(items =>
                {
                    items.Add().Text("Sản phẩm").Content(@<text>
                        @(Html.Kendo()
                            .Grid<DecaPay.Models.Sales_Promotion_Detail>()
                            .Name("grid2_#=Id#")
                            .Columns(columns =>
                            {
                                columns.Bound(o => o.MSIN).ClientTemplate("\\#=MSIN\\#-\\#=SKU\\#").Title("Mã sản phẩm").Width(100);
                                columns.Bound(o => o.ItemName).Title("Tên sản phẩm").Width(260);
                                columns.Bound(o => o.Quantity).Title("Số lượng").Width(60);
                                columns.Bound(p => p.CreatedAt).Title("Tạo lúc").Width(120).Format("{0:dd/MM/yyyy HH:mm:ss}");
                                columns.Bound(p => p.CreatedBy).Title("Tạo bởi").Width(100);
                            })
                            .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(6)
                            .Read(read => read.Action("Detail_Read", "SalesPromotion", new { Id = "#=Id#" }))
                            )
                            .Pageable(pager => pager
                            .PageSizes(new[] { 6, 10, 20, 100, 200, 300 }))
                            .Resizable(resize => resize.Columns(true))
                            .Sortable()
                            .ToClientTemplate())
                    </text>);
                }).ToClientTemplate())
        </div>
    </div>
</script>


<script>
    //function convertDateToUTC(date) { return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds()); }
    //function test(data) {
    //    console.log(data);
    //    //utc
    //    console.log(data.toUTCString());
    //    console.log(new Date(data.toUTCString()).getTime());

    //    //
    //    //offset
    //    var offset = data.getTimezoneOffset() * 60 * 1000;
    //    console.log(offset);
    //    console.log(new Date(new Date(convertDateToUTC(data)).getTime() - offset));
    //    //moment
    //    console.log(moment(new Date(new Date(convertDateToUTC(data)).getTime() - offset)).format('MM/DD/YYYY h:mm:ss'));
    //    return moment(new Date(new Date(convertDateToUTC(data)).getTime() - offset)).format('MM/DD/YYYY h:mm:ss');
    //}

    $("#filterText").keypress(function (e) {
        if (e.keyCode == 13) {
            filter();
        }
    });


    function filter() {

        grid = $("#grid").data("kendoGrid");
        var text = $('#filterText').val();
        var filter = { logic: "and", filters: [] };

        var filtertext = { logic: "or", filters: [] };

        if (text) {
            filtertext.filters.push({ field: "PromotionCode", operator: "contains", value: text });
            filtertext.filters.push({ field: "PromotionName", operator: "contains", value: text });
            filter.filters.push(filtertext);
        }

        grid.dataSource.filter(filter);
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                    $("#grid").data("kendoGrid").dataSource.read();
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
    function onRequestEnd(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Update successfully',
                class_name: 'gritter-success'
            });
            $("#grid").data("kendoGrid").dataSource.read();
        }
    }
    function resizeGrid() {
        //Company Type
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 30);
    }

    function dataBound(e) {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
        resizeGrid();
        var grid = this;
    }
</script>
