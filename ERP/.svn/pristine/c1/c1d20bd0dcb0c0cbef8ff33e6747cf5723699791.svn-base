@model List<BIBIAM.Core.Entities.Property>
@{
    ViewBag.Title = "Quản lý thông số thuộc tính";
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
}
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="row-fluid">
                <div id="newlistICareID" style="display: inline-block;">
                    <input type="text" id="txtTen" name="txtTen" placeholder="Tên mô thông số..." style="width: 335px;" />
                </div>
                <select name="select" id="listType" class='chosen-select' data-placeholder="Trạng thái" multiple onchange="filter()">
                    @foreach (var item in ViewBag.listType)
                    {
                        <option value="@item.ParamID">@item.Value</option>
                    }
                </select>
                <select name="select" id="listStatus" class='chosen-select' data-placeholder="Trạng thái" multiple onchange="filter()">
                    <option value="true">Hoạt đông</option>
                    <option value="false">Ngưng hoạt động</option>
                </select>
                <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="filter()" style="float:none">@Resources.Multi.Filter</button>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @* </ Hiện thị thông tin> *@
        @(Html.Kendo()
        .Grid(Model)
        .Name("Grid")
        .HtmlAttributes(new { style = "height: auto;" })
        .Columns(columns =>
        {
            columns.Bound(p => p.ma_thong_so).HeaderTemplate("<input  type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />")
                .ClientTemplate("<input class='checkrowid' type='checkbox' id='#=ma_thong_so#'  />").HtmlAttributes(new { style = "text-align: center;" })
                .HeaderHtmlAttributes(new { style = "text-align: center" }).Width(30).Filterable(false).Sortable(false);
            columns.Bound(p => p.ma_thong_so).Width(80).Title("Mã thông số");
            columns.Bound(p => p.ten_thong_so).Width(250).Title("Tên thông số").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
            columns.ForeignKey(p => p.loai, (System.Collections.IEnumerable)ViewBag.listType, "ParamID", "Value")
                .EditorTemplateName("GridNullableForeignKey").Title("Loại thông số").Width(150).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
            columns.Bound(p => p.trang_thai).Width(120).Title(@Resources.Multi.Status).ClientTemplate("#if(trang_thai == true){#Hoạt động#}else{#Ngưng hoạt động#}#").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
            columns.Bound(p => p.nguoi_tao).Width(90).Title(Resources.Multi.CreatedBy);
            columns.Bound(p => p.ngay_tao).Width(110).Format("{0:" + Resources.Multi.DateFormat + "}").Title(Resources.Multi.CreatedAt).ClientTemplate("#=ConvertTimeZone(ngay_tao," + Constants.TIME_ZONE + ")#").HtmlAttributes(new { style = "text-align: right;" });
            columns.Bound(p => p.nguoi_cap_nhat).Width(90).Title(Resources.Multi.UpdatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
            columns.Bound(p => p.ngay_cap_nhat).Format("{0:" + Resources.Multi.DateFormat + "}").Width(110).Title(Resources.Multi.UpdatedAt).ClientTemplate("#if(kendo.toString(ngay_cap_nhat,'dd/MM/yyyy') != '01/01/1900'){#" + "#=ConvertTimeZone(ngay_cap_nhat," + Constants.TIME_ZONE + ")#" + "#}#").HtmlAttributes(new { style = "text-align: right;" });

        })
        .ToolBar(toolbar =>
        {
        toolbar.Template(@<text>
                <div class="pull-left">
                    @if (AllowCreate)
                    {
                        <a class="btn btn-success btn-small" href="javascript:void(0)" id="btnGridAdd">
                            @*<i class="icon-plus"></i>*@ @Resources.Multi.Add
                        </a>
                    }
                    @if (AllowUpdate)
                    {
                        <a class="btn btn-primary btn-small" href="javascript:void(0)" id="btnGridSave">
                            @*<i class="icon-ok"></i>*@ @Resources.Multi.GridSave
                        </a>
                        <a class="btn btn-default btn-small" href="javascript:void(0)" id="btnGridCancel">
                            @*<i class="icon-remove"></i>*@ @Resources.Multi.GridCancel
                        </a>
                    }
                    <div class="btn-group" style="margin-left: 20px">
                        <button data-toggle="dropdown" class="btn btn-small btn-inverse dropdown-toggle">
                            Thao tác khác
                            <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu" style="min-width:110px !important">
                            <li>
                                @if (AllowDelete)
                                {
                                    <a class="btn btn-small btn-danger" href="javascript:void(0)" id="btnGridDelete" onclick="showConfirmPopup(1)">
                                        @*<i class=" icon-trash">  </i>*@@Resources.Multi.GridDelete
                                    </a>
                                }
                            </li>
                        </ul>
                    </div>
                </div>
            </text>);
        })
        .Events(events => { events.DataBound("dataBound"); })
        .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
        .Navigatable()
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Scrollable(scrollable => scrollable.Virtual(false))
        .Sortable()
        .Resizable(resize => resize.Columns(true))
        .DataSource( dataSource => dataSource
                .Ajax()
                .Batch(true)
                .PageSize(50)
                .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                .Model(model =>
                {
                    model.Id(p => p.ma_thong_so);
                    model.Field(p => p.ma_thong_so).Editable(false); 
                    model.Field(p => p.ngay_cap_nhat).Editable(false);
                    model.Field(p => p.ngay_tao).Editable(false);
                    model.Field(p => p.nguoi_tao).Editable(false);
                    model.Field(p => p.nguoi_cap_nhat).Editable(false);
                    model.Field(p => p.trang_thai).DefaultValue(true);
                })
                .Create(update => update.Action("Create", "Property"))
                .Read(read => read.Action("Read", "Property"))
                .Update(update => update.Action("Update", "Property"))
                )
        )
    </div>
</div>
@Html.Partial("_popup")
<script>
    $("#listStatus,#listType").chosen();
    function filter() {
        grid = $("#Grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };
        var fillterStatus = { logic: "or", filters: [] };

        var teamname = $("#txtTen").val();
        if (teamname) {
            filter.filters.push({ field: "ten_thong_so", operator: "contains", value: teamname });
        }
        var listStatus = $("#listStatus option:selected");
        if (listStatus.length > 0) {
            for (var i = 0; i < listStatus.length; i++) {
                var status = listStatus[i].value;
                if (status == '') {
                    fillterStatus.filters.push({ field: "trang_thai", operator: "contains", value: '' });
                }
                else {
                    fillterStatus.filters.push({ field: "trang_thai", operator: "eq", value: status });
                }
            }
            filter.filters.push(fillterStatus);
        }
        grid.dataSource.filter(filter);
    }

    $('#txtTen').bind('keypress', function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            filter();
        }
    });

    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }

    $(window).resize(function () {
        resizeGrid();
    });

    function dataBound(e) {
        resizeGrid();
        var grid = this;
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
       .options.parameterMap({
           page: grid.dataSource.page(),
           sort: grid.dataSource.sort(),
           filter: grid.dataSource.filter()
       });     
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                    $("#Grid").data("kendoGrid").dataSource.read();
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        } else {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
        }
    }

    function onRequestEnd(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Update @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
    }

    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid");
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 10);
    }
    $('.icon-chevron-up').bind('click', function () {
        setInterval(function () {
            resizeGrid();
        }, 500)
    });

    $('#btnGridAdd').click(function () {
        $("#Grid").data("kendoGrid").dataSource.insert();
    })

    $('#btnGridSave').bind('click', function () {
        if ($('#Grid').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#Grid').data('kendoGrid').saveChanges();
        }
    })

    $('#btnGridCancel').bind('click', function () {
        $('#Grid').data('kendoGrid').cancelChanges();
    })
</script>

