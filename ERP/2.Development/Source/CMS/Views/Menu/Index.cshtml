@{
    ViewBag.Title = Html.Raw(Resources.Global._hierarchy_menu);
    bool all = ViewBag.accessDetail != null ? ViewBag.accessDetail.access["all"] : false;
    bool view = ViewBag.accessDetail != null ? ViewBag.accessDetail.access["view"] : false;
    bool update = ViewBag.accessDetail != null ? ViewBag.accessDetail.access["update"] : false;
    bool create = ViewBag.accessDetail != null ? ViewBag.accessDetail.access["create"] : false;
    bool delete = ViewBag.accessDetail != null ? ViewBag.accessDetail.access["delete"] : false;
    bool isAdmin = ViewBag.isAdmin != null ? ViewBag.isAdmin : false;
}
<style>
    .k-alt .editable {
        background-color: #C8E6C9;
    }

    .editable {
        background-color: #E8F5E9;
    }
</style>
<div>
    <form method="post" id="FilterForm" novalidate="novalidate" style="padding-top:10px">
        <div class="row">
            <div class="col-md-3">
                <div class="form-group">
                    <input type="text" class="form-control input-sm max100" id="txtHierarchy" name="filterText">
                </div>
            </div>
            <div class="col-md-2">
                <button type="button" class="btn btn-primary btn-sm btn-circle" onclick='filter()'>@Html.Raw(Resources.Global._vin_search)</button>
            </div>
        </div>
    </form>
</div>
<div class="row-fluid">
    @(Html.Kendo().Grid<CMS.Models.cms_Menu>()
                    .Name("Grid")
                    .Columns(columns =>
                    {
                        columns.Template(@<text></text>)
                        .HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />")
                        .ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=id#'/> ")
                        .HtmlAttributes(new { style = "text-align: center;" })
                        .HeaderHtmlAttributes(new { style = "text-align: center" })
                        .Width(25);
                        columns.ForeignKey(p => p.ma_website, (System.Collections.IEnumerable)ViewBag.listWebsite, "Value", "Text").Title(Resources.Global._website_id).Width(120).EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { @class = "editable" });
                        columns.Bound(p => p.ma_menu).Title(Resources.Global._menu_id).Width(120);
                        columns.Bound(p => p.ten_menu).Title(Resources.Global._menu_name).Width(100).HtmlAttributes(new { @class = "editable" });
                        columns.Bound(p => p.cap_menu).Title(Resources.Global._level).Format("{0:N0}").Width(100).HtmlAttributes(new { @class = "editable" }).EditorTemplateName("IntegerMenu");
                        columns.ForeignKey(p => p.ma_menu_cha, (System.Collections.IEnumerable)ViewBag.listAll, "Value", "Text").Title(Resources.Global._id_menu_parent).Width(120).EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { @class = "editable" });
                        columns.ForeignKey(p => p.loai_menu, (System.Collections.IEnumerable)ViewBag.listHierarchyType, "Value", "Text").Title(Resources.Global._type).Width(120).EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { @class = "editable" });
                        columns.ForeignKey(p => p.trang_thai, (System.Collections.IEnumerable)ViewBag.listStatus, "Value", "Text").Title(Resources.Global._status).Width(140).EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { @class = "editable" });
                        columns.Bound(p => p.ngay_tao).Width(110).Title(Resources.Global._date_created).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
                        columns.Bound(p => p.nguoi_tao).Width(100).Title(Resources.Global._created_by);
                        columns.Bound(p => p.ngay_cap_nhat).Title(Resources.Global._date_update).Width(110).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
                        columns.Bound(p => p.nguoi_cap_nhat).Title(Resources.Global._updated_by).Width(100);
                    })
                    .Pageable(pager => pager.PageSizes(new[] { 100, 200, 300, 500 }))
                    .Scrollable()

                    .ToolBar(toolbar =>
                    {
                    toolbar.Template(@<text>
                    <div class="pull-left">
                        @if (create || all)
                        {
                            <a class="btn btn-success btn-small" onclick="Create()" href="javascript:void(0)" id="">
                                @Html.Raw(Resources.Global._add)
                            </a>
                        }
                        @if (all || create || update)
                        {
                            <a class="btn btn-primary btn-small" href="javascript:void(0)" id="btnGridSave" onclick="Update()">
                                @Html.Raw(Resources.Global._save)
                            </a>
                        }
                        @if (all || create || update)
                        {
                            <a class="btn btn-default btn-small " href="javascript:void(0)" id="btnGridCancel" onclick="Cancel()">
                                @Html.Raw(Resources.Global._cancel)
                            </a>
                        }
                        @if (delete || all)
                        {
                            <a class="btn btn-danger btn-small" href="javascript:void(0)" onclick="showConfirmPopup(1)" id="btnGridDelete">
                                @Html.Raw(Resources.Global._delete)
                            </a>
                        }
                    </div>
                    </text>);
                    })
                    .Editable(editable => editable.Mode(GridEditMode.InCell))
                    .Pageable(x => x.PageSizes(new int[] { 20, 100, 200, 300, 500 }))
                    .Events(events =>
                    {
                        events.DataBound("dataBound"); events.Edit("onEdit");
                    })
                    .Sortable()
                    .Reorderable(reorderable => reorderable.Columns(true))
                    .Resizable(resizable => resizable.Columns(true))
                    .DataSource(dataSource => dataSource
                    .Ajax()
                    .Batch(true)
                    .PageSize(20)
                    .Events(events =>
                    {
                        events.Error("error_handler"); events.RequestEnd("onRequestEnd");
                    })
                    .Model(model =>
                    {
                        model.Id(p => p.id);
                        model.Field(p => p.ma_menu).Editable(false);
                        model.Field(p => p.ma_menu_cha).Editable(true);
                        model.Field(p => p.ten_menu).Editable(true);
                        model.Field(p => p.trang_thai).Editable(true);
                        model.Field(p => p.cap_menu).Editable(true);
                    })
                        .Read(c => c.Action("Read", "Menu"))
                        .Create(c => c.Action("Create", "Menu"))
                        .Update(c => c.Action("Update", "Menu"))
                    ))
</div>
@Html.Partial("_popup")
<script>
    function Create() {
        $("#Grid").data("kendoGrid").dataSource.insert();
    }
    function Update() {
        if ($('#Grid').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#Grid').data('kendoGrid').saveChanges();
        }
    }
    function Cancel() {
        $('#Grid').data('kendoGrid').cancelChanges();
    }
    function resizeGrid(gridname) {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#' + gridname).offset().top);
        $("#" + gridname).find(".k-grid-content, .k-grid-content-locked").height(offsetbottom - 105);
    }
    function dataBound(e) {
        resizeGrid('Grid');
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br>";
                    });
                }
            });
            toastr.error('', message);
        }
    }
    function onRequestEnd(e) {
        if ((e.type == "create") && !e.response.Errors) {
            toastr.success("", "@Html.Raw(Resources.Global._save_successfully)");
            filter();
        }
        else
            if ((e.type == "update") && !e.response.Errors) {
                toastr.success("", "@Html.Raw(Resources.Global._update_successfully)");
                filter();
            }

    }
    function filter() {
        grid = $("#Grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };
        var txtMaPhanCap = $("#txtHierarchy").val();
        if (txtMaPhanCap) {
            filter.filters.push({ field: "ma_menu", operator: "contains", value: txtMaPhanCap });
        }
        grid.dataSource.filter(filter);
    }
    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".k-grid-content .checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    function onEdit(e) {
        var dataItem = $('#Grid').data('kendoGrid').dataItem($(e.container).closest("tr"));
        var dataParent = { Value: "", Text: "" };
        if (dataItem.cap_menu != null || dataItem.cap_menu != "") {
            $.ajax({
                type: "GET",
                async: false,
                url: r + "/Menu/getMenuParent",
                data: {
                    cap_menu: dataItem.cap_menu,
                    loai_menu: dataItem.loai_menu,
                    ma_website: dataItem.ma_website
                },
                success: function (data) {
                    if (data.success) {
                        dataParent = data.data;
                        $("#ma_menu_cha").kendoDropDownList({
                            dataSource: dataParent,
                            dataTextField: "Text",
                            dataValueField: "Value",
                            optionLabel: "Select ...",
                            filter: "startswith",
                        });
                    } else {
                        return false;
                    }
                }
            });   
        }
    }
</script>
