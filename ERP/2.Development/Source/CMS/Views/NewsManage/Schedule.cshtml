
@{
    ViewBag.Title = "Schedule";
}

<style>
    .k-alt .editable {
        background-color: #C8E6C9;
    }

    .editable {
        background-color: #E8F5E9;
    }
</style>
<div class="portlet light bordered">
    <div class="portlet-title">
        <div class="caption">
            <span class="caption-subject bold uppercase">@Html.Raw(Resources.Global._schedulePublish)</span>
        </div>
        
    </div>
    <div class="portlet-body">
        @(Html.Kendo().Grid<CMS.Models.cms_Schedule_News>()
        .Name("Grid")
        .Columns(columns =>
        {
            columns.Template(@<text></text>)
            .HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />")
            .ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=ma_bai_viet#'/> ")
            .HtmlAttributes(new { style = "text-align: center;" })
            .HeaderHtmlAttributes(new { style = "text-align: center" })
            .Width(25);
            columns.Bound(p => p.ma_bai_viet).Title("Mã bài viết").Width(90).HtmlAttributes(new { @class = "editable" });
            columns.Bound(p => p.ten_website).Title("Website").Width(150).HtmlAttributes(new { @class = "editable" });
            columns.Bound(p => p.ten_chuyen_muc).Width(100).Title("Chuyên mục").HtmlAttributes(new { @class = "editable" });
            columns.Bound(p => p.ten_vi_tri).Width(90).Title("Vị trí").HtmlAttributes(new { @class = "editable" });
            columns.Bound(p => p.trang_thai_xuat_ban).Title("Trạng thái").Width(80).HtmlAttributes(new { @class = "editable" });
            columns.Bound(p => p.ngay_gio_xuat_ban).Title("Ngày giờ xuất bản").Width(150).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
            //columns.Bound(p => p).Title("Thời gian còn lại").Width(120).HtmlAttributes(new { @class = "editable" });
            columns.Bound(p => p.ghi_chu).Title("Ghi chú").Width(150).HtmlAttributes(new { @class = "editable" });
            columns.Bound(p => p.nguoi_dat_lenh).Title("Người đặt lệnh").Width(100).HtmlAttributes(new { @class = "editable" });
            columns.Bound(p => p.ngay_dat_lenh).Title("Ngày đặt lệnh").Width(150).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
            columns.Bound(p => p.nguoi_cap_nhat).Title("Người cập nhật").Width(100).HtmlAttributes(new { @class = "editable" });
            columns.Bound(p => p.ngay_cap_nhat).Title("Ngày cập nhật").Width(150).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });


        })
        .Pageable()
        .Navigatable()
        .Scrollable()
        .Sortable()
        .ToolBar(toolbar =>
        {
        toolbar.Template(@<text>
            <div class="pull-left">
                

                <a class="btn btn-primary btn-small" href="javascript:void(0)" id="btnGridSave" onclick="Update()">
                    @Html.Raw(Resources.Global._save)
                </a>
                <a class="btn btn-default btn-small " href="javascript:void(0)" id="btnGridCancel" onclick="Cancel()">
                    @Html.Raw(Resources.Global._cancel)
                </a>
                @*<a class="btn btn-primary btn-small" href="javascript:void(0)" id="btnGridSave" onclick="Create()">
                    @Html.Raw(Resources.Global._add)
                </a>*@
                <a  class="btn btn-default btn-small" href="@Url.Action("Index","NewsManage")">@Html.Raw(Resources.Global._close)</a>
                
            </div>
        </text>);
        })
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Pageable(x => x.PageSizes(new int[] { 100, 200, 300, 500 }))
        .Events(events => { events.DataBound("dataBound"); events.Edit("onEdit"); })
        .Reorderable(reorderable => reorderable.Columns(true))
        .Resizable(resizable => resizable.Columns(true))
        //.Equals(GridResizableSettings.ReferenceEquals())
        .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .PageSize(100)
        .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
        .Model(model =>
        {
            model.Id(p => p.id);
            model.Field(p => p.ma_bai_viet).Editable(false);
            model.Field(p => p.ten_website).Editable(false);
            model.Field(p => p.trang_thai_xuat_ban).Editable(false);
            model.Field(p => p.ten_chuyen_muc).Editable(false);
            model.Field(p => p.ten_vi_tri).Editable(false);

            model.Field(p => p.ngay_dat_lenh).Editable(false);
            model.Field(p => p.nguoi_dat_lenh).Editable(false);
            model.Field(p => p.ngay_cap_nhat).Editable(false);
            model.Field(p => p.nguoi_cap_nhat).Editable(false);
            

        })

        .Read(c => c.Action("ReadSchedule", "NewsManage"))
        //.Create(c => c.Action("UpdateSchedule","NewsManage"))
        .Update(c => c.Action("UpdateShedule", "NewsManage"))
        )
        )
    </div>

</div>
<script>
   

    function Create() {
        $("#Grid").data("kendoGrid").dataSource.insert();

    }
    function Update() {
        if ($('#Grid').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#Grid').data('kendoGrid').saveChanges();
        }
    }
    function Cancel() {
        $('#Grid').data('kendoGrid').cancelChanges();
    }
    $(document).ready(function () {
        filter();
    });
    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    function dataBound(e) {
        resizeGrid('Grid');
    }
    function resizeGrid(gridname) {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#' + gridname).offset().top);
        $("#" + gridname).find(".k-grid-content, .k-grid-content-locked").height(offsetbottom - 105);
    }
    function onEdit(e) {
        if (e.model.isNew() == false) {
            $("#ma_bai_viet").attr("readonly", true);
        }
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br>";
                    });
                }
            });

            toastr.error(message)
        }
    }
    function onRequestEnd(e) {
        if ((e.type == "create") && !e.response.Errors) {
            toastr.success('', '@Html.Raw(Resources.Global._save_successfully)')
            filter();
        }
        else
            if ((e.type == "update") && !e.response.Errors) {
                toastr.success('', '@Html.Raw(Resources.Global._update_successfully)')
                filter();
            }

    }
    function filter() {
        grid = $("#Grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };

        var tenwebsite = $("#txtWebsites").val();
        if (tenwebsite) {
            filter.filters.push({ field: "ten_website", operator: "contains", value: tenwebsite });
        }

        grid.dataSource.filter(filter);
    }
</script>



