@model IEnumerable<ERPAPD.Models.ti_gia_quy_doi>
@{
    ViewBag.Title = Resources.Multi.ExchangeRate;
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
}
<div class="row-fluid">
    <div class="span12">
        <div class="span1">
            <label style="width:100px">Mã tiền tệ mặc định: </label>
        </div>
        <div class="span1">
            <span style="width: 50px; color:red;font-weight:bold">@ViewBag.currentCurrency</span>
        </div>
        <div class="span4">
            <input type="text" id="filterText" placeholder="Mã tiền tệ" style="width:250px" />
            <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="filter()" style="float:none">@Resources.Multi.Filter</button>
        </div>
    </div>
    <div class="span12" style="margin-left: 0px;">
        <a class="btn btn-small btn-primary" onclick="GetAllCurrency()">
            @Html.Raw(@Resources.Multi.Update) @Html.Raw(@Resources.Multi.ExchangeRate.ToLower())
        </a>
    </div>
</div>

<div class="row-fluid">
    <div class="span12">
        @(Html.Kendo()
                .Grid<ERPAPD.Models.ti_gia_quy_doi>()
        .Name("Grid")
        .HtmlAttributes(new { style = "height: auto;" })
        .Columns(columns =>
        {
            columns.Bound(p => p.ID).HeaderTemplate("<input style='text-align:center;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=ma_tien_te#'  />").Width(35).Filterable(false).Sortable(false);
            columns.Bound(p => p.ma_tien_te).Width(80).Title(Resources.Multi.CurrencyID);
            columns.Bound(p => p.don_vi_quy_doi).Width(80).Title(Resources.Multi.UnitExchange);
            columns.Bound(p => p.ChangeFrom).Width(80).Title(Resources.Multi.UnitExchange);
            columns.Bound(p => p.so_tien_quy_doi).Width(80).Title("Tỷ giá");
            columns.Bound(p => p.ngay_quy_doi).Width(120).Format("{0:" + Resources.Multi.DateFormat + "}").Title(Resources.Multi.ExchangeDate).ClientTemplate("#if(kendo.toString(ngay_quy_doi,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(ngay_quy_doi,'" + Resources.Multi.DateFormat + " hh:mm:ss') #" + "#}#");
            columns.Bound(p => p.nguoi_quy_doi).Width(100).Title(Resources.Multi.ExchangeBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });

        })
        
        .Events(events => { events.DataBound("dataBound"); })
        .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
        .Navigatable()
        .Scrollable(scrollable => scrollable.Virtual(false))
        .Sortable()
        .Resizable(resize => resize.Columns(true))

                                .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .Batch(true)
                                    .PageSize(50)
                                    .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                                    .Model(model =>
                                    {
                                        model.Id(p => p.ma_tien_te);
                                    })
                                        .Read("GetExchangeRate", "CRMExchangeRate", new { fromCurrence = @ViewBag.currentCurrency })
                                    )
)
    </div>
</div>

<script>
    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    $(window).resize(function () {
        resizeGrid();
    });
    $("#filterText").keypress(function (e) {
        if (e.keyCode == 13) {
            filter();
        }
    });
    function dataBound(e) {
        resizeGrid();
        var grid = this;
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
       .options.parameterMap({
           page: grid.dataSource.page(),
           sort: grid.dataSource.sort(),
           filter: grid.dataSource.filter()
       });
        //var $exportLink = grid.element.find('.exportClass');
        //var href = $exportLink.attr('href');
        //href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
        //href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));
        //$exportLink.attr('href', href);
    }
    function filter() {
        var grid = $("#Grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };
        var text = $("#filterText").val();
        if (text) {
            var filterOr = { logic: "or", filters: [] };
            filterOr.filters.push({ field: "ma_tien_te", operator: "contains", value: text });
            filter.filters.push(filterOr);
        }
        grid.dataSource.filter(filter);
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                    $("#Grid").data("kendoGrid").dataSource.read();
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
    function onRequestEnd(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Update @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid");
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 30);
    }
    $('.icon-chevron-up').bind('click', function () {
        setInterval(function () {
            resizeGrid();
        }, 500)
    });
    function GetAllCurrency() {
        var from = '@ViewBag.currentCurrency';
        $.post(r + "/CRMExchangeRate/ExchangeRateCreate", { from: from }, function (data) {
            if (data.success) {
                $.gritter.add({
                    title: "@Resources.Multi.Success",
                    text: "@Resources.Multi.Save @Resources.Multi.Successfully",
                    class_name: 'gritter-success'
                });
            }
            else {
                $.gritter.add({
                    title: "@Resources.Multi.Error",
                    text: data.message,
                    class_name: 'gritter-error'
                });
            }
            $("#Grid").data("kendoGrid").dataSource.read();
        });

    }
</script>
