@model IEnumerable<ERPAPD.Models.DC_Location_Region>
@{
    ViewBag.Title = "Danh sách vùng miền";
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
}
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="widget-header widget-header-blue widget-header-flat">
                <p style="font-size:14px">Lọc dữ liệu theo điều kiện</p>

                <span class="widget-toolbar">
                    <a href="#" data-action="collapse">
                        <i class="icon-chevron-up"></i>
                    </a>
                </span>
            </div>
            <div class="widget-body">
                <div class="widget-main">
                    <div class="row-fluid">
                        <div id="newlistICareID" style="display: inline-block;">
                            <input type="text" id="RegionName" name="RegionName" placeholder="Tìm theo nhiều vùng miền(cách bằng dấu ;)" style="width: 350px;" />
                        </div>
                        <select name="select" id="ListAlias" class='chosen-select span2' style="width:350px;" multiple data-placeholder="Chọn định danh ...">
                            <option></option>
                            <option value="">All</option>
                            @foreach (var alias in ViewBag.listalias)
                            {
                                <option value="@alias.AliasName">@alias.AliasName</option>
                            }
                        </select>
                        <select name="select" id="ListCountry" class='chosen-select span2' style="width:350px;" multiple data-placeholder="Chọn quốc gia...">
                            <option></option>
                            <option value="">All</option>
                            @foreach (var country in ViewBag.listcountry)
                            {
                                <option value="@country.CountryName">@country.CountryName</option>
                            }
                        </select>
                        <button type="button" id="btnSearch" style="float:none;" class="btn btn-primary btn-small" onclick="filter()">Lọc dữ liệu</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @* </ Hiện thị thông tin> *@
        @(Html.Kendo()
        .Grid(Model)
        .Name("Grid")
        .HtmlAttributes(new { style = "height: auto;" })
        .Columns(columns =>
        {
            columns.Bound(p => p.RegionID).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=RegionID#'  />").Width(35).Filterable(false).Sortable(false);
            columns.Bound(p => p.RegionID).Width(80).Title("Mã");
            columns.Bound(p => p.RegionName).Title("Tên").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
            columns.ForeignKey(p => p.CountryID, (System.Collections.IEnumerable)ViewBag.listcountry, "CountryID", "CountryName").EditorTemplateName("GridNullableForeignKey").Title("Quốc gia").Width(250).HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(p => p.AliasName).Title("Định danh").Width(150);
            columns.Bound(p => p.Active).Width(100).Title("Hoạt động").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
            columns.Bound(p => p.RowCreatedUser).Width(100).Title("Create By").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
            columns.Bound(p => p.RowCreatedTime).Width(100).Format("{0:dd/MM/yyyy}").Title("Create On").ClientTemplate("#if(kendo.toString(RowCreatedTime,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(RowCreatedTime,'dd/MM/yyyy') #" + "#}#");
            columns.Bound(p => p.RowLastUpdatedUser).Width(100).Title("Updated By").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
            columns.Bound(p => p.RowLastUpdatedTime).Format("{0:dd/MM/yyyy}").Width(100).Title("Updated On").ClientTemplate("#if(kendo.toString(RowLastUpdatedTime,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(RowLastUpdatedTime,'dd/MM/yyyy') #" + "#}#").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
        })
        .ToolBar(toolbar =>
        {
            toolbar.Create().Text("Thêm mới").HtmlAttributes(new { @style = "display:" + (AllowCreate ? "inline-block" : "none") });
            toolbar.Save().CancelText("Hủy bỏ").SaveText("Lưu lại").HtmlAttributes(new { @style = "display:" + (AllowUpdate ? "inline-block" : "none") });
            toolbar.Custom()
            .Text("Xóa bỏ")
            .HtmlAttributes(new { @id = "btnDeleteLibrary", @class = "btn btn-danger", @style = "display:" + (AllowDelete ? "inline-block" : "none"), @Href = "javascript:DeleteCountry()" });

            toolbar.Custom()
           .Text("Xuất dữ liệu ra Excel")
           .HtmlAttributes(new { @class = "exportClass btn btn-info", @style = "margin-left:5px" })
            .Url(Url.Action("ExportExcel", "RegionDefinition", new { filter = "~", sort = "~", RegionID = "~" }));
            toolbar.Custom()
               .Text("Nhập dữ liệu từ Excel")
               .HtmlAttributes(new { id = "importOther", @class = "btn btn-purple", Href = "javascript:void(0)" });

        })
        .Events(events => { events.DataBound("dataBound"); events.DetailExpand("detailExpand"); })
        .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
        .Navigatable()
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Scrollable(scrollable => scrollable.Virtual(false))
        .Sortable()
                //.Selectable(selectable => selectable.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
        .Resizable(resize => resize.Columns(true))
        .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .PageSize(50)
        .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
            .Model(model =>
            {
                model.Id(p => p.RegionID);
                model.Field(p => p.RegionID).Editable(false);
                model.Field(p => p.RowCreatedTime).Editable(false);
                model.Field(p => p.RowCreatedUser).Editable(false);
                model.Field(p => p.RowLastUpdatedTime).Editable(false);
                model.Field(p => p.RowLastUpdatedUser).Editable(false);
                model.Field(p => p.AliasName).Editable(false);
                model.Field(p => p.Active).DefaultValue(true);
            })
            .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
            .Read("Region_Read", "RegionDefinition")
            .Create("Region_Create", "RegionDefinition")
            .Update("Region_Update", "RegionDefinition")
            )
        )
    </div>
</div>

@(Html.Kendo()
      .Window()
      .Name("windowimport")
      .Title("ImportForm")
      .Content(@<text>
        <div class="row-fluid">
            <div class="span7">
                <form id="importform" action="@Url.Content("~/RegionDefinition/ImportFromExcel")" method="post" class="form-horizontal" enctype="multipart/form-data" style="margin-bottom:0px;">
                    <input type="file" id="FileUpload" name="FileUpload" />
                </form>
            </div>
            <button type="button" id="btnImport" class="btn btn-purple btn-small span2" style="float: right;">Import</button>
        </div>
        <div class="row-fluid">
            <a id="btndownload" style="display: none" class="btn btn-warning btn-small">Download template with error</a>
        </div>
    </text>)
      .Draggable()
      .Resizable()
      .Visible(false)
      .Width(1000)
      .Actions(actions => actions.Close())

)
<script>
    $("#ListAlias").chosen();
    $("#ListCountry").chosen();
    $('#FileUpload').ace_file_input({
        no_file: 'No File ...',
        btn_choose: 'Choose',
        btn_change: 'Change',
        droppable: false,
        onchange: null,
        thumbnail: false //| true | large
        //whitelist:'gif|png|jpg|jpeg'
        //blacklist:'exe|php'
        //onchange:''
        //
    });
    $('#importOther').bind('click', function () {
        $("#windowimport").kendoWindow({
            actions: {}, /*from Vlad's answer*/
            draggable: true,
            height: "300px",
            modal: true,
            resizable: false,
            width: "500px",
            visible: false /*don't show it yet*/
        }).data("kendoWindow").center().open();
    });
    //function importexcel() {
    //    if ($("#FileUpload").val() == '') {
    //        $.gritter.add({
    //            title: '',
    //            text: 'Please choose file import.',
    //            class_name: 'gritter-error'
    //        });
    //        return false;
    //    }
    //    else {
    //        $('#importform').submit();
    //    }
    //}
    $('#btnImport').bind('click', function () {
        $('#importform').submit();
    });
    (function () {
        $("#importform").ajaxForm({
            beforeSend: function () {
                $("#windowimport").data("kendoWindow").close();
                $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
            },
            uploadProgress: function (event, position, total, percentComplete) {
            },
            success: function (data) {
                if (data.success) {
                    $("#Grid").data("kendoGrid").dataSource.read();
                    $.unblockUI;
                    $.gritter.add({
                        title: '',
                        text: 'Import successfully ' + data.total + ' record(s)',
                        class_name: 'gritter-success'
                    });
                    if (data.totalError > 0) {
                        $("#windowimport").data("kendoWindow").open();
                        $('#btndownload').css('display', 'inline-block');
                        $('#btndownload').attr('href', r + "/PotentialCustomer/Download?file=" + data.link);
                    }
                    else {
                        $('#btndownload').css('display', 'none');
                        $('#btndownload').attr('href', "");
                    }


                }
                else {
                    $.gritter.add({
                        title: '',
                        text: 'Import Error',
                        class_name: 'gritter-error'
                    });
                    $.unblockUI;
                }
            },
            complete: function (xhr) {

            }
        });

    })();
    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    $(window).resize(function () {
        resizeGrid();
    });
    var expandedRow;
    var curunitid;
    function detailExpand(e) {
        // Only one open at a time
        if (expandedRow != null && expandedRow[0] != e.masterRow[0]) {
            var grid = $('#Grid').data('kendoGrid');
            grid.collapseRow(expandedRow);
        }
        expandedRow = e.masterRow;
        var masterDataItem = $('#Grid').data('kendoGrid').dataItem(expandedRow);
        curunitid = masterDataItem.ExamID;
    }
    function dataBound(e) {
        resizeGrid();
        var grid = this;
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
       .options.parameterMap({
           page: grid.dataSource.page(),
           sort: grid.dataSource.sort(),
           filter: grid.dataSource.filter()
       });
        var $exportLink = grid.element.find('.exportClass');
        var href = $exportLink.attr('href');
        href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
        href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));
        $exportLink.attr('href', href);
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                    $("#Grid").data("kendoGrid").dataSource.read();
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        } else {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Create successful',
                class_name: 'gritter-success'
            });
        }
    }
    function onRequestEnd(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Update successfully',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Create successfully',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid");
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 30);
    }
    $('.icon-chevron-up').bind('click', function () {
        setInterval(function () {
            resizeGrid();
        }, 500)
    });
    function filter() {

        grid = $("#Grid").data("kendoGrid");
        var RegionName = $("#RegionName").val();
        var ListAlias = $("#ListAlias option:selected");
        var ListCountry = $("#ListCountry option:selected");

        var filter = { logic: "and", filters: [] };
        var filterRegionName = { logic: "or", filters: [] };
        var filterListAlias = { logic: "or", filters: [] };
        var filterListCountry = { logic: "or", filters: [] };
        if (RegionName) {
            for (var i = 0; i < RegionName.split(';').length; i++) {
                filterRegionName.filters.push({ field: "RegionName", operator: "contains", value: RegionName.split(';')[i] });
            }
            filter.filters.push(filterRegionName);
        }
        if (ListAlias.length > 0) {
            for (var i = 0; i < ListAlias.length; i++) {
                var option = ListAlias[i].value;
                filterListAlias.filters.push({ field: "AliasName", operator: "contains", value: option });
            }
            filter.filters.push(filterListAlias);
        }
        if (ListCountry.length > 0) {
            for (var i = 0; i < ListCountry.length; i++) {
                var option = ListCountry[i].value;
                filterListCountry.filters.push({ field: "CountryName", operator: "contains", value: option });
            }
            filter.filters.push(filterListCountry);
        }
        grid.dataSource.filter(filter);
    }
    $('#RegionName').bind('keypress', function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            filter();
        }
    });
    function Delete() {
        var listrowid = "";
        $('#Grid').find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            var c = confirm("Are you sure you want to DELETE this record");
            if (c == true) {
                $.post(r + "/RegionDefinition/Delete", { data: listrowid, }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: 'Delete successfully',
                            class_name: 'gritter-success'
                        });
                        $("#Grid").data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAll').prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                        $("#Grid").data("kendoGrid").dataSource.read();
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: 'Please choose data.',
                class_name: 'gritter-error'
            });
            return false;
        }
    }
</script>
