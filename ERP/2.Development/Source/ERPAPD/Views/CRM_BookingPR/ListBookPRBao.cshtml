@model IEnumerable<ERPAPD.Models.CRM_BookPR_View>
@{
    if (ViewBag.type == "1")
    {
        ViewBag.Title = "Book PR Báo";
    }
    else
    {
        ViewBag.Title = "Book PR Mới";
    }

    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);

    var listStatus = new List<Object>();
    listStatus.Add(new { Code = 1, Name = "Đã duyệt" });
    listStatus.Add(new { Code = 0, Name = "Chưa duyệt" });
    ViewBag.listStatus = listStatus;

    var listTypePR = new List<Object>();
    listTypePR.Add(new { Code = 1, Name = "Bài PR Báo" });
    listTypePR.Add(new { Code = 2, Name = "Bài PR Mới" });
    ViewBag.listTypePR = listTypePR;
}
@Html.Partial("popup")
<input type="hidden" id="type" value="@ViewBag.type" />
<div class="row-fluid">
    
    <div class="span12">
        <div class="span2">
            <div class="controls">
                <select id="listWebsite" class="select" data-placeholder="Website" style="width:100%" onchange="changeWebsite()">
                    <option value="">-- Chọn Website--</option>
                    @foreach (var item in ViewBag.listWebsite)
                    {
                        <option value="@item.Code">@item.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="span2">
            <div class="controls">
                <select id="listCategory" class="select" data-placeholder="Chuyên mục" style="width:100%">
                    <option value="">-- Chọn chuyên mục--</option>
                    
                </select>
            </div>
        </div>
        <div class="span2">
            <div class="controls">
                <select id="listLocation" class="select" data-placeholder="Vị trí" style="width:100%">
                    <option value="">-- Chọn vị trí--</option>
                    @foreach (var item in ViewBag.listLocation)
                    {
                        <option value="@item.Code">@item.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="span2">
            <div class="controls">
                <select id="listStaff" class="select" data-placeholder="Nhân viên" style="width:100%">
                    <option value="">-- Chọn nhân viên--</option>
                    @foreach (var item in ViewBag.listStaff)
                    {
                        <option value="@item.Code">@item.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="span2">
            <div class="controls">
                <input type="text" class="input-xs" id="range-date" placeholder="Từ ngày - Đến ngày" />
            </div>
        </div>

    </div>
</div>
<div class="row-fluid" style="margin-bottom:5px">
    <div class="span12">
        <div class="span2">
            <div class="controls">
                @(Html.Kendo().AutoComplete()
                              .Name("txt-CustomerID")
                              .DataTextField("CustomerName")
                              .Animation(true)
                              .Placeholder("Nhập tên khách hàng")
                              .Filter("contains")
                              .MinLength(1)
                              .HtmlAttributes(new { style = "width:100%", @class = "input-medium" })
                              .DataSource(source =>
                              {
                                  source.Read(read =>
                                  {
                                      read.Action("CustomerRead", "CRM_CustomerSupport")
                                          .Data("onAdditionalData");
                                  })
                                  .ServerFiltering(true);
                              })
                             .Events(e =>
                             {
                                 e.Select("onSelectCustomer");
                                 //e.Change("onFilter");
                             })
                             .Template("<span>#=CustomerID# - #=CustomerName#</span>")
                )
                <input type="hidden" class="span12" id="customer-id" placeholder="Khách hàng" />
            </div>
        </div>
        <div class="span2">
            <select id="listTypePR" class="select" data-placeholder="Loại PR" style="width:100%">
                <option value="">-- Chọn loại PR--</option>
                @foreach (var item in ViewBag.listTypePR)
                {
                    <option value="@item.Code">@item.Name</option>
                }
            </select>

        </div>
        <div class="span2">
            <div class="controls">
                <input type="text" class="input-xs" id="bookcode" placeholder="Mã book" />
            </div>
        </div>
        <div class="span2">
            <div class="controls">
                <input type="text" class="input-xs" id="contractcode" placeholder="Số hợp đồng" />
            </div>
        </div>
        <div class="span2">
            <div class="controls">
                <select id="listHourUp" class="select" data-placeholder="Giờ lên" style="width:100%">
                    <option value="">-- Chọn giờ lên--</option>
                    @foreach (var item in ViewBag.listTime)
                    {
                        <option value="@item.Code">@item.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="span2">
            <div class="controls">
                <button type="button" id="btnSearch" class="btn btn-primary btn-small" style="float:none;" onclick="filter()">Tìm kiếm</button>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @* </ Hiện thị thông tin> *@
        @(Html.Kendo()
              .Grid(Model)
              .Name("Grid")
              .Columns(columns =>
              {
                  columns.Bound(p => p.ID).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=IDBookPRLocation#' PKBookPRLocation='#=PKBookPRLocation#'  />").Width(30).Filterable(false).Sortable(false);
                  columns.Bound(p => p.ID).Title("ID").Width(50).ClientTemplate("<a href='" + Url.Action("EditBookPRBao", "CRM_BookingPR") + "/#=Code#'>#=FKBookPR#</a>");
                  columns.Bound(p => p.Code).Title("Mã book").Width(80); //.ClientTemplate("#=getTextByValue(data)#")
                  columns.Bound(p => p.ContractCode).Title("Số HĐ").Width(100);
                  columns.Bound(p => p.CustomerName).Title("Khách hàng").Width(250);
                  columns.ForeignKey(p => p.Website, (System.Collections.IEnumerable)ViewBag.listWebsite, "Code", "Name")
                        .Title("Website")
                        .Width(100)
                        .EditorTemplateName("GridNullableForeignKey");

                  columns.ForeignKey(p => p.Category, (System.Collections.IEnumerable)ViewBag.listCategory, "Code", "Name")
                         .Title("Chuyên mục")
                         .Width(120)
                         .EditorTemplateName("GridNullableForeignKey");

                  columns.Bound(p => p.LocationName).Title("Vị trí").Width(80);

                  columns.Bound(p => p.NgayLen)
                         .Title("Ngày lên")
                         .Width(100).Format("{0:" + Resources.Multi.DateFormat + "}")
                         .ClientTemplate("#if(kendo.toString(NgayLen,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(NgayLen,'" + Resources.Multi.DateFormat + "') #" + "#}#")
                         .EditorTemplateName("Date");
                  columns.ForeignKey(p => p.GioLen, (System.Collections.IEnumerable)ViewBag.listTime, "Code", "Name")
                        .Title("Giờ lên")
                        .Width(80)
                        .EditorTemplateName("GridNullableForeignKey");
                  columns.Bound(p => p.Link).Title("Link")
                         .Width(300)
                         .ClientTemplate("<a href='#=Link# target ='_blank''> #=Link#</a>");
                  columns.ForeignKey(p => p.VungMien, (System.Collections.IEnumerable)ViewBag.listRegion, "Code", "Name")
                          .Title("Vùng miền")
                          .Width(100)
                          .EditorTemplateName("GridNullableForeignKey");
                  columns.ForeignKey(p => p.NguoiYeuCauBook, (System.Collections.IEnumerable)ViewBag.listStaff, "Code", "Name")
                         .Title("NVKD")
                         .Width(120)
                         .EditorTemplateName("GridNullableForeignKey");
                  columns.ForeignKey(p => p.Status, (System.Collections.IEnumerable)ViewBag.listStatus, "Code", "Name")
                         .Title("Trạng thái")
                         .Width(120)
                         .EditorTemplateName("GridNullableForeignKey");
                  columns.Bound(p => p.NgayTao).Title("Ngày book").Width(100).Format("{0:" + Resources.Multi.DateFormat + "}").ClientTemplate("#if(kendo.toString(NgayTao,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(NgayTao,'" + Resources.Multi.DateFormat + "') #" + "#}#");
                  columns.Bound(p => p.FKCustomer).Hidden();
                  columns.Bound(p => p.Location).Hidden();
                  columns.Bound(p => p.IDBookPRLocation).Hidden();//.ClientTemplate("#=getTextByValue(data)#")
              })
              .Scrollable(scrollable => scrollable.Virtual(true))
              .Pageable(pager => pager
              .PageSizes(new[] { 20, 100, 200, 300 }))
              .Sortable()
              .Navigatable()
              //.Editable(editable => editable.Mode(GridEditMode.InCell))
              .Events(events => { events.DataBound("dataBound"); })
              .ToolBar(toolbar =>
              {
              toolbar.Template(@<text>
                    <div class="pull-left">
                        @if (AllowCreate)
                        {
                            <a class="btn btn-success btn-small" href="~/CRM_BookingPR/BookNewPR/1">
                               Book PR Báo
                            </a>
                            <a class="btn btn-success btn-small" href="~/CRM_BookingPR/BookNewPR/2">
                               Book PR Mới
                            </a>
                            <a class="btn btn-success btn-small" href="javascript:void(0)" onclick="showConfirmPopup('DUYET')">
                               Duyệt
                            </a>
                            <a class="btn btn-success btn-small" href="javascript:void(0)" onclick="showConfirmPopup('HUY')">
                               Hủy
                            </a>
                            <a class="btn btn-success btn-small" href="javascript:void(0)" onclick="showConfirmPopup('GOP')">
                               Gộp
                            </a>
                            <a class="btn btn-danger btn-small" href="javascript:void(0)" onclick="showConfirmPopup('XOA')">
                               Xóa
                            </a>
                            <a class="btn btn-success btn-small" href="~/CRM_BookingPR/ReportBookPRBao/1">
                                Xem Book Báo
                            </a>
                            <a class="btn btn-success btn-small" href="~/CRM_BookingPR/ReportBookPRBao/2">
                                Xem Book Mới
                            </a>
                        }
                    </div>
            </text>);
              })
            .Navigatable()
            .Sortable()
            .Scrollable(scrollable => scrollable.Virtual(false))
            .Sortable()
            .Resizable(resize => resize.Columns(true))
            .DataSource(dataSource => dataSource.Ajax()
                                        .Batch(true)
                                        .Sort(x => x.Add("ID").Descending())
                                        .PageSize(50)
                                        .Model(model =>
                                        {
                                            model.Id(p => p.ID);
                                        })
                                        .Read(read => read.Action("BookPRBao_Read", "CRM_BookingPR").Data("getHeaderInfo"))
                                        )


        )
    </div>

</div>
<script>
    $('.select').chosen();
    $('#range-date').daterangepicker({
        ranges: {
            'Hôm nay': [moment(), moment()],
            'Hôm qua': [moment().subtract('days', 1), moment().subtract('days', 1)],
            '7 ngày trước': [moment().subtract('days', 6), moment()],
            '30 ngày trước': [moment().subtract('days', 29), moment()],
            'Tháng này': [moment().startOf('month'), moment().endOf('month')],
            'Tháng trươc': [moment().subtract('month', 1).startOf('month'), moment().subtract('month', 1).endOf('month')]
        },
        format: 'YYYY/MM/DD',
        locale: {
            applyLabel: 'Xác nhận',
            cancelLabel: 'Đóng lại',
            fromLabel: 'Từ',
            toLabel: 'Đến',
            customRangeLabel: 'Tuỳ chọn',
            daysOfWeek: ['T7', 'CN', 'T2', 'T3', 'T4', 'T5', 'T6'],
            monthNames: ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6', 'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12'],
            firstDay: 1,
        },
      
    });

    function getHeaderInfo() {
        return {
            type: $('#type').val()
        }
    }

    function changeWebsite() {
        var web = $('#listWebsite').val();
        if (web != "") {
            $.post(r + "/CRM_BookingPR/GetListCategory", { web: web }, function (data) {
                debugger
                if (data.success) {
                    // append data
                    console.log(data.listCategory)
                    var strOption = '<option value = ""> -- Chuyên mục --  </option>';
                    $.each(data.listCategory, function (i, v) {
                        strOption += "<option value = '" + v.Code + "'> " + v.Name + "</option>";
                    })
                    $('#listCategory').chosen('destroy');
                    $('#listCategory').html(strOption);
                    $('#listCategory').chosen();
                }
            })
        }
    }

    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 30);
    }

    $(window).resize(function () {
        resizeGrid();
    });

    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }

    function dataBound() {
        resizeGrid();
        //load selected
        var gridDataSource = $("#Grid").data("kendoGrid").dataSource;
        var $Grid = $("#Grid");
        $('#Grid').find(".k-grid-content tbody tr").each(function () {
            var $tr = $(this);
            var uid = $tr.attr("data-uid");
            var data_entry = _.find(gridDataSource._data, function (data_source) {
                return data_source.uid === uid;
            });
            $tr.addClass('kendo-data-row').attr('data-KendoGrid-rowid', data_entry.ArticleId);
        });
        //Mark any selected rows as selected (persists selections from page to page)
        var selectedRowIds = $Grid.attr('data-KendoGrid-selected');
        if (selectedRowIds != null) {
            var selectedRowIdArray = selectedRowIds.split(',');
            var visibleRows = $Grid.find('.kendo-data-row');
            $(visibleRows).each(function () {
                $row = $(this);
                var rowID = $row.attr('data-KendoGrid-rowid');
                if (_.contains(selectedRowIdArray, rowID)) {
                    //$row.addClass('k-state-selected');
                    $row.find('.checkItem').attr('checked', 'checked');
                }
            });
            var totalview = $("#Grid").data("kendoGrid").dataSource.view().length;
            var totalchecked = $('.checkItem:checked').length;
            if (totalview != totalchecked) {
                $('#checkAll').removeAttr("checked");
            }
            else {
                $('#checkAll').attr("checked", "checked");
            }
        }
    }

    function onAdditionalData() {
        return {
            text: $("#txt-CustomerID").val()
        };
    }
    function onSelectCustomer(e) {
        var dataItem = this.dataItem(e.item.index());
        $("#customer-id").val(dataItem.CustomerName);
        filter();
    }
    
    function onFilter(e) {
        $("#customer-id").val('');
        filter();
    }

    function ChangeStatus(e) {
        var listrowid = "";
        $('#Grid').find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            var c = confirm("@Resources.Multi.AreYouSure @Resources.Multi.Change.ToLower() @Resources.Multi.Status [ @Resources.Multi.Active] ?");
            if (c == true) {
                $.post(r + "/CRM_BookingPR/BookPRBao_ChangeStatus", { listdata: listrowid, action: e, from : 'header' }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: '@Resources.Multi.Save @Resources.Multi.Success.ToLower()',
                            class_name: 'gritter-success'
                        });
                        $("#Grid").data("kendoGrid").dataSource.read();
                        $('#Grid').prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                        $("#Grid").data("kendoGrid").dataSource.read();
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: '@Resources.Multi.Please @Resources.Multi.Select.ToLower() data.',
                class_name: 'gritter-error'
            });
            return false;
        }
    }

    $('.select').change(function () {
        filter();
    })
    function filter() {

        var grid = $('#Grid').data('kendoGrid');
        var filter = { logic: "and", filters: [] };
        var fillterOr = { logic: "or", filters: [] };
        var filterCustomer = { logic: "or", filters: [] };
        var fillterBookCode = { logic: "or", filters: [] };
        var fillterContractCode = { logic: "or", filters: [] };
        var fillterWebsite = { logic: "or", filters: [] };
        var fillterCategory = { logic: "or", filters: [] };
        var fillterLocation = { logic: "or", filters: [] };
        var fillterStaff = { logic: "or", filters: [] };
        var fillterHourUp = { logic: "or", filters: [] };
        var fillterTypePR = { logic: "or", filters: [] };

        var customer = $("#customer-id").val();
        if (customer) {
            filterCustomer.filters.push({ field: "CustomerName", operator: "eq", value: customer });
            filter.filters.push(filterCustomer);
        }
        var bookcode = $("#bookcode").val();
        if (bookcode) {
            fillterBookCode.filters.push({ field: "Code", operator: "eq", value: bookcode });
            filter.filters.push(fillterBookCode);
        }
        var contractcode = $("#contractcode").val();
        if (contractcode) {
            fillterContractCode.filters.push({ field: "ContractCode", operator: "eq", value: contractcode });
            filter.filters.push(fillterContractCode);
        }
        var website = $("#listWebsite").val();
        if (website) {
            fillterWebsite.filters.push({ field: "Website", operator: "eq", value: website });
            filter.filters.push(fillterWebsite);
        }
        var category = $("#listCategory").val();
        if (category) {
            fillterCategory.filters.push({ field: "Category", operator: "eq", value: category });
            filter.filters.push(fillterCategory);
        }
        var location = $("#listLocation").val();
        if (location) {
            fillterLocation.filters.push({ field: "Location", operator: "eq", value: location });
            filter.filters.push(fillterLocation);
        }
        var typePR = $("#listTypePR").val();
        if (typePR) {
            fillterTypePR.filters.push({ field: "Type", operator: "eq", value: typePR });
            filter.filters.push(fillterTypePR);
        }
        var hourUp = $("#listHourUp").val();
        if (hourUp) {
            fillterHourUp.filters.push({ field: "GioLen", operator: "eq", value: hourUp });
            filter.filters.push(fillterHourUp);
        }

        var rangeDate = $('#range-date').val();
        if (rangeDate) {
            var startdate = rangeDate.split('-')[0].trim();
            var enddate = rangeDate.split('-')[1].trim();
            var todate = new Date(enddate);
            todate.setDate(todate.getDate() + 1);
            filter.filters.push({ field: "NgayLen", operator: "gte", value: startdate });
            filter.filters.push({ field: "NgayLen", operator: "lt", value: kendo.toString(todate, 'yyyy-MM-dd') });
        }
        grid.dataSource.filter(filter);
    }

</script>