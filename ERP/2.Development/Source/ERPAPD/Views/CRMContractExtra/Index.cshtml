@model IEnumerable<CRM24H.Models.CRM_Contract_Extra>
@{
    ViewBag.Title = "Quản lý điều khoản hợp đồng";
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
}
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="row-fluid">
                <div class="span12">
                    <input type="text" class="input-xs" id="txtSearch" placeholder="Nhập loại hoặc giá trị đê tìm kiếm">
                    <select id="TypeContractTerms" class="chosen-select">
                        <option value="">-- Chọn loại --</option>
                        @foreach (var item in ViewBag.listContractTerms)
                        {
                            <option value="@item.ParamID">@item.Value</option>
                        }
                    </select>
                    <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="Filter()" style="float:none">@Resources.Multi.Filter</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        <article class="col-sm-12">
            <div class="widget-body">
                @(Html.Kendo()
                .Grid(Model)
                .Name("Grid")
                .Editable()
                .Columns(columns =>
                {
                    columns.Bound(p => p.RowID).Hidden();
                    columns.Bound(p => p.RowID)
                        .HeaderTemplate("<input type='checkbox' id='checkboxcheckAll'  onClick='checkAll(this)' />")
                        .ClientTemplate("<input class='checkrowid' type='checkbox' id='#=RowID#'  />")
                        .HtmlAttributes(new { style = "text-align:center" })
                        .HeaderHtmlAttributes(new { style = "text-align:center" })
                        .Width(25).Filterable(false).Sortable(false);
                    columns.Bound(p => p.Title).Width(250).Title("Tiêu đề")
                        .HtmlAttributes(new { style = "background-color:\\#DAF1C8" })
                        .ClientTemplate("<div ><a   href='javascript:void(0)'  onclick='EditAction(#=RowID#)' >#=Title#</a></div>");
                    columns.ForeignKey(p => p.Type, (System.Collections.IEnumerable)ViewBag.listContractTerms, "ParamID", "Value").Title("Loại hợp đồng").Width(100);
                    columns.Bound(p => p.Description).Width(250).Title("Mô tả");

                    columns.Bound(p => p.RowCreatedAt).Width(110).Title("Ngày tạo").Format("{0:" + Resources.Multi.DateFormat + " HH:mm}").HtmlAttributes(new { style = "text-align:right" });
                    columns.Bound(p => p.RowCreatedUser).Width(100).Title("Người tạo");
                    columns.Bound(p => p.RowUpdatedAt).Width(110).Title("Ngày cập nhật").Format("{0:" + Resources.Multi.DateFormat + " HH:mm}").HtmlAttributes(new { style = "text-align:right" });
                    columns.Bound(p => p.RowUpdatedUser).Width(100).Title("Người cập nhật");
                })
                .ToolBar(toolbar =>
                {
                    if (AllowUpdate)
                    {
                        toolbar.Template(@<text>
                            <div class="pull-left">
                                @if (AllowCreate)
                                {
                                    <a class="btn btn-success btn-small" href=@Url.Action("Create","CRMContractExtra") id="">
                                        @*<i class="icon-plus"></i>*@ @Resources.Multi.Add
                                    </a>
                                }

                                @if (AllowDelete)
                                {
                                    <a class="btn btn-danger btn-small" href="javascript:void(0)" onclick="showConfirmPopup(1)" id="btnGridDelete">
                                        @*<i class="icon-plus"></i>*@ @Resources.Multi.Delete
                                    </a>
                                }
                            </div>
                        </text>);
                    }
                }).Events(events => { events.DataBound("onDatabound"); })
                                        .Pageable(pager => pager.PageSizes(new[] { 20, 100, 200, 300 }))
                                        .Resizable(r => r.Columns(true))
                                        .Navigatable()
                                        .Scrollable()
                                        .Sortable()
                                        .DataSource(dataSource => dataSource
                                            .Ajax()
                                            .Batch(true)
                                            .PageSize(20)
                                            .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                                            .Model(model =>
                                            {
                                                model.Id(p => p.RowID);
                                            })
                                            .Read("Contract_Extra_Read", "CRMContractExtra")

                                        ))
            </div>
        </article>
    </div>
</div>
@Html.Partial("_popup")
<script>
    $(".chosen-select").chosen();
    $("#txtSearch").keypress(function (e) {
        if (e.keyCode == 13) {
            Filter();
        }
    });
    function EditAction(id) {
        window.location = r + "/CRMContractExtra/Create/" + id;
    }
    function onDatabound(e) {
        resizegrid();
        var grid = $("#Grid").data("kendoGrid");
        // ask the parameterMap to create the request object for you
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
        .options.parameterMap({
            page: grid.dataSource.page(),
            sort: grid.dataSource.sort(),
            filter: grid.dataSource.filter()
        });
    }
    function resizegrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 10);
    }

    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "Lỗi :\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
    function onRequestEnd(e) {
        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                title: '',
                text: 'Cập nhật dữ liệu thành công',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                title: '',
                text: 'Thêm mới dữ liệu thành công',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
    }
    $('#TypeContractTerms').change(function () {
        Filter();
    })
    function Filter() {
        var grid = $('#Grid').data('kendoGrid');
        var filter = { logic: "and", filters: [] };
        var fillterOr = { logic: "or", filters: [] };
        var isType = $('#TypeContractTerms').val();

        if (isType != "") {
            filter.filters.push({ field: "Type", operator: "eq", value: isType });
        }
        var text = $("#txtSearch").val();
        console.log(text);
        if (text) {
            var filterOr = { logic: "or", filters: [] };
            filterOr.filters.push({ field: "Title", operator: "contains", value: text });
            filterOr.filters.push({ field: "Description", operator: "contains", value: text });
            filter.filters.push(filterOr);
        }
        grid.dataSource.filter(filter);
    }
</script>
