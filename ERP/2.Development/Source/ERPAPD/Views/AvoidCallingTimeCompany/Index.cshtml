@model IEnumerable<ERPAPD.Models.DC_AvoidCallingTimeFrame>
@{
    ViewBag.Title = "Quản lý khung giờ cấm gọi theo công ty";
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
}

<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="widget-header widget-header-blue widget-header-flat">
                <p style="font-size:14px">@Resources.Multi.Filter</p>

                <span class="widget-toolbar">
                    <a href="#" data-action="collapse">
                        <i class="icon-chevron-up"></i>
                    </a>
                </span>
            </div>
            <div class="widget-body">
                <div class="widget-main">
                    <div class="row-fluid">
                        <div id="newlistICareID" style="display: inline-block;">
                            <select id="listComF" class='chosen-select' data-placeholder="Chọn công ty" style="width:250px;" name="select" multiple>
                                <option></option>
                                <option value="">All</option>
                                @foreach (var item in ViewBag.listComDisticnt)
                                {
                                    <option value="@item.CompanyID">@item.ShortName</option>
                                }
                            </select>
                            <select id="HeaderF" class='chosen-select' data-placeholder="Chọn khung giờ" style="width:250px;" name="select" multiple>
                                <option></option>
                                <option value="">All</option>
                                @foreach (var item in ViewBag.listAvoidCallingTimeFramedistinct)
                                {
                                    <option value="@item.Id">@item.HeaderName</option>
                                }
                            </select>
                            <select id="DayF" class='chosen-select' style="width: 250px;" data-placeholder="Chọn ngày" name="select" multiple>
                                <option></option>
                                <option value="">All</option>
                                <option value="Monday">Monday</option>
                                <option value="Tuesday">Tuesday</option>
                                <option value="Wednesday">Wednesday</option>
                                <option value="Thursday">Thusday</option>
                                <option value="Friday">Friday</option>
                                <option value="Saturday">Saturday</option>
                                <option value="Sunday">Sunday</option>
                            </select>
                            @*Company:  <span class="badge badge-info">@ViewBag.CountCompany.CountCom.ToString("N0")</span>
                                Customer: <span class="badge badge-success">@ViewBag.CountCustomerInCom.CountCustomer.ToString("N0")</span>*@
                        </div>
                        <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="filter()" style="float:none">@Resources.Multi.Filter</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="row-fluid">
    <div class="span12">
        @(Html.Kendo()
                    .Grid<ERPAPD.Models.DC_DetailAvoidCallingTimeFrame>()
                    .Name("Grid")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.Id).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=Id#'  />").Width(35).Filterable(false).Sortable(false);
                        columns.ForeignKey(p => p.CompanyID, (System.Collections.IEnumerable)ViewBag.listComDisticnt, "CompanyID", "ShortName").Title("Công ty").Width(200).Width(150);
                        columns.ForeignKey(p => p.HeaderID, (System.Collections.IEnumerable)ViewBag.listAvoidCallingTimeFrame, "Id", "HeaderName").EditorTemplateName("GridNullableForeignKey").Title("Khung giờ").Width(180);
                        columns.Bound(p => p.FromHour).Width(75).Format("{0:HH:mm tt}").Title("Từ giờ");
                        columns.Bound(p => p.ToHour).Width(75).Format("{0:HH:mm tt}").Title("Đến giờ");
                        columns.Bound(p => p.Monday).Width(65).Title("T2").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.Bound(p => p.Tuesday).Width(65).Title("T3").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.Bound(p => p.Wednesday).Width(80).Title("T4").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.Bound(p => p.Thursday).Width(65).Title("T5").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.Bound(p => p.Friday).Width(65).Title("T6").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.Bound(p => p.Saturday).Width(65).Title("T7").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.Bound(p => p.Sunday).Width(65).Title("CN").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.Bound(p => p.Total).Width(80).Format("{0:N0}").Title("Tổng NV");
                        columns.Bound(p => p.Register).Width(90).Format("{0:N0}").Title("Đăng ký");
                        columns.Bound(p => p.RowCreatedUser).Width(100).Title(Resources.Multi.CreatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
                        columns.Bound(p => p.RowCreatedTime).Width(140).Format("{0:" + Resources.Multi.DateFormat + "}").Title(Resources.Multi.CreatedAt).ClientTemplate("#if(kendo.toString(RowCreatedTime,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(RowCreatedTime,'dd/MM/yyyy HH:mm:ss') #" + "#}#");
                        columns.Bound(p => p.RowLastUpdatedUser).Width(100).Title(Resources.Multi.UpdatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
                        columns.Bound(p => p.RowLastUpdatedTime).Format("{0:" + Resources.Multi.DateFormat + "}").Width(140).Title(Resources.Multi.UpdatedAt).ClientTemplate("#if(kendo.toString(RowLastUpdatedTime,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(RowLastUpdatedTime,'dd/MM/yyyy HH:mm:ss') #" + "#}#").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
                    })
                    .ToolBar(toolbar =>
                    {
                        toolbar.Custom()
                        .Text(Resources.Multi.Add)
                        .HtmlAttributes(new { @id = "btnSubmitPro", @class = "btn btn-success", @style = "display:" + (AllowDelete ? "inline-block" : "none"), @Href = "javascript:ShowEdit()" });
                        toolbar.Save().SaveText(Resources.Multi.Save).CancelText(Resources.Multi.Cancel).HtmlAttributes(new { @style = "display:" + (AllowUpdate || AllowCreate ? "inline-block" : "none") });

                        toolbar.Custom()
                                    .Text("Xóa bỏ")
                                    .HtmlAttributes(new { @id = "btnDeleteAvoidCalling", @class = "btn btn-danger", @style = "display:" + (AllowDelete ? "inline-block" : "none"), @Href = "javascript:DeleteAvoid()" });
                        //toolbar.Custom()
                        //            .Text("Export To Excel")
                        //            .HtmlAttributes(new { @class = "exportClass" })
                        //            .Url(Url.Action("Export", "AvoidCallingTimeCompany", new { filter = "~", sort = "~" }));
                    })
                    .Editable(editable => editable.Mode(GridEditMode.InCell))
                    .Events(events => { events.DataBound("dataBound"); })
                    .Pageable(pager => pager.PageSizes(new[] { 20, 50, 100, 200 }))
                    .Navigatable()
                    .ColumnMenu()
                    .Sortable()
                    .Scrollable(scrollable => scrollable.Virtual(false))
                    .Filterable()
                    .Resizable(resize => resize.Columns(true))
                    .DataSource(dataSource => dataSource
                                .Ajax()
                                .Batch(true)
                                .PageSize(50)
                                .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                                .Model(model =>
                                {
                                    model.Id(p => p.Id);
                                    model.Field(p => p.Id).Editable(false);
                                    model.Field(p => p.CompanyID).Editable(false);
                                    model.Field(p => p.Item).Editable(false);
                                    model.Field(p => p.FromHour).Editable(false);
                                    model.Field(p => p.ToHour).Editable(false);
                                    model.Field(p => p.RowCreatedTime).Editable(false);
                                    model.Field(p => p.RowCreatedUser).Editable(false);
                                    model.Field(p => p.RowLastUpdatedTime).Editable(false);
                                    model.Field(p => p.RowLastUpdatedUser).Editable(false);
                                    model.Field(p => p.HeaderID).Editable(false);
                                    model.Field(p => p.Total).Editable(false);
                                    model.Field(p => p.Register).Editable(false);
                                    model.Field(p => p.UserBlocked).Editable(false);
                                    model.Field(p => p.UserTerminated).Editable(false);
                                })
                                .Read(read => read.Action("Read_AvoidCallingTimeFrame", "AvoidCallingTimeCompany"))
                                .Update(update => update.Action("Update_AvoidCallingTimeFrame", "AvoidCallingTimeCompany")))
        )
    </div>
</div>


<div id="windowEdit" style="display:none;">
    <form class="form-horizontal">
        <div class="control-group">
            <label class="control-label">Khung giờ</label>
            <div class="controls">
                @(Html.Kendo().DropDownList()
                .Name("HeaderID")
                        .HtmlAttributes(new { style = "width:80%", @class = "checkboxpopup" })
                .DataValueField("Id")
                .DataTextField("HeaderName")
                .OptionLabel("Chọn khung giờ")
                .BindTo(ViewBag.listAvoidCallingTimeFrame))
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">Từ giờ - đến giờ</label>
            <div class="controls">
                @(Html.Kendo().DropDownList()
                .Name("DetailID")
                        .HtmlAttributes(new { style = "width:80%", @class = "checkboxpopup" })
                .DataValueField("Id")
                .DataTextField("Item")
                        .OptionLabel("Tất cả")
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetHeaderName", "AvoidCallingTimeCompany")
                            .Data("filterHeader");
                    })
                    .ServerFiltering(true);
                })
                .Enable(false)
                .AutoBind(false)
                .CascadeFrom("HeaderID"))
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">Ngày trong tuần</label>
            <div class="controls">
                <div class="row-fluid">
                    <div class="span3">
                        <label>
                            <input type="checkbox" class="ace" id="EveryDay" name="EveryDay" data-bind="value:EveryDay" onclick="checkAllpopup(this)">
                            <span class="lbl"> Tất cả</span>
                        </label>
                        <label>
                            <input type="checkbox" class="ace checkboxpopup" id="Monday" name="Monday" data-bind="value:Monday">
                            <span class="lbl"> Thứ 2</span>
                        </label>
                    </div>
                    <div class="span3">
                        <label>
                            <input type="checkbox" class="ace checkboxpopup" id="Tueday" name="Tueday" data-bind="value:Tueday">
                            <span class="lbl"> Thứ 3</span>
                        </label>
                        <label>
                            <input class="ace checkboxpopup" type="checkbox" id="Wednesday" name="Wednesday" data-bind="value:Wednesday">
                            <span class="lbl"> Thứ 4</span>
                        </label>
                    </div>
                    <div class="span3">
                        <label>
                            <input type="checkbox" class="ace checkboxpopup" id="Thusday" name="Thusday" data-bind="value:Thusday">
                            <span class="lbl"> Thứ 5</span>
                        </label>
                        <label>
                            <input type="checkbox" class="ace checkboxpopup" id="Friday" name="Friday" data-bind="value:Friday">
                            <span class="lbl"> Thứ 6</span>
                        </label>
                    </div>
                    <div class="span3">
                        <label>
                            <input type="checkbox" class="ace checkboxpopup" id="Saturday" name="Saturday" data-bind="value:Saturday">
                            <span class="lbl"> Thứ 7</span>
                        </label>
                        <label>
                            <input type="checkbox" class="ace checkboxpopup" id="Sunday" name="Sunday" data-bind="value:Sunday">
                            <span class="lbl"> Chủ nhật</span>
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">Công ty</label>
            <div class="controls">
                <select id="listCom" class='chosen-select' style="width: 318px" name="select" data-placeholder="Chọn..." multiple>
                    @foreach (var item in ViewBag.listCom)
                    {
                        <option value="@item.CompanyID">@item.ShortName</option>
                    }
                </select>
            </div>
        </div>
        <div class="form-actions" style="position: fixed; bottom: 0; width: 390px;">
            <button class="btn btn-small btn-success pull-right" style="margin-left:5px;" onclick="SaveAvoid()">Thêm @Resources.Multi.New</button>
            <button class="btn btn-small btn-grey pull-right" onclick="CloseAvoid()">@Resources.Multi.Cancel</button>
        </div>
    </form>

</div>
<style>
    .k-window .k-widget {
        z-index: 0 !important;
    }

    .k-window div.k-window-content {
        overflow: hidden;
    }
</style>

<script type="text/javascript">

    var click1 = false;
    var click2 = false;
    var click3 = false;
    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        var target = $(e.target).attr("href");
        if (target == '#home' && !click2) {
            click2 = true;
            resizeGrid();
        }
        if (target == '#accessright' && !click3) {
            click3 = true;
            $("#listComF1").chosen();
        }
    });

    function checkAllpopup(e) {
        var x = $(e).prop('checked');
        if (x == true) {
            $('.checkboxpopup').attr('disabled', true);
            $('.checkboxpopup').prop('checked', true);
        }
        else {
            $('.checkboxpopup').attr('disabled', false);
        }
    }

    $("#listComF,#DayF,#HeaderF").chosen();

    function CloseAvoid() {
        $("#windowEdit").data("kendoWindow").close();
    }

    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }

    function DeleteAvoid() {
        var listrowid = "";
        $("#Grid").find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            var c = confirm("Are you sure you want to Remove this record");
            if (c == true) {
                $.post(r + "/AvoidCallingTimeCompany/Delete_Com_AvoidCallingTime", { data: listrowid }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: 'Remove @Resources.Multi.Successfully',
                            class_name: 'gritter-success'
                        });
                        $("#Grid").data("kendoGrid").dataSource.read();
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: 'Please choose data!',
                class_name: 'gritter-error'
            });
            return false;
        }
    }

    function SaveAvoid() {
        var listCom = $("#listCom option:selected");
        var data = "";
        for (var i = 0; i < listCom.length; i++) {
            var option = listCom[i].value;
            data += option + ";;";
        }
        var avoidcalltime = $("#HeaderID").val();
        var timeframedetail = $("#DetailID").val();
        var Monday, Tueday, Wednesday, Thusday, Friday, Saturday, Sunday
        Monday = $('#Monday').is(":checked");
        Tueday = $('#Tueday').is(":checked");
        Wednesday = $('#Wednesday').is(":checked");
        Thusday = $('#Thusday').is(":checked");
        Friday = $('#Friday').is(":checked");
        Saturday = $('#Saturday').is(":checked");
        Sunday = $('#Sunday').is(":checked");
        $.post(r + "/AvoidCallingTimeCompany/Save_Com_AVoidCallingTime", {
            AvoidCallTime: avoidcalltime, TimeFrameDetail: timeframedetail, listCom: data, Monday: Monday, Tueday: Tueday,
            Wednesday: Wednesday, Thusday: Thusday, Friday: Friday, Saturday: Saturday, Sunday: Sunday
        }, function (data) {
            if (data.success) {
                $.gritter.add({
                    text: '@Resources.Multi.Save @Resources.Multi.Success.ToLower()',
                    class_name: 'gritter-success'
                });
                $("#Grid").data("kendoGrid").dataSource.read();
            }
            else {
                $.gritter.add({
                    title: '',
                    text: data.error,
                    class_name: 'gritter-error'
                });
                $("#Grid").data("kendoGrid").dataSource.read();
            }
        });
    }

    function filterHeader() {
        return {
            HeaderID: $("#HeaderID").val()
        };
    }

    function ShowEdit() {
        $("#windowEdit").kendoWindow({
            title: "Add New",
            actions: ["Close"], /*from Vlad's answer*/
            draggable: true,
            modal: true,
            resizable: false,
            height: '450px',
            width: '600px',
            visible: false /*don't show it yet*/
        }).data("kendoWindow").title("Tạo mới").center().open();
        $("#listCom,#listAvoid").chosen();
        $("#listCom").val("");
        $("#listCom_chosen").css("width", "318px");
        $("#listCom_chosen").find('div.chosen-drop ul').css('max-height', '200px');

        $("#listCom").trigger("chosen:updated");
        $("#HeaderID").data("kendoDropDownList").select(0);
        $('.checkboxpopup').prop('checked', false);
    }

    function filter() {
        grid = $("#Grid").data("kendoGrid");
        var listCom = $("#listComF option:selected");
        var day = $("#DayF option:selected");
        var header = $("#HeaderF option:selected");

        var filter = { logic: "and", filters: [] };
        var filterCom = { logic: "or", filters: [] };
        var filterday = { logic: "or", filters: [] };
        var filterheader = { logic: "or", filters: [] };

        if (listCom.length > 0) {
            for (var i = 0; i < listCom.length; i++) {
                var option = listCom[i].value;
                if (option != '') {
                    filterCom.filters.push({ field: "CompanyID", operator: "eq", value: option });
                }
            }
            filter.filters.push(filterCom);
        }
        if (header.length > 0) {
            for (var i = 0; i < header.length; i++) {
                var option = header[i].value;
                if (option != '') {
                    filterheader.filters.push({ field: "HeaderID", operator: "eq", value: option });
                }
            }
            filter.filters.push(filterheader);
        }
        if (day.length > 0) {
            for (var i = 0; i < day.length; i++) {
                var option = day[i].value;
                if (option != '') {
                    if (option == "Monday") {
                        filterday.filters.push({ field: "Monday", operator: "eq", value: true });
                    }
                    else if (option == "Tuesday") {
                        filterday.filters.push({ field: "Tuesday", operator: "eq", value: true });
                    }
                    else if (option == "Wednesday") {
                        filterday.filters.push({ field: "Wednesday", operator: "eq", value: true });
                    }
                    else if (option == "Thursday") {
                        filterday.filters.push({ field: "Thursday", operator: "eq", value: true });
                    }
                    else if (option == "Friday") {
                        filterday.filters.push({ field: "Friday", operator: "eq", value: true });
                    }
                    else if (option == "Saturday") {
                        filterday.filters.push({ field: "Saturday", operator: "eq", value: true });
                    }
                    else if (option == "Sunday") {
                        filterday.filters.push({ field: "Sunday", operator: "eq", value: true });
                    }
                }
            }
            filter.filters.push(filterday);
        }

        grid.dataSource.filter(filter);
    }


    function dataBound(e) {
        resizeGrid();
        var grid = this;
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
       .options.parameterMap({
           page: grid.dataSource.page(),
           sort: grid.dataSource.sort(),
           filter: grid.dataSource.filter()
       });
        //var $exportLink = grid.element.find('.exportClass');
        //var href = $exportLink.attr('href');
        //href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
        //href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));
        //$exportLink.attr('href', href);
    }




    $(window).resize(function () {
        resizeGrid();
    });

    function error_handler(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                    $("#Grid").data("kendoGrid").dataSource.read();
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        }
    }

    function onRequestEnd(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Update @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
    }

    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid");
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 30);
    }



    $('.icon-chevron-up').bind('click', function () {
        setInterval(function () {
            resizeGrid();
        }, 500)
    });
</script>