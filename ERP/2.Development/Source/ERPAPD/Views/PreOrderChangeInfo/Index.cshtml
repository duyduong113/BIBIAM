@{
    ViewBag.Title = "Danh sách đơn hàng chưa thanh toán có thay đổi thông tin";
    var listPaymentStatus = new List<Object>();
    listPaymentStatus.Add(new { Value = "-1", Name = "Thanh toán thất bại" });
    listPaymentStatus.Add(new { Value = "0", Name = "Chưa thanh toán" });
    listPaymentStatus.Add(new { Value = "1", Name = "Đã thanh toán" });
    ViewBag.listPaymentStatus = listPaymentStatus;
}
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="widget-header widget-header-blue widget-header-flat">
                <p style="font-size:14px">@Resources.Multi.Filter</p>
                <span class="widget-toolbar">
                    <a href="#" data-action="collapse">
                        <i class="icon-chevron-up"></i>
                    </a>
                </span>
            </div>
            <div class="widget-body">
                <div class="widget-main">
                    <div class="row-fluid">
                        <div class="span12">
                            <input class="span1" type="text" id="filterText" placeholder="Tìm theo mã đơn hàng, tên khách hàng, CMND,điện thoại…" style="width:310px" />
                            <select name="select" id="listStatus" class='chosen-select span2' style="width: 200px" data-placeholder="Chọn trạng thái…" multiple>
                                @foreach (var a in ViewBag.Status)
                                {
                                    if (a.RefID == "0" || a.RefID == "1" || a.RefID == "2" || a.RefID == "9")
                                    {
                                       <option value="@a.RefID">@a.Name</option>
                                    }
                                }
                            </select>
                            <input type="text" name="date-range-picker span2" id="CreatedAtDate" placeholder="Ngày đơn hàng(từ-đến)" style="width: 130px;height:20px;" />
                            @*<select name="select" id="listAssignee" class='chosen-select span2' data-placeholder="Chọn trạng thái thanh toán…" multiple>
                                @foreach (var a in ViewBag.listPaymentStatus)
                                {
                                    <option value="@a.Value">@a.Name</option>
                                }
                            </select>
                            <select name="select" id="listBank" class='chosen-select span2' style="width: 200px" data-placeholder="Chọn ngân hàng giải ngân…" multiple>
                                @foreach (var a in ViewBag.Bank)
                                {
                                    <option value="@a.BankID">@a.BankName</option>
                                }
                            </select>*@
                            <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="filter()" style="float:none">Tìm Kiếm</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @(Html.Kendo()
    .Grid<ERPAPD.Models.Deca_Order_Header>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.ID).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id='checkboxcheckAll'  onClick='checkAll(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=ID#' data-physical='#=PhysicalID#' data-order='#=OrderID#'/>").Width(40).Filterable(false).Sortable(false);
        columns.Bound(p => p.ID).Width(80).Filterable(false).Visible(false);
        columns.Bound(p => p.OrderID).Width(100).Title(Resources.Multi.OrderCode);
        //columns.Bound(p => p.RefID).Width(120).Title("Mã ĐH-OCM");
        columns.Bound(p => p.OrderDate).Width(120).Title("Ngày đơn hàng").Format("{0:dd/MM/yyyy HH:mm}");
        columns.Bound(p => p.Amount).Format("{0:N0}").Width(90).Title("Giá trị");
        columns.ForeignKey(p => p.Status, (System.Collections.IEnumerable)ViewBag.Status, "RefID", "Name").Width(110).Title(Resources.Multi.Status);
        columns.ForeignKey(p => p.PaymentStatus, (System.Collections.IEnumerable)ViewBag.listPaymentStatus, "Value", "Name").Width(100).Title("Thanh toán");
        //columns.Bound(p => p.PaymentDate).Width(120).Title("Ngày thanh toán").Format("{0:dd/MM/yyyy HH:mm}");
        //columns.ForeignKey(p => p.ReasonID, (System.Collections.IEnumerable)ViewBag.ListReason, "CodeID", "Description").Width(110).Title("Lý do hủy");
        //columns.Bound(p => p.CancelReason).Width(110).Title("Nội dung hủy");
        //columns.Bound(p => p.CompletedDate).Width(120).Title("Ngày hoàn tất").ClientTemplate("#if(kendo.toString(CompletedDate,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(CompletedDate,'dd/MM/yyyy HH:mm:ss') #" + "#}#");
        columns.Bound(p => p.CustomerID).Width(110).Title("Mã khách hàng");
        columns.Bound(p => p.CustomerName).Width(130).Title(Resources.Multi.CustomerName);
        columns.Bound(p => p.CompanyID).Width(110).Title("Mã công ty");
        columns.Bound(p => p.EmployeeID).Width(110).Title("Mã nhân viên");
        columns.Bound(p => p.PhysicalID).Width(90).Title("Số CMND");
        columns.Bound(p => p.MobilePhone).Width(90).Title("Điện thoại");
        //columns.Bound(p => p.Email).Width(140).Title("Email");
        //columns.Bound(p => p.PhysicalID).Hidden();
        columns.Bound(p => p.Note).Width(200).Title("Ghi chú đơn hàng");
        //columns.Bound(p => p.ShippingAddress).Width(200).Title("Địa chỉ giao hàng");
        //columns.ForeignKey(p => p.ShippingCity, (System.Collections.IEnumerable)ViewBag.City, "TerritoryID", "TerritoryName").Width(100).Title("Thành phố");
        //columns.ForeignKey(p => p.ShippingDistrict, (System.Collections.IEnumerable)ViewBag.District, "TerritoryID", "TerritoryName").Width(100).Title("Quận/huyện");
        //columns.Bound(p => p.Installment).Format("{0:N0}").Width(80).Title("Trả góp");
        //columns.Bound(p => p.PayPerMonth).Format("{0:N0}").Width(80).Title("Trả hàng tháng");
        //columns.Bound(p => p.BankFee).Format("{0:N0}").Width(110).Title("Phí chuyển đổi");
        //columns.Bound(p => p.TotalAmount).Format("{0:N0}").Width(110).Title("Tổng tiền");
        //columns.ForeignKey(p => p.Bank, (System.Collections.IEnumerable)ViewBag.Bank, "BankID", "BankName").Width(120).Title("Tên ngân hàng");
        //columns.Bound(p => p.IsLocked).Width(80).Title("Is Locked");
        columns.ForeignKey(p => p.SaleMan, (System.Collections.IEnumerable)ViewBag.SaleMan, "UserName", "UserName").Width(100).Title("Saleman");
        columns.Bound(p => p.ShopName).Width(100).Title("Tên NCC");
        columns.Bound(p => p.CreatedAt).Title(Resources.Multi.CreatedAt).Width(120).Format("{0:" + Resources.Multi.DateFormat+ " HH:mm:ss}");
        columns.Bound(p => p.CreatedBy).Title(Resources.Multi.CreatedBy).Width(100);
        columns.Bound(p => p.UpdatedAt).Title(Resources.Multi.UpdatedAt).Width(120).Format("{0:" + Resources.Multi.DateFormat+ " HH:mm:ss}");
        columns.Bound(p => p.UpdatedBy).Title(Resources.Multi.UpdatedBy).Width(100);
        columns.Bound(p => p.Source).Title("Nguồn").Width(100);
    })
    .Pageable(pager => pager.PageSizes(new[] { 20, 50, 100 }))
    .Sortable()
    .Scrollable()
    .Events(events => { events.DataBound("dataBound"); events.DetailExpand("detailExpand"); })
            .ToolBar(toolbar =>
            {
               // toolbar.Custom()
               // .Text("Yêu cầu NH mở thẻ")
               //.HtmlAttributes(new { @class = "btn btn-pink", @Href = "javascript:RequestBank()" });
               // toolbar.Custom()
               //.Text("Tạo đơn hàng (OCM)")
               //.HtmlAttributes(new { @class = "btn btn-success", @Href = "javascript:CreateOCMOrder()" });
                // toolbar.Custom()
                //.Text("Chuyển cho Telesales")
                //.HtmlAttributes(new { @class = "btn btn-warning" });
                toolbar.Custom()
               .Text("Hủy đơn hàng")
               .HtmlAttributes(new { @class = "btn btn-danger", @Href = "javascript:Cancel()" });
                toolbar.Custom()
               .Text("Hủy và đặt hàng lại")
               .HtmlAttributes(new { @class = "btn btn-warning", @Href = "javascript:CancelAndReOrder()" });
                toolbar.Custom()
                .Text(Resources.Multi.Export)
                .HtmlAttributes(new { @class = "export btn btn-info" })
                .Url(Url.Action("ExportData", "PreOrderChangeInfo", new { filter = "~", sort = "~" }));
            })
    .Navigatable()
    .Filterable()
    .Reorderable(r => r.Columns(true))
    .Resizable(r => r.Columns(true))
    .ColumnMenu()
    .Pageable(a => a.PageSizes(new int[] { 20, 50, 100 }))
    .DataSource(dataSource => dataSource

    .Ajax()
    .Batch(true)
    .Sort(a => a.Add(b => b.OrderDate).Descending())
    .Filter(f => { f.Add(a => a.Status).IsNotEqualTo("10"); })
    .PageSize(20)
        .Read(read => read.Action("Read", "PreOrderChangeInfo")))
        .ClientDetailTemplateId("orderDetail")
        )
    </div>
</div>

<script id="orderDetail" type="text/kendo-tmpl">
    <div class="row-fluid">
        <div style="width:1200px">
            @(Html.Kendo()
                .TabStrip()
                .Name("tabStrip_#=OrderID#")
                .SelectedIndex(0)
                .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
                .Items(items =>
                {
                    items.Add().Text("Sản phẩm").Content(@<text>
                        @(Html.Kendo()
        .Grid<ERPAPD.Models.Deca_Order_Detail>()
        .Name("grid2_#=OrderID#")
        .Columns(columns =>
        {
            //columns.Bound(o => o.OrderID).Title(Resources.Multi.OrderCode).Width(100);
            columns.Bound(o => o.ProductID).Title("Mã sản phẩm").Width(100);
            columns.Bound(o => o.ProductName).Title("Tên sản phẩm").Width(260);
            columns.Bound(o => o.Quantity).Title("Số lượng").Width(60);
            columns.Bound(o => o.UnitPrice).Title("Đơn giá").Width(80).Format("{0:N0}");
            columns.Bound(o => o.LineAmount).Title("Thành tiền").Width(80).Format("{0:N0}");
            columns.Bound(o => o.PriceID).Title("Mã giá").Width(80);
            columns.Bound(o => o.SKUID).Title("Mã SKU").Width(140);
            columns.Bound(p => p.UpdatedAt).Title(Resources.Multi.UpdatedAt).Width(120).Format("{0:" + Resources.Multi.DateFormat+ " HH:mm:ss}");
            columns.Bound(p => p.UpdatedBy).Title(Resources.Multi.UpdatedBy).Width(100);
        })
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(6)
         .Read(read => read.Action("Detail_Read", "OrderHeader", new { OrderID = "#=OrderID#" }))
        )
        .Pageable(pager => pager
        .PageSizes(new[] { 6, 10, 20, 100, 200, 300 }))
        .Resizable(resize => resize.Columns(true))
        .Sortable()
        .ToClientTemplate())
                    </text>);
                    items.Add().Text("Log").Content("Under Construction");
                }).ToClientTemplate())
        </div>
    </div>
</script>
<script type="text/x-kendo-template" id="buyPopup">
    <div class="row-fluid">
        <div class="span6">
            <button class="btn btn-minier btn-primary pull-right" onclick="ChangeDeliveryInfo('#=customer.PhysicalID#')" style=" top: 26px; padding: 3px 10px 3px 8px; border-radius: 2px; ">
                Thay đổi địa chỉ
            </button>
            <div class="row-fluid" style=" margin: 5px 0px 5px 0px; color: \\#2283c5;">
                <span style="font-size:12px;">THÔNG TIN NHẬN HÀNG</span>
            </div>
            <input type="hidden" id="OrderDeliveryAddress" value="#=company.Address#" />
            <input type="hidden" id="OrderDeliveryDistrict" value="#=district.TerritoryID#" />
            <input type="hidden" id="OrderDeliveryCity" value="#=city.TerritoryID#" />
            <div class="row-fluid">
                <div class="span12">
                    <ul style="margin-bottom: 5px;">
                        <li>#if(customer.CustomerID !=null && customer.CustomerID!=""){#  #=customer.CustomerID# #}else{# <span style="color:red;"> [Chưa có thẻ] </span> #}# - #=customer.Fullname# - <span style="color: \\#999">CMND: </span>#=customer.PhysicalID#</li>
                        <li id="DisplayCompanyInfo">Giao hàng tại công ty #=company.ShortName# #if(customer.BranchID != '' && customer.BranchID != null){#, chi nhánh: #=customer.BranchName# #}#</li>
                        <li><span style="color: \\#999">Địa chỉ: </span><span id="DisplayAddressInfo">#=company.Address#, #=district.TerritoryName#, #=city.TerritoryName#</span></li>
                        <li><span style="color: \\#999">Điện thoại: </span>#=customer.Phone#</li>
                    </ul>
                    #if(customer.CustomerID !=null && customer.CustomerID!=""){#
                    <textarea placeholder="Ghi chú giao hàng (Hệ thống sẽ tự động thêm thông tin trả góp, CMND và Kiểm tra hình ảnh trên CMND vào)" rows="2" cols="4" style="width: 97%; background-color: \\#FDFCE7; resize: none; " id="orderNote"></textarea>
                    #}else{#
                    @*<textarea placeholder="Ghi chú mở thẻ" rows="1" cols="4" style="width: 97%; height: 31px; background-color: \\#FFEFEF; resize: none; " id="decaNote"></textarea>*@
                    <textarea placeholder="Ghi chú giao hàng (Hệ thống sẽ tự động thêm thông tin trả góp, CMND và Kiểm tra hình ảnh trên CMND vào)" rows="2" cols="4" style="width: 97%; background-color: \\#FDFCE7; resize: none; " id="orderNote"></textarea>
                    #}#
                    <br />
                </div>
            </div>
            <div class="row-fluid" style=" margin: 10px 5px 5px 0; padding: 5px 5px 2px 0; color: \\#2283c5; ">
                <span style="font-size: 12px;">THÔNG TIN ĐẶT HÀNG</span>
            </div>
            <div class="row-fluid">
                <div class="span12">
                    <div id="listCart" style="height: 220px; overflow-y: auto; border: dotted 2px \\#CCC;">
                        #if(typeof source !='undefined' && source=='SMSMO'){#
                        <div style="padding-top: 80px; text-align: center; overflow-y: hidden !important; ">
                            <span style="font-size: 18px; color: \\#2283C5; ">Khách hàng muốn mua #=sms.ProductName#</span>
                            <br />
                            <span style="font-size: 14px; color:\\#555; ">Nhu cầu gửi lúc: #=kendo.toString(kendo.parseDate(sms.CreatedAt),'HH:mm dd/MM/yyyy')#</span>
                            <br />
                            <br />
                            <hr />
                            <span style="color: \\#d15b47;">**Thêm sản phẩm này từ danh sách bên.</span>

                        </div>
                        #}else{#
                        <div style="height: 50px; font-size: 18px; color: \\#ccc; padding-top: 100px; text-align: center; overflow-y: hidden !important; ">
                            Thêm sản phẩm từ danh sách bên.
                        </div>
                        #}#
                    </div>
                    <div id="total" style=" height: 55px; background: \\#f2f2f2; margin-bottom: 7px; padding: 10px 10px 0 15px; border-bottom: 2px dotted \\#ccc;">
                        <div class="row-fluid" style="border-bottom: 1px solid \\#ccc; min-height: 15px; height: 20px; font-weight: bold;">
                            <div class="span9">Tổng tiền</div>
                            <div class="span3 totalPrice" style="font-size: 12px;text-align:right;">0đ</div>
                        </div>
                        <div style="min-height: 15px; height: 20px; font-weight: bold; color: \\#d15b47;">
                            <div class="span9">Trả góp 12 tháng - trả hàng tháng tạm tính</div>
                            <div class="span3 totalMonth" style="font-size: 12px; text-align: right;">0đ</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row-fluid" style="display:inline-flexbox;">
                <a class="btn btn-grey btn-small" style="width: 200px;" onclick="closeBuyInfo()">
                    <i class="icon-arrow-left"></i>
                    QUAY LẠI
                </a>
                <a class="btn btn-primary btn-small" id="btnPurchaseOrder" style="width: 229px;" data-physical="#=customer.PhysicalID#">
                    <i class="icon-shopping-cart"></i>
                    ĐẶT HÀNG
                </a>
            </div>
        </div>
        <div class="span6">
            <div class="row-fluid">
                <div class="span12" style="background-color: \\#E6E6E6;padding: 3px; margin-bottom: 5px;">
                    <span class="input-icon input-icon-right" style="width:98%">
                        <input type="text" id="searchProduct1" style="width:95%" placeholder="Tìm kiếm sản phẩm theo tên" />
                        <i class="icon-search"></i>
                    </span>
                </div>
            </div>
            <div class="row-fluid">
                <div class="span12">
                    @(Html.Kendo().ListView<ERPAPD.Models.DC_SKU_Property>()
                                    .Name("listViewProduct1")
                                    .HtmlAttributes(new { @style = "border:none;overflow:auto;height:490px;" })
                                    .TagName("div")
                                    .Pageable(pageable => pageable.ButtonCount(5))
                                    .ClientTemplateId("ProductsListViewTemplate1")
                                    .Events(e => { e.DataBound("onDataBoundLV"); })
                                    .DataSource(dataSource =>
                                    {
                                        dataSource.Sort(s => s.Add(m => m.promotionPercent).Descending());
                                        dataSource.Read(read => read.Action("listViewProductRead", "Telesale"));
                                        dataSource.PageSize(20);
                                    })
                                    .ToClientTemplate()
                    )
                </div>
            </div>

        </div>
    </div>
</script>

<script type="text/x-kendo-template" id="listCartTemplate">
    #if(data.length < 1){#
    #if(IsFromSMS()){#
    <div style="padding-top: 80px; text-align: center; overflow-y: hidden !important; ">
        <span style="font-size: 18px; color: \\#2283C5; ">#=LoadRequestProduct()#</span>
        <br />
        <span style="font-size: 14px; color:\\#555; ">#=LoadRequestTime()#</span>
        <br />
        <br />
        <hr />
        <span style="color: \\#d15b47;">**Thêm sản phẩm này từ danh sách bên.</span>

    </div>
    #}else{#
    <div style="height: 50px; font-size: 18px; color: \\#ccc; padding-top: 100px; text-align: center; overflow-y: hidden !important; ">
        Thêm sản phẩm từ danh sách bên.
    </div>
    #}#
    #}else{#
    <div class="row-fluid slimScrollDiv">
        # for (var i = 0; i < data.length; i++) { #
        <div>
            <div class="profile-activity clearfix">
                <div class="span7">
                    <img class="pull-left" src="#=data[i].image#">
                    <div style="margin-top:5px;">
                        <span>#:data[i].productId# - #:data[i].colorId# - #:data[i].name#</span> - Đơn giá: #:kendo.toString(data[i].sellingPrice*1,'N0')#đ

                    </div>
                </div>
                <div class="span1">
                    <input type="number" id="quantity" min="1" max="99" style="width: 30px;" value="#=data[i].quantity#" onchange="ChangeQuantity()" class="inputQty" data-productid="#:data[i].productId#" data-colorid="#:data[i].colorId#" />
                </div>
                <div class="span3" style="text-align:right;font-weight:bold;">
                    #:kendo.toString(data[i].sellingPrice*data[i].quantity,'N0')#đ
                </div>
                <div class="span1 center-align">
                    <a class="btn btn-minier btn-danger btnRemove" data-productid="#:data[i].productId#" data-colorid="#:data[i].colorId#">
                        <i class="icon-remove"></i>
                    </a>
                </div>
            </div>
        </div>
        # } #
    </div>
    # } #

</script>

<script type="text/x-kendo-template" id="ProductsListViewTemplate1">
    <div class="row-fluid">
        <div class="span12">
            <div class="profile-activity clearfix">
                <div class="span10">
                    <img class="pull-left" src="https://deca.vn/#:thumbnailImageUrl#">
                    <div style="margin-top:5px;">
                        <a class="user" style="color:\\#555555; font-size: 12px;text-decoration:none" href="https://deca.vn/ajax/box_chi_tiet_san_pham_previewocm/index/#=productId#/119/1/" target="_blank">#:productId# - #:colorId# - #:name#</a>
                        <br />
                        Màu #:colorName# | Giá: <span style="color:red;font-weight:bold;">#:kendo.toString(sellingprice,'N0')#đ</span>
                        #if(promotionPercent>0){#
                        | <span style="text-decoration:line-through">#:kendo.toString(price,'N0')#</span> | <span style="color:red;font-weight:bold;"> -#:promotionPercent#%</span>
                        #}#
                    </div>
                </div>
                <div class="span2">
                    <div style="margin-top:3px;">
                        <a class="btn btn-minier btn-success btnAdd" data-merchantid="#:merchantID#" data-productid="#:productId#" data-colorid="#:colorId#" data-name="#:name#" data-image="https://deca.vn/#:thumbnailImageUrl#" data-sellingprice="#=sellingprice#">
                            <i class="icon-plus bigger-130"></i>
                            Thêm
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</script>

<script type="text/x-kendo-template" id="ShippingAddressTemplate">
    <div class="row-fluid">
        <div class="span12">
            <div class="row-fluid">
                <label>
                    <input name="DeliveryAddressType" type="radio" class="ace" value="OldAddress" onclick="changeAddressType('OldAddress','#=PhysicalID#')" checked>
                    <span class="lbl"> Địa chỉ hiện có</span>
                </label>
            </div>
            <div class="row-fluid">
                <select class="span12" id="slDeliveryBranchID">
                    #for(var i=0; i < shipping.length; i++){#
                    #if(i==0){#
                    <option value="#=shipping[i].BranchID#" selected>#=shipping[i].Address#, #=shipping[i].DistrictName#, #=shipping[i].CityName#</option>
                    #}else{#
                    <option value="#=shipping[i].BranchID#">#=shipping[i].Address#, #=shipping[i].DistrictName#, #=shipping[i].CityName#</option>
                    #}#
                    #}#
                </select>
            </div>
        </div>
    </div>
    <div class="row-fluid">
        <div class="span12">
            <div class="row-fluid">
                <label>
                    <input name="DeliveryAddressType" type="radio" value="NewAddress" onclick="changeAddressType('NewAddress', '#=PhysicalID#')" class="ace">
                    <span class="lbl"> Địa chỉ giao hàng @Resources.Multi.New</span>
                </label>
            </div>
            <div class="row-fluid">
                <div class="control-group">
                    <label class="control-label" for="form-field-1">Tỉnh/Thành phố</label>
                    <div class="controls">
                        @(Html.Kendo().DropDownList().Name("newDeliveryCity")
                                      .AutoBind(false)
                                      .OptionLabel("Chọn...")
                                      .HtmlAttributes(new { style = "width:100%;" })
                                      .Enable(false)
                                          .DataTextField("TerritoryName")
                                          .DataValueField("TerritoryID")
                                      .DataSource(dataSource =>
                                      {
                                          dataSource.Read(read => read.Action("GetCity", "Territory"))
                                                    .ServerFiltering(true);
                                      }).ToClientTemplate()
                        )
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="form-field-1">Quận/Huyện</label>
                    <div class="controls">
                        @(Html.Kendo().DropDownList().Name("newDeliveryDistrict")
                                      .AutoBind(false)
                                                .Enable(false)
                                      .OptionLabel("Chọn...")
                                              .HtmlAttributes(new { style = "width:100%;" })
                                          .DataTextField("TerritoryName")
                                          .DataValueField("TerritoryID")
                                                  .Events(e => e.DataBound("onDataBoundnewDeliveryDistrict"))
                                      .DataSource(dataSource =>
                                      {
                                          dataSource.Read(read => read.Action("GetDistrict", "Territory").Data("filterDistrict"))
                                                    .ServerFiltering(true);
                                      }).CascadeFrom("newDeliveryCity").ToClientTemplate()

                        )
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="form-field-8">Địa chỉ: Số nhà, tên đường, phường</label>
                    <div class="controls">
                        <textarea class="span12" id="newDeliveryAddress" placeholder="Nhập số nhà, tên đường, phường" disabled></textarea>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row-fluid">
        <button class="btn btn-primary btn-mini pull-right" onclick="SubmitChangeDeliveryInfo('#=PhysicalID#')">Thay đổi</button>
        <button class="btn btn-grey btn-mini pull-right" onclick="$('\\#DeliveryInfoWindow').data('kendoWindow').close()">Quay lại</button>
    </div>
</script>

@( Html.Kendo().Window().Name("buyWindow")
      .Title("ĐẶT HÀNG")
      .Visible(false)
      .Modal(true)
      .Actions(action => action.Pin())
      .Draggable(false)
       .Width(1000)
        .HtmlAttributes(new { @class = "span12", style = "width:100%;margin-left:0px;" })
)
@( Html.Kendo().Window().Name("DeliveryInfoWindow")
      .Title("Thay đổi địa chỉ giao hàng")
      .Visible(false)
      .Modal(true)
      .Draggable(true)
       .Width(600)
)
@*bankrequest*@
@*@( Html.Kendo().Window().Name("RequestBankWindow")
      .Title("Yêu cầu ngân hàng mở thẻ")
      .Visible(false)
      .Modal(true)
      .Draggable(false)
        // .Width(800)
)*@

@*<script id="RequestBankTemplate" type="text/kendo-tmpl">
    @using (Html.BeginForm("RequestBank", "OrderHeader", FormMethod.Post, new { id = "RequestBankForm", @style = "margin:0;" }))
    {
        <input type="hidden" name="listOrderID" value="#:listOrderID#" />
        <div class="control-group">
            <label class="control-label">Chọn ngân hàng</label>
            <div class="controls">
                @(Html.Kendo().DropDownList().Name("BankID")
                    .AutoBind(false)
                    .OptionLabel("Chọn ngân hàng...")
                    .HtmlAttributes(new { style = "width: 100%;" })
                    .DataTextField("BankName")
                    .DataValueField("BankID")
                    .DataSource(dataSource =>
                    {
                        dataSource.Read(read => read.Action("GetListBank", "OrderHeader"))
                        .ServerFiltering(true);
                    }).ToClientTemplate()
                )
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">@Resources.Multi.Content</label>
            <div class="controls">
                <textarea cols="3" rows="3" name="Description" placeholder="Nhập ghi chú cho ngân hàng"></textarea>
            </div>
        </div>
        <div class="form-actions">
            <a class="btn btn-grey btn-mini" onclick="$('\\#RequestBankWindow').data('kendoWindow').close()">@Resources.Multi.Skip</a>
            <button type="submit" id="btnRequestBank" class="btn btn-primary btn-mini">Yêu cầu mở thẻ</button>
        </div>
    }
</script>*@


<script>
    var expandedRow;
    var ShippingAddressTemplate = kendo.template($("#ShippingAddressTemplate").html());

    function detailExpand(e) {
        // Only one open at a time
        if (expandedRow != null && expandedRow[0] != e.masterRow[0]) {
            var grid = $('#grid').data('kendoGrid');
            grid.collapseRow(expandedRow);
        }
        expandedRow = e.masterRow;
    }

    function checkAll(e) {
        var x = $(e).prop('checked');
        $("#grid").find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }

    $(document).ready(function () {
        $("#listBank").css('witdh', "30%");
        $("#listBank").chosen();
        $("#listBank").val(['']);
        $('#CreatedAtDate').daterangepicker({
            format: 'YYYY/MM/DD'
        });

        $("#listAssignee").chosen();
        $("#listAssignee").val(['']);

        $("#listStatus").chosen();
        $("#listStatus").val(['']);
    })


    function Cancel() {
        var checkrowid = "";
        var listid = "";
        $("#grid").find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                checkrowid += $(this).attr("id") + "@@@@";
                listid += $(this).attr("id") + ",";
            }
        });
        listid = listid.slice(0, -1);
        if (checkrowid != null && checkrowid != "") {
            var isConfirm = confirm("Hủy đơn hàng đã chọn?");
            if (isConfirm) {
                $.post(r + "/PreOrderChangeInfo/Cancel", { listOrderID: checkrowid, ReasonID: 'COR014', OrderID: "CancelOrder", Description: 'a'}, function (data) {
                    if (!data.error) {
                        if (data.success > 0) {
                            $.gritter.add({
                                title: "@Resources.Multi.Success",
                                text: "hủy thành công " + data.success + " đơn hàng!",
                                class_name: 'gritter-success',
                            });
                            $("#grid").data("kendoGrid").dataSource.read();
                        }
                        if (data.fail > 0) {
                            $("#checkboxcheckall").prop('checked', false);
                            $.gritter.add({
                                title: "thất bại",
                                text: "hủy thất bại " + data.fail + " đơn hàng. các đơn hàng này không thể hủy!",
                                class_name: 'gritter-error',
                            });
                        }
                        $("#checkboxcheckAll").prop('checked', false);
                        //$("#btncancelorder").removeattr("disabled");
                        //$('#cancelorderwindow').data('kendowindow').close()
                    }
                    else {
                        $.gritter.add({
                            title: "@Resources.Multi.Error",
                            text: data.message,
                            class_name: 'gritter-error',
                        });
                    }
                })
            } else {
                $("#checkboxcheckAll").prop('checked', false);
            }
        } else {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Chọn đơn hàng để hủy.',
                class_name: 'gritter-error'
            });
        }
    }
    function CancelAndReOrder() {
        var checkrowid = "";
        var physicalid = "";
        var orderid = "";
        var count = 0;
        $("#grid").find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                checkrowid = $(this).attr("id") + "@@@@";
                physicalid = $(this).attr("data-physical");
                orderid = $(this).attr("data-order");
                count = count + 1;
            }
        });
        if (checkrowid != null && checkrowid != "") {
            if (count == 1) {
                var isConfirm = confirm("Hủy đơn hàng đã chọn?");
                if (isConfirm) {
                    $.post(r + "/PreOrderChangeInfo/Cancel", { listOrderID: checkrowid, ReasonID: 'COR014', OrderID: "CancelOrder", Description: 'a' }, function (data) {
                        if (!data.error) {
                            if (data.success > 0) {
                                $.gritter.add({
                                    title: "@Resources.Multi.Success",
                                    text: "hủy thành công " + data.success + " đơn hàng! Mời đặt lại!",
                                    class_name: 'gritter-success',
                                });                      
                                initBuyInfo(physicalid, orderid);
                                
                            }
                            if (data.fail > 0) {
                                $("#checkboxcheckall").prop('checked', false);
                                $.gritter.add({
                                    title: "thất bại",
                                    text: "hủy thất bại " + data.fail + " đơn hàng. các đơn hàng này không thể hủy!",
                                    class_name: 'gritter-error',
                                });
                            }
                            $("#checkboxcheckAll").prop('checked', false);
                        }
                        else {
                            $.gritter.add({
                                title: "@Resources.Multi.Error",
                                text: data.message,
                                class_name: 'gritter-error',
                            });
                        }
                    })
                }
            } else {
                $.gritter.add({
                    // (string | mandatory) the heading of the notification
                    title: '',
                    // (string | mandatory) the text inside the notification
                    text: 'Chỉ chọn 1 đơn hàng để hủy.',
                    class_name: 'gritter-error'
                });
            }
            
        } else {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Chọn đơn hàng để hủy.',
                class_name: 'gritter-error'
            });
        }
    }

    $("#filterText").keypress(function (e) {
        if (e.keyCode == 13) {
            filter();
        }
    });
    function filter() {

        grid = $("#grid").data("kendoGrid");
        var listStatus = $("#listStatus option:selected");
        var text = $('#filterText').val();
        var filter = { logic: "and", filters: [] };
        var fillterStatus = { logic: "or", filters: [] };
        var CreatedAtDate = $('#CreatedAtDate').val();

        var filtertext = { logic: "or", filters: [] };

        if (CreatedAtDate) {
            var startdate = CreatedAtDate.split('-')[0].trim();
            var enddate = CreatedAtDate.split('-')[1].trim();
            var todate = new Date(enddate);
            todate.setDate(todate.getDate() + 1);
            filter.filters.push({ field: "OrderDate", operator: "gte", value: startdate });
            filter.filters.push({ field: "OrderDate", operator: "lt", value: kendo.toString(todate, 'yyyy-MM-dd') });
        }
        if (listStatus.length > 0) {
            for (var i = 0; i < listStatus.length; i++) {
                var option = listStatus[i].value;
                if (option == '') {
                    fillterStatus.filters.push({ field: "Status", operator: "contains", value: '' });
                }
                else {
                    fillterStatus.filters.push({ field: "Status", operator: "eq", value: option });
                }
            }
            filter.filters.push(fillterStatus);
        }
        if (text) {
            filtertext.filters.push({ field: "OrderID", operator: "contains", value: text });
            filtertext.filters.push({ field: "CustomerName", operator: "contains", value: text });
            filtertext.filters.push({ field: "PhysicalID", operator: "contains", value: text });
            filtertext.filters.push({ field: "MobilePhone", operator: "contains", value: text });
            filter.filters.push(filtertext);
        }
        grid.dataSource.filter(filter);
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                    $("#grid").data("kendoGrid").dataSource.read();
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
    function onRequestEnd(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Update @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#grid").data("kendoGrid").dataSource.read();
        }
    }
    function resizeGrid() {
        //Company Type
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 30);
    }

    function dataBound(e) {
        resizeGrid();
        drawcolor();
        var grid = this;

        // ask the parameterMap to create the request object for you
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
        .options.parameterMap({
            page: grid.dataSource.page(),
            sort: grid.dataSource.sort(),
            filter: grid.dataSource.filter()
        });

        // Get the export link as jQuery object
        var $exportLink = grid.element.find('.export');


        // Get its 'href' attribute - the URL where it would navigate to
        var href = $exportLink.attr('href');

        // Update the 'page' parameter with the grid's current page
        //href = href.replace(/page=([^&]*)/, 'page=' + requestObject.page || '~');

        // Update the 'sort' parameter with the grid's current sort descriptor
        href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');

        // Update the 'pageSize' parameter with the grid's current pageSize
        //href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + grid.dataSource._pageSize);

        //update filter descriptor with the filters applied

        href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));

        // Update the 'href' attribute
        $exportLink.attr('href', href);
    }
    var columnstatus = 7;
    var columnpaymentStatus = 8;
    function drawcolor() {
        $('.k-icon.k-edit').remove();
        var data = $("#grid").data("kendoGrid").dataSource.data();
        $("td").filter(function () {
            return $(this).text() === "00:00 01/01/1900";
        }).html('');
        $("td").filter(function () {
            return $(this).text() === "01/01/1900 00:00";
        }).html('');
        // $('td:contains("01/01/1900")').html('');
        $.each(data, function (i, row) {
            // $('tr[data-uid="' + row.uid + '"] td:nth-child(' + columndetail + ')').text(row.Detail);
            // to mau status
            try {
                if (row.Status == "0") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + columnstatus + ')').css("background-color", "#EDEDED");
                }
                else if (row.Status == "1") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + columnstatus + ')').css("background-color", "#EDEDED");
                }
                else if (row.Status == "2") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + columnstatus + ')').css("background-color", "#EDEDED");
                }
                else if (row.Status == "3") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + columnstatus + ')').css("background-color", "#EDEDED");
                }
                else if (row.Status == "4") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + columnstatus + ')').css("background-color", "#E2EFDA");
                }
                else if (row.Status == "5") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + columnstatus + ')').css("background-color", "#D5F3DB").css("color", "white");
                }
                else if (row.Status == "6") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + columnstatus + ')').css("background-color", "#C6EFCE").css("color", "#126D24");
                }
                else if (row.Status == "7") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + columnstatus + ')').css("background-color", "#FFF2CC");
                }
                else if (row.Status == "8") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + columnstatus + ')').css("background-color", "#FFE699").css("color", "white");
                }
                else if (row.Status == "9") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + columnstatus + ')').css("background-color", "#F8CBAD").css("color", "white");
                }
                else if (row.Status == "10") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + columnstatus + ')').css("background-color", "#FF7D7D").css("color", "white");
                }
            }
            catch (err) {
            }
            try {
                if (row.PaymentStatus == "0") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + columnpaymentStatus + ')').css("background-color", "#abbac3").css("color", "white");
                }
                else if (row.PaymentStatus == "1") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + columnpaymentStatus + ')').css("background-color", "#3DA7DC").css("color", "white");
                }
                else if (row.PaymentStatus == "-1") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + columnpaymentStatus + ')').css("background-color", "#FF7D7D").css("color", "white");
                }
            }
            catch (err) {
            }
        });
    }
</script>
<script>
    var checkchangeAddress = 0;
    function filterDistrict() {
        var selectedCity = $("#newDeliveryCity").val();
        return {
            CityID: selectedCity
        };
    }
    var newDeliveryDistrictSelect = "";
    function onDataBoundnewDeliveryDistrict() {
        if (newDeliveryDistrictSelect != "")
            $("#newDeliveryDistrict").data("kendoDropDownList").value(newDeliveryDistrictSelect);

    }
    function changeAddressType(type, PhysicalID) {
        if (type == 'NewAddress') {
            //enable new, disable old
            $("#slDeliveryBranchID").attr("disabled", "disabled");
            $("#newDeliveryDistrict").data("kendoDropDownList").enable(true);
            $("#newDeliveryCity").data("kendoDropDownList").enable(true);
            $("#newDeliveryAddress").removeAttr("disabled");
            //check if customer already has custom address, load it
            $.post(r + "/Telesale/GetCurrentCustomDeliveryAddress/", { PhysicalID: PhysicalID }, function (data) {
                if (data.hasValue) {
                    $("#newDeliveryCity").data("kendoDropDownList").value(data.data.CityID);
                    newDeliveryDistrictSelect = data.data.DistrictID;
                    $("#newDeliveryDistrict").data("kendoDropDownList").dataSource.read();
                    $("#newDeliveryAddress").val(data.data.Address);
                }
            });
        }
        if (type == 'OldAddress') {
            //disable new
            $("#slDeliveryBranchID").removeAttr("disabled");
            $("#newDeliveryDistrict").data("kendoDropDownList").enable(false);
            $("#newDeliveryCity").data("kendoDropDownList").enable(false);
            $("#newDeliveryAddress").attr("disabled", "disabled");
        }
    }
    var buyPopupTemplate = kendo.template($("#buyPopup").html());
    var BuyInfo = [];
    var weight = 0;
    function onDataBoundLV(e) {

        $(".btnAdd").bind("click", function () {
            weight++;
            var merchantId = $(this).attr("data-merchantid");
            var productId = $(this).attr("data-productid");
            var colorId = $(this).attr("data-colorId");
            var name = $(this).attr("data-name");
            var image = $(this).attr("data-image");
            var sellingPrice = $(this).attr("data-sellingprice");
            if (_.where(BuyInfo, { productId: productId, colorId: colorId }).length > 0) {
                var filtered = _.where(BuyInfo, { productId: productId, colorId: colorId })[0];
                if (filtered.quantity < 99) {
                    BuyInfo = _.without(BuyInfo, filtered);
                    filtered.quantity = parseInt(filtered.quantity) + 1;
                    BuyInfo.push(filtered);
                }
            } else {
                var newObj = { productId: productId, colorId: colorId, name: name, image: image, sellingPrice: sellingPrice, quantity: 1, weight: weight, merchantId: merchantId };
                BuyInfo.push(newObj);
            }
            BuyInfo = _.sortBy(BuyInfo, 'weight');
            InitBuy(BuyInfo);
        });
    }

    var cartTemplate = kendo.template($("#listCartTemplate").html());

    function InitBuy(data) {
        $("#listCart").html(cartTemplate(data));

        var total = data.reduce(function (a, b) {
            return a + (b.sellingPrice * b.quantity); // return previous total plus current age
        }, 0); // initialize age with 0 that will be passed as memo
        $('.totalPrice').html($.number(total, 'n0') + "đ");
        $('.totalMonth').html($.number(total / 12, 'n0') + "đ");
        $('.btnRemove').bind("click", function () {
            var productId = $(this).attr("data-productid");
            var colorId = $(this).attr("data-colorId");
            if (_.where(BuyInfo, { productId: productId, colorId: colorId }).length > 0) {
                var filtered = _.where(BuyInfo, { productId: productId, colorId: colorId })[0];
                BuyInfo = _.without(BuyInfo, filtered);
            }
            BuyInfo = _.sortBy(BuyInfo, 'weight');
            InitBuy(BuyInfo);
        });

        $('.inputQty').bind("textchange", function () {
            var productId = $(this).attr("data-productid");
            var colorId = $(this).attr("data-colorId");
            var quantity = $(this).val();

            if (quantity == "" || quantity == null || quantity == 0) {
                quantity = 1;
            }

            if (_.where(BuyInfo, { productId: productId, colorId: colorId }).length > 0) {
                var filtered = _.where(BuyInfo, { productId: productId, colorId: colorId })[0];
                BuyInfo = _.without(BuyInfo, filtered);
                filtered.quantity = quantity;
                BuyInfo.push(filtered);
            }
            BuyInfo = _.sortBy(BuyInfo, 'weight');
            InitBuy(BuyInfo);
        })
    }

    function closeBuyInfo() {
        if (BuyInfo.length > 0) {
            var a = confirm("Bạn có chắc muốn thoát đặt hàng?");
            if (a) {
                $('#buyWindow').data('kendoWindow').close();
            } else {
                event.preventDefault();
                return false;
            }
        } else {
            $('#buyWindow').data('kendoWindow').close();
        }

    }
    var RequestSource = '';
    var RequestSMS = {};
    function IsFromSMS() {
        if (RequestSource == 'SMSMO') return true;
        else return false;
    }
    function LoadRequestProduct() {
        return "Khách hàng muốn mua " + RequestSMS.ProductName;
    }
    function LoadRequestTime() {
        return "Nhu cầu gửi lúc: " + kendo.toString(kendo.parseDate(RequestSMS.CreatedAt), 'HH:mm dd/MM/yyyy');
    }
    function initBuyInfo(physicalId, orderId) {
        $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
        $.post(r + "/PreOrderChangeInfo/getBuyInfo", { physicalId: physicalId}, function (data) {
            buyPopup = $("#buyWindow").kendoWindow({
                actions: ["Pin"],
                draggable: true,
                height: "300px",
                top: "0px",
                modal: true,
                resizable: false,
                width: "500px",
                visible: false
            }).data("kendoWindow");
            if (typeof data.source != 'undefined' && data.source != null) {
                RequestSource = data.source;
                RequestSMS = data.sms;
            }
            var popupData = {};
            buyPopup.content(buyPopupTemplate(data));
            buyPopup.center().open();
            $("#buyWindow").closest(".k-window").css({
                top: 0
            });

            $("#searchProduct1").bind("textchange", function () {
                listView = $("#listViewProduct1").data("kendoListView");
                var text = $('#searchProduct1').val();
                var filter = { logic: "and", filters: [] };
                var filtertext = { logic: "or", filters: [] };

                if (text) {
                    filtertext.filters.push({ field: "name", operator: "contains", value: text });
                    filtertext.filters.push({ field: "colorName", operator: "contains", value: text });
                    filter.filters.push(filtertext);
                }
                listView.dataSource.filter(filter);
            });
            BuyInfo = [];

            //dat hang
            $("#btnPurchaseOrder").bind("click", function () {
                var data = BuyInfo;
                if (data.length > 0) {
                    var isConfirm = confirm("Đồng ý đặt hàng?");
                    if (isConfirm) {
                        $("#btnPurchaseOrder").attr("disabled", "disabled");
                        $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
                        var physicalId = $(this).attr("data-physical");
                        var note = $("#orderNote").val();
                        $.post(r + "/PreOrderChangeInfo/CreateOrder", { OrderID_Old: orderId, listdata: data, note: note, checkchangeAddress: checkchangeAddress }, function (data) {
                            if (data.success) {
                                $.gritter.add({
                                    // (string | mandatory) the heading of the notification
                                    title: 'Tạo đơn hàng @Resources.Multi.Success.ToLower()',
                                    // (string | mandatory) the text inside the notification
                                    text: "Đặt đơn hàng thành công: " + data.orderId + " - " + $.number(data.Amount),
                                    class_name: 'gritter-success'
                                });
                                if (data.ocmMessage) {
                                    $.gritter.add({
                                        // (string | mandatory) the heading of the notification
                                        title: 'Lỗi tạo đơn hàng từ OCM',
                                        // (string | mandatory) the text inside the notification
                                        text: data.ocmMessage,
                                        class_name: 'gritter-error'
                                    });
                                }
                                $('#buyWindow').data('kendoWindow').close();
                                $("#grid").data("kendoGrid").dataSource.read();
                                
                            } else {
                                $.gritter.add({
                                    // (string | mandatory) the heading of the notification
                                    title: "@Resources.Multi.Error",
                                    // (string | mandatory) the text inside the notification
                                    text: data.error,
                                    class_name: 'gritter-error'
                                });
                                $("#btnPurchaseOrder").removeAttr("disabled");
                            }
                        });
                    } else {
                        return false;
                    }
                } else {
                    $.gritter.add({
                        // (string | mandatory) the heading of the notification
                        title: "@Resources.Multi.Error",
                        // (string | mandatory) the text inside the notification
                        text: 'Vui lòng chọn sản phẩm',
                        class_name: 'gritter-error'
                    });
                    $("#btnPurchaseOrder").removeAttr("disabled");
                }
            });

            function closeBuyInfo() {
                if (BuyInfo.length > 0) {
                    confirm("Bạn có chắc muốn thoát đặt hàng?");
                    if (confirm) {
                        $('#buyWindow').data('kendoWindow').close();
                    } else {
                    }
                } else {
                    $('#buyWindow').data('kendoWindow').close();
                }

            }

        });
    }

    function ChangeDeliveryInfo(PhysicalID) {
        //get shipping address
        $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);

        $.post(r + "/PreOrderChangeInfo/GetShippingAddress", { PhysicalID: PhysicalID }, function (data) {
            if (data) {
                data.PhysicalID = PhysicalID;
                var wnd = $("#DeliveryInfoWindow").data("kendoWindow");
                wnd.content(ShippingAddressTemplate(data));
                wnd.center().open();
            } else {
                $.gritter.add({
                    // (string | mandatory) the heading of the notification
                    title: "@Resources.Multi.Error",
                    // (string | mandatory) the text inside the notification
                    text: 'Không lấy được thông tin giao hàng của khách hàng!',
                    class_name: 'gritter-error'
                });
            }
        });

    }

    function SubmitChangeDeliveryInfo(PhysicalID) {
        var type = $("input[name='DeliveryAddressType']:checked").val();
        if (type == "NewAddress") {
            var address = $('#newDeliveryAddress').val();
            var CityName = $("#newDeliveryCity").data("kendoDropDownList").text();
            var CityID = $("#newDeliveryCity").data("kendoDropDownList").value();
            var DistrictName = $("#newDeliveryDistrict").data("kendoDropDownList").text();
            var DistrictID = $("#newDeliveryDistrict").data("kendoDropDownList").value();
            address = address + ", " + DistrictName + ', ' + CityName;
            //insert or update address
            if (address && CityID && DistrictID) {
                $.post(r + "/PreOrderChangeInfo/SaveCustomDeliveryAddress", { PhysicalID: PhysicalID, Address: address, CityID: CityID, DistrictID: DistrictID }, function (data) {
                    if (data.success) {
                        checkchangeAddress = 1;
                        $('#DisplayCompanyInfo').hide();
                        $('#DisplayAddressInfo').text(address);
                        $('#OrderDeliveryCity').val(CityID);
                        $('#OrderDeliveryDistrict').val(DistrictID);
                        $('#OrderDeliveryAddress').val(address);
                        $('#DeliveryInfoWindow').data('kendoWindow').close();
                    }
                    else {
                        $.gritter.add({
                            // (string | mandatory) the heading of the notification
                            title: "@Resources.Multi.Error",
                            // (string | mandatory) the text inside the notification
                            text: data.message,
                            class_name: 'gritter-error'
                        });
                    }
                })
            }
        } else if (type == "OldAddress") {
            var branchID = $('#slDeliveryBranchID').val();
            if (branchID) {
                $.post(r + '/PreOrderChangeInfo/GetAddressByBranchID', { BranchID: branchID }, function (data) {
                    if (data) {
                        $('#DisplayCompanyInfo').show();
                        $('#DisplayCompanyInfo').text("Giao hàng tại công ty " + data.CompanyName + " chi nhánh: " + data.BranchName);
                        $('#DisplayAddressInfo').text(data.Address + ", " + data.DistrictName + ', ' + data.CityName);
                        $('#OrderDeliveryCity').val(data.CityID);
                        $('#OrderDeliveryDistrict').val(data.DistrictID);
                        $('#OrderDeliveryAddress').val(data.Address);
                        $('#DeliveryInfoWindow').data('kendoWindow').close()
                    } else {
                        $.gritter.add({
                            // (string | mandatory) the heading of the notification
                            title: "@Resources.Multi.Error",
                            // (string | mandatory) the text inside the notification
                            text: 'Không lấy được thông tin giao hàng của khách hàng!',
                            class_name: 'gritter-error'
                        });
                    }
                })
            }
        }
    }
</script>