@{
    Layout = null;
    bool AllowCreate = (ViewBag.Assets.Create != null && ViewBag.Assets.Create);
    bool AllowUpdate = (ViewBag.Assets.Update != null && (bool)ViewBag.Assets.Update);
    bool AllowExport = (ViewBag.Assets.Export != null && (bool)ViewBag.Assets.Export);
    bool AllowImport = (ViewBag.Assets.Import != null && (bool)ViewBag.Assets.Import);
    bool AllowDelete = (ViewBag.Assets.Delete != null && (bool)ViewBag.Assets.Delete);
}

<style>
    .k-icon k-i-excel {
        display: none !important;
    }
</style>
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="widget-header widget-header-blue widget-header-flat">
                <p style="font-size:14px">Lọc dữ liệu theo điều kiện</p>

                <span class="widget-toolbar">
                    <a href="#" data-action="collapse">
                        <i class="icon-chevron-up"></i>
                    </a>
                </span>
            </div>
            <div class="widget-body">
                <div class="widget-main">
                    <div class="row-fluid">
                        <div class="span12">
                            <input class="span1" type="text" id="filterText" placeholder="Tìm khách hàng theo MNV, CMND, Số điện thoại, tên, email…" style="width:250px" />

                            <select name="select" id="listCompany" class='chosen-select span2' style="width: 200px" data-placeholder="Chọn công ty…" multiple>
                                @foreach (var a in ViewBag.listCompany)
                                {
                                    <option value="@a.Id">@a.ShortName</option>
                                }
                            </select>

                            <select name="select" id="listBank" class='chosen-select span2' data-placeholder="Chọn nhận lương qua ngân hàng…" multiple>
                                @foreach (var a in ViewBag.Bank)
                                {
                                    <option value="@a.BankID">@a.BankName</option>
                                }
                            </select>


                            <select name="select" id="listSourceType" class='chosen-select span2' data-placeholder="Chọn nguồn…" multiple>
                                @foreach (var a in ViewBag.SourceType)
                                {
                                    <option value="@a.CodeID">@a.Description</option>
                                }
                            </select>

                            <select name="select" id="listCreditCardStatus" class='chosen-select span2' data-placeholder="Chọn trạng thái mở thẻ…" multiple>
                                @foreach (var a in ViewBag.CreditCardStatus)
                                {
                                    <option value="@a.CodeID">@a.Description</option>
                                }
                            </select>

                            <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="filter()" style="float:none">Lọc dữ liệu</button>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @(Html.Kendo()
    .Grid<DecaPay.Models.Deca_Potential_Customer>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.Id).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />").ClientTemplate("#if(CustomerID==null){# <input style='text-align:center' class='checkrowid' type='checkbox' id='#=Id#'  data-physical='#=PhysicalID#'/>#}#").Width(35).Filterable(false).Sortable(false);
        columns.Bound(p => p.Id).Width(80).Visible(false);
        columns.ForeignKey(p => p.CreditCardStatus, (System.Collections.IEnumerable)ViewBag.CreditCardStatus, "CodeID", "Description").Width(140).Title("Trạng thái mở thẻ").EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.CustomerID).Width(100).Title("Mã KH");
        columns.ForeignKey(p => p.CompanyID, (System.Collections.IEnumerable)ViewBag.listCompany, "Id", "ShortName").EditorTemplateName("GridNullableForeignKey").Title("Công ty").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).Width(120);
        columns.Bound(p => p.EmployeeID).Width(100).Title("MNV").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Fullname).Width(150).Title("Họ tên").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.ForeignKey(p => p.Sex, (System.Collections.IEnumerable)ViewBag.Gender, "CodeID", "Description").EditorTemplateName("GridNullableForeignKey").Width(80).Title("Giới tính").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Birthday).Width(90).Format("{0:dd/MM/yyyy}").EditorTemplateName("Date").Title("Ngày sinh").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.PhysicalID).Width(90).Title("CMND").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Phone).Width(100).Title("Điện thoại").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Email).Width(150).Title("Email").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Address).Width(250).Title("Địa chỉ").EditorTemplateName("Texarea").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.ForeignKey(p => p.HomeTown, (System.Collections.IEnumerable)ViewBag.City, "TerritoryID", "TerritoryName").EditorTemplateName("GridNullableForeignKey").Width(100).Title("Tỉnh").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Department).Width(180).Title("Phòng ban").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Position).Width(120).Title("Chức vụ").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.StartWorkingDate).EditorTemplateName("Date").Format("{0:dd/MM/yyyy}").Width(120).Title("Ngày vào làm").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.ForeignKey(p => p.Education, (System.Collections.IEnumerable)ViewBag.Education, "CodeID", "Description").EditorTemplateName("GridNullableForeignKey").Width(150).Title("Trình độ").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Income).Width(100).Format("{0:N0}").Title("Thu nhập").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.ForeignKey(p => p.PayrollBank, (System.Collections.IEnumerable)ViewBag.Bank, "BankID", "BankName").Width(110).Title("Nhận lương qua").EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.CreditLimit).Width(100).Format("{0:N0}").Title("Tín dụng").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.ForeignKey(p => p.RequestCreditBank, (System.Collections.IEnumerable)ViewBag.Bank, "BankID", "BankName").Width(110).Title("Y/c Ngân hàng").EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.ForeignKey(p => p.SourceType, (System.Collections.IEnumerable)ViewBag.SourceType, "CodeID", "Description").Width(110).Title("Nguồn").EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.DecaNote).Width(200).Title("Deca ghi chú");
        columns.Bound(p => p.BankNote).Width(200).Title("Ngân hàng ghi chú");
        columns.Bound(p => p.Active).Width(100).Title("Kích hoạt").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.CreatedAt).Width(120).Format("{0:dd/MM/yyyy HH:mm:ss}");
        columns.Bound(p => p.CreatedBy).Width(100);
        columns.Bound(p => p.UpdatedAt).Width(120).Format("{0:dd/MM/yyyy HH:mm:ss}");
        columns.Bound(p => p.UpdatedBy).Width(100);
    })
    .ToolBar(tools =>
    {
        tools.Create().Text("Tạo mới");
        tools.Save().SaveText("Lưu lại").CancelText("Hủy bỏ");
        tools.Custom()
                  .Text("Xóa bỏ")
                  .HtmlAttributes(new { @id = "btnDelete", @class = "btn btn-danger", @style = "display:" + (AllowDelete ? "inline-block" : "none"), @Href = "javascript:Delete()" });

        tools.Custom()
                .Text("Xuất ra Excel")
                .HtmlAttributes(new { @class = "export btn btn-info" })
                .Url(Url.Action("ExportData", "PotentialCustomer", new { filter = "~", sort = "~" }));
        //tools.Excel().HtmlAttributes(new { @class = "export btn btn-info", @style = "margin-left:0.1em;display:" + (AllowExport ? "inline-block" : "none") });
        tools.Custom()
               .Text("Tải mẫu nhập liệu")
               .HtmlAttributes(new { @class = "btn" })
               .Url(Url.Action("ExportTemplate", "PotentialCustomer"));
        tools.Custom()
            .Text("Nhập từ Excel")
            .HtmlAttributes(new { @class = "btn btn-purple", id = "import", @style = "display:" + (AllowUpdate ? "inline-block" : "none"), Href = "javascript:void(0)" });
        tools.Custom()
            .Text("Yêu cầu NH mở thẻ")
            .HtmlAttributes(new { @class = "btn btn-pink", @Href = "javascript:RequestBank()" });
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable(pager => pager.PageSizes(new[] { 20, 50, 100 }))
    .Sortable()
    .Events(events => { events.DataBound("dataBound"); })
    .Scrollable()
    .Navigatable()
    .Filterable()
                //.Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                //.Excel(excel => excel
                //.FileName("PotentialCustomerList.xlsx")
                //.Filterable(true)
                //.ProxyURL(Url.Action("Excel_Export", "PotentialCustomer")))
    .Reorderable(r => r.Columns(true))
    .Resizable(r => r.Columns(true))
    .ColumnMenu()
    .DataSource(dataSource => dataSource
    .Ajax()
    .Batch(true)
    .PageSize(20)
    .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })

    .Model(model =>
    {
        model.Id(p => p.Id);
        model.Field(p => p.Id).Editable(false);
        model.Field(p => p.Active).DefaultValue(true);
        model.Field(p => p.CustomerID).Editable(false);
        model.Field(p => p.CreatedAt).Editable(false);
        model.Field(p => p.CreatedBy).Editable(false);
        model.Field(p => p.UpdatedAt).Editable(false);
        model.Field(p => p.UpdatedBy).Editable(false);
    })
    .Create(create => create.Action("Create", "PotentialCustomer"))
    .Read(read => read.Action("Read", "PotentialCustomer"))
    .Update(update => update.Action("Update", "PotentialCustomer"))
    .Destroy("Destroy", "PotentialCustomer"))

        )
    </div>
</div>

@(Html.Kendo()
      .Window()
      .Name("window")
      .Title("ImportForm")
      .Content(@<text>
        <div class="row-fluid">
            <div class="span4">
                <form id="importform" action="@Url.Content("~/PotentialCustomer/ImportFromExcel")" method="post" class="form-horizontal" enctype="multipart/form-data" style="margin-bottom:0px;">
                    <input type="file" id="FileUpload" name="FileUpload" />
                </form>
            </div>
            <button type="button" id="btnImport" class="btn btn-purple btn-small span2" style="float: right;">Import</button>
        </div>
        <div class="row-fluid">
            <a id="btndownload" style="display: none" class="btn btn-warning btn-small">Download template with error</a>
        </div>
    </text>)
      .Draggable()
      .Resizable()
      .Visible(false)
      .Width(1000)
      .Actions(actions => actions.Close())

)

@*bankrequest*@
@( Html.Kendo().Window().Name("RequestBankWindow")
      .Title("Yêu cầu ngân hàng mở thẻ")
      .Visible(false)
      .Modal(true)
      .Draggable(false)
        // .Width(800)
)

<script id="RequestBankTemplate" type="text/kendo-tmpl">
    @using (Html.BeginForm("RequestBank", "OrderHeader", FormMethod.Post, new { id = "RequestBankForm", @style = "margin:0;" }))
    {
        <input type="hidden" name="listOrderID" value="#:listOrderID#" />
        <div class="control-group">
            <label class="control-label">Chọn ngân hàng</label>
            <div class="controls">
                @(Html.Kendo().DropDownList().Name("BankID")
                    .AutoBind(false)
                    .OptionLabel("Chọn ngân hàng...")
                    .HtmlAttributes(new { style = "width: 100%;" })
                    .DataTextField("BankName")
                    .DataValueField("BankID")
                    .DataSource(dataSource =>
                    {
                        dataSource.Read(read => read.Action("GetListBank", "OrderHeader"))
                        .ServerFiltering(true);
                    }).ToClientTemplate()
                )
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">Nội dung</label>
            <div class="controls">
                <textarea cols="3" rows="3" name="Description" placeholder="Nhập ghi chú cho ngân hàng"></textarea>
            </div>
        </div>
        <div class="form-actions">
            <a class="btn btn-grey btn-mini" onclick="$('\\#RequestBankWindow').data('kendoWindow').close()">Bỏ qua</a>
            <button type="submit" id="btnRequestBank" class="btn btn-primary btn-mini">Yêu cầu mở thẻ</button>
        </div>
    }
</script>

<script>
    var RequestBankTemplate = kendo.template($("#RequestBankTemplate").html());
    $(document).ready(function () {
        $("#listCompany").css('witdh', "20%");
        $("#listCompany").chosen();
        $("#listCompany").val(['']);

        $("#listBank").css('witdh', "20%");
        $("#listBank").chosen();
        $("#listBank").val(['']);

        $("#listSourceType").css('witdh', "20%");
        $("#listSourceType").chosen();
        $("#listSourceType").val(['']);

        $("#listCreditCardStatus").css('witdh', "20%");
        $("#listCreditCardStatus").chosen();
        $("#listCreditCardStatus").val(['']);
    })

    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#grid').find(".k-grid-content .checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    function Delete() {
        var checkrowid = "";
        $("#grid").find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                checkrowid += $(this).attr("id") + "@@@@";
            }
        });
        if (checkrowid != null && checkrowid != "") {
            var cf = confirm("Are you sure you want to DELETE this record");
            if (cf == true) {
                $.post(r + "/PotentialCustomer/Delete", { data: checkrowid }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: "Delete successfully " + data.message + " records!",
                            class_name: 'gritter-success',
                        });
                        $("#grid").data("kendoGrid").dataSource.read();
                        $("#checkboxcheckAll").prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            text: data.error,
                            class_name: 'gritter-error',
                        });

                    }
                });
            }
            else {
                return false;
            }
        } else {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Please select data',
                class_name: 'gritter-error'
            });
        }
    }

    function RequestBank() {
        var checkrowid = "";
        $("#grid").find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                checkrowid += $(this).attr("data-physical") + "@@@@";
            }
        });
        if (checkrowid != null && checkrowid != "") {
            var wnd = $("#RequestBankWindow").data("kendoWindow");
            var data = {
                listOrderID: checkrowid,
            };
            wnd.content(RequestBankTemplate(data));
            wnd.center().open();
            $("#RequestBankForm").validate({
                // Rules for form validation
                submitHandler: function (form) {
                    $(form).ajaxSubmit({
                        beforeSend: function () {
                            $("#btnRequestBank").attr("disabled", "disabled")
                        },
                        success: function (data) {
                            if (!data.error) {
                                if (data.success >= 0) {
                                    $.gritter.add({
                                        title: "Thành công",
                                        text: "Gửi thành công " + data.success + " khách hàng!",
                                        class_name: 'gritter-success',
                                    });
                                    $("#grid").data("kendoGrid").dataSource.read();
                                }
                                if (data.fail > 0) {
                                    $.gritter.add({
                                        title: "Thất bại",
                                        text: "Gửi thất bại " + data.fail + " khách hàng.",
                                        class_name: 'gritter-error',
                                    });
                                }
                                $("#checkboxcheckAll").prop('checked', false);
                                $("#btnRequestBank").removeAttr("disabled");
                                $('#RequestBankWindow').data('kendoWindow').close()
                            }
                            else {
                                $.gritter.add({
                                    title: "Lỗi",
                                    text: data.message,
                                    class_name: 'gritter-error',
                                });
                            }
                        },
                        complete: function () {
                            $("#btnRequestBank").removeAttr("disabled");
                        }
                    });
                    return false;
                }
            });

        } else {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Chọn yêu cầu mở thẻ',
                class_name: 'gritter-error'
            });
        }
    }

    function filter() {

        grid = $("#grid").data("kendoGrid");
        var listCompany = $("#listCompany option:selected");
        var listBank = $('#listBank option:selected');

        var listCreditCardStatus = $("#listCreditCardStatus option:selected");
        var listSourceType = $('#listSourceType option:selected');

        var text = $('#filterText').val();
        var filter = { logic: "and", filters: [] };
        var fillterCompany = { logic: "or", filters: [] };
        var fillterBank = { logic: "or", filters: [] }
        var fillterCreditCardStatus = { logic: "or", filters: [] }
        var fillterSourceFile = { logic: "or", filters: [] }

        var filtertext = { logic: "or", filters: [] };


        if (listCompany.length > 0) {
            for (var i = 0; i < listCompany.length; i++) {
                var option = listCompany[i].value;
                if (option == '') {
                    fillterCompany.filters.push({ field: "CompanyID", operator: "contains", value: '' });
                }
                else {
                    fillterCompany.filters.push({ field: "CompanyID", operator: "eq", value: option });
                }
            }
            filter.filters.push(fillterCompany);
        }

        if (listCreditCardStatus.length > 0) {
            for (var i = 0; i < listCreditCardStatus.length; i++) {
                var option = listCreditCardStatus[i].value;
                if (option == '') {
                    fillterCreditCardStatus.filters.push({ field: "CreditCardStatus", operator: "contains", value: '' });
                }
                else {
                    fillterCreditCardStatus.filters.push({ field: "CreditCardStatus", operator: "eq", value: option });
                }
            }
            filter.filters.push(fillterCreditCardStatus);
        }

        if (listSourceType.length > 0) {
            for (var i = 0; i < listSourceType.length; i++) {
                var option = listSourceType[i].value;
                if (option == '') {
                    fillterSourceFile.filters.push({ field: "SourceType", operator: "contains", value: '' });
                }
                else {
                    fillterSourceFile.filters.push({ field: "SourceType", operator: "eq", value: option });
                }
            }
            filter.filters.push(fillterSourceFile);
        }

        if (listBank.length > 0) {
            for (var i = 0; i < listBank.length; i++) {
                var option = listBank[i].value;
                if (option == '') {
                    fillterBank.filters.push({ field: "PayrollBank", operator: "contains", value: '' });
                }
                else {
                    fillterBank.filters.push({ field: "PayrollBank", operator: "eq", value: option });
                }
            }
            filter.filters.push(fillterBank);
        }
        if (text) {
            filtertext.filters.push({ field: "EmployeeID", operator: "contains", value: text });
            filtertext.filters.push({ field: "PhysicalID", operator: "contains", value: text });
            filtertext.filters.push({ field: "FullName", operator: "contains", value: text });
            filtertext.filters.push({ field: "Phone", operator: "contains", value: text });
            filtertext.filters.push({ field: "Email", operator: "contains", value: text });
            filter.filters.push(filtertext);
        }

        grid.dataSource.filter(filter);
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                    $("#grid").data("kendoGrid").dataSource.read();
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
    function onRequestEnd(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Update successfully',
                class_name: 'gritter-success'
            });
            $("#grid").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Create successfully',
                class_name: 'gritter-success'
            });
            $("#grid").data("kendoGrid").dataSource.read();
        }
    }

    $("#filterText").keypress(function (e) {
        if (e.keyCode == 13) {
            filter();
        }
    });
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 50);
    }

    $(window).resize(function () {
        resizeGrid();
    });

    function dataBound() {
        resizeGrid();

        var grid = this;

        // ask the parameterMap to create the request object for you
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
        .options.parameterMap({
            page: grid.dataSource.page(),
            sort: grid.dataSource.sort(),
            filter: grid.dataSource.filter()
        });

        // Get the export link as jQuery object
        var $exportLink = grid.element.find('.export');


        // Get its 'href' attribute - the URL where it would navigate to
        var href = $exportLink.attr('href');

        // Update the 'page' parameter with the grid's current page
        //href = href.replace(/page=([^&]*)/, 'page=' + requestObject.page || '~');

        // Update the 'sort' parameter with the grid's current sort descriptor
        href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');

        // Update the 'pageSize' parameter with the grid's current pageSize
        //href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + grid.dataSource._pageSize);

        //update filter descriptor with the filters applied

        href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));

        // Update the 'href' attribute
        $exportLink.attr('href', href);
    }

    $(document).ready(function () {
        $('#import').bind('click', function () {
            $("#window").kendoWindow({
                actions: {}, /*from Vlad's answer*/
                draggable: true,
                height: "300px",
                modal: true,
                resizable: false,
                width: "500px",
                visible: false /*don't show it yet*/
            }).data("kendoWindow").center().open();
            $('#FileUpload').ace_file_input({
                no_file: 'No File ...',
                btn_choose: 'Choose',
                btn_change: 'Change',
                droppable: false,
                onchange: null,
                thumbnail: false //| true | large
                //whitelist:'gif|png|jpg|jpeg'
                //blacklist:'exe|php'
                //onchange:''
                //
            });
        });

        //$('#import').attr('data-toggle', 'modal');
        $('#btnImport').bind('click', function () {
            $('#importform').submit();
        });

        (function () {
            $("#importform").ajaxForm({
                beforeSend: function () {
                    $("#window").data("kendoWindow").close();
                    $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
                },
                uploadProgress: function (event, position, total, percentComplete) {
                },
                success: function (data) {
                    if (data.success) {
                        $("#grid").data("kendoGrid").dataSource.read();
                        $.gritter.add({
                            // (string | mandatory) the heading of the notification
                            title: '',
                            // (string | mandatory) the text inside the notification
                            text: 'Import successfully ' + data.total + ' record(s)',
                            class_name: 'gritter-success'
                        });
                        if (data.totalError > 0) {
                            $("#window").data("kendoWindow").open();
                            $('#btndownload').css('display', 'inline-block');
                            $('#btndownload').attr('href', r + "/PotentialCustomer/Download?file=" + data.link);
                        }
                        else {
                            $('#btndownload').css('display', 'none');
                            $('#btndownload').attr('href', "");
                        }
                    }
                    else {
                        $.gritter.add({
                            // (string | mandatory) the heading of the notification
                            title: '',
                            // (string | mandatory) the text inside the notification
                            text: data.message,
                            class_name: 'gritter-error'
                        });
                    }
                },
                complete: function (xhr) {

                }
            });
        })();
    });
</script>

