@{
    ViewBag.Title = "Portal | Customer";

    bool AllowCreate = (ViewBag.Assets.Create != null && ViewBag.Assets.Create);
    bool AllowUpdate = (ViewBag.Assets.Update != null && (bool)ViewBag.Assets.Update);
    bool AllowExport = (ViewBag.Assets.Export != null && (bool)ViewBag.Assets.Export);
    bool AllowImport = (ViewBag.Assets.Import != null && (bool)ViewBag.Assets.Import);
}
<style>
    .k-icon k-i-excel {
        display: none !important;
    }
</style>
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="widget-header widget-header-blue widget-header-flat">
                <p style="font-size:14px">@Resources.Multi.Filter</p>

                <span class="widget-toolbar">
                    <a href="#" data-action="collapse">
                        <i class="icon-chevron-up"></i>
                    </a>
                </span>
            </div>
            <div class="widget-body">
                <div class="widget-main">
                    <div class="row-fluid">
                        <div class="span12">
                            <input class="span1" type="text" id="filterText" placeholder="Tìm khách hàng theo MNV, CMND, Số điện thoại, tên, email…" style="width:250px" />

                            <select name="select" id="listCompany" class='chosen-select span2' style="width: 200px" data-placeholder="Chọn công ty…" multiple>
                                @foreach (var a in ViewBag.listCompany)
                                {
                                    <option value="@a.Id">@a.ShortName</option>
                                }
                            </select>

                            <select name="select" id="listHometown" class='chosen-select span2' data-placeholder="Chọn quê quán..." multiple>
                                @foreach (var a in ViewBag.City)
                                {
                                    <option value="@a.TerritoryID">@a.TerritoryName</option>
                                }
                            </select>

                            <select name="select" id="listBank" class='chosen-select span2' data-placeholder="Chọn ngân hàng cấp tín dụng……" multiple>
                                @foreach (var a in ViewBag.Bank)
                                {
                                    <option value="@a.BankID">@a.BankName</option>
                                }
                            </select>

                            <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="filter()" style="float:none">@Resources.Multi.Filter</button>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @(Html.Kendo()
    .Grid<ERPAPD.Models.Deca_Customer>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.Id).Width(80).Visible(false);
        columns.Bound(p => p.CustomerID).Width(100).Title("Mã kh").Locked();
        columns.ForeignKey(p => p.CompanyID, (System.Collections.IEnumerable)ViewBag.listCompany, "Id", "ShortName").EditorTemplateName("Company").Title("Công ty").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).Width(120).Locked();
        columns.ForeignKey(p => p.BranchID, (System.Collections.IEnumerable)ViewBag.Branch, "BranchID", "BranchName").Width(120).Title("Chi nhánh").EditorTemplateName("Branch").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).Locked();
        columns.Bound(p => p.EmployeeID).Width(140).Title("Mã nhân viên").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).Locked();
        columns.Bound(p => p.Fullname).Width(150).Title("Họ tên").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.ForeignKey(p => p.Sex, (System.Collections.IEnumerable)ViewBag.Gender, "CodeID", "Description").EditorTemplateName("GridNullableForeignKey").Width(80).Title("Giới tính").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Birthday).Width(100).Format("{0:" + Resources.Multi.DateFormat + "}").EditorTemplateName("Date").Title("Ngày sinh").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.PhysicalID).Width(100).Title(Resources.Multi.ID).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Phone).Width(100).Title("Điện thoại").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.MobilePhone).Width(100).Title("ĐTGD").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Email).Width(100).Title("Email").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Address).Width(180).Title("Địa chỉ").EditorTemplateName("Texarea").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.ForeignKey(p => p.HomeTown, (System.Collections.IEnumerable)ViewBag.City, "TerritoryID", "TerritoryName").EditorTemplateName("GridNullableForeignKey").Width(100).Title("Tỉnh").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Department).Width(180).Title("Phòng ban").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Position).Width(80).Title("Chức vụ").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.StartWorkingDate).EditorTemplateName("Date").Format("{0:" + Resources.Multi.DateFormat + "}").Width(120).Title("Ngày vào làm").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.ForeignKey(p => p.Education, (System.Collections.IEnumerable)ViewBag.Education, "CodeID", "Description").EditorTemplateName("GridNullableForeignKey").Width(100).Title("Trình độ").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Income).Width(100).Format("{0:N0}").Title("Thu nhập").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.ForeignKey(p => p.PayrollBank, (System.Collections.IEnumerable)ViewBag.Bank, "BankID", "BankName").Width(100).Title("Nhân lương qua NH").EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.CreditLimit).Width(100).Format("{0:N0}").Title("Tính dụng").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.ForeignKey(p => p.CreditBank, (System.Collections.IEnumerable)ViewBag.Bank, "BankID", "BankName").Width(100).Title("Cấp bởi").EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.ForeignKey(p => p.CardType, (System.Collections.IEnumerable)ViewBag.listCardType, "CodeID", "Description").Width(100).Title("Loại thẻ").EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.ForeignKey(p => p.CardRanking, (System.Collections.IEnumerable)ViewBag.listCardRanking, "CodeID", "Description").Width(100).Title("Nhóm thẻ").EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.ForeignKey(p => p.Status, (System.Collections.IEnumerable)ViewBag.Status, "CodeID", "Description").Width(100).Title("Trạng thái tài khoản").EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.IsBlacklist).Width(100).Title("Blacklist").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.ExistedToken).Width(100).Title("Token").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.OnlineAccount).Width(100).Title("Tài khoản portal.vn").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Active).Width(100).Title("Kích hoạt").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.CreatedAt).Width(120).Format("{0:" + Resources.Multi.DateFormat + " HH:mm:ss}").Title(Resources.Multi.CreatedAt);
        columns.Bound(p => p.CreatedBy).Width(100);
        columns.Bound(p => p.UpdatedAt).Width(120).Format("{0:" + Resources.Multi.DateFormat+ " HH:mm:ss}").Title(Resources.Multi.UpdatedAt).ClientTemplate("#if(kendo.toString(UpdatedAt,'dd/MM/yyyy') != '01/01/1900'){#" + "#=ConvertTimeZone(UpdatedAt," + Constants.TIME_ZONE + ")#" + "#}#").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
        columns.Bound(p => p.UpdatedBy).Width(100);
    })
    .ToolBar(tools =>
    {
        tools.Create().Text(Resources.Multi.Add);
        tools.Save().SaveText(Resources.Multi.Save).CancelText(Resources.Multi.Cancel);
        tools.Custom()
                .Text(Resources.Multi.Export)
                .HtmlAttributes(new { @class = "export btn btn-info", @style = "margin-left:10px"})
                .Url(Url.Action("ExportData", "DecaCustomer", new { filter = "~", sort = "~" }));
        tools.Custom()
                .Text(Resources.Multi.DowloadTemplate)
                .HtmlAttributes(new { @class = "btn" })
                .Url(Url.Action("ExportTemplate", "DecaCustomer"));
        tools.Custom()
            .Text(Resources.Multi.Import)
            .HtmlAttributes(new { @class = "btn btn-purple", id = "import", @style = "display:" + (AllowUpdate ? "inline-block" : "none"), Href = "javascript:void(0)" });
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable(pager => pager.PageSizes(new[] { 20, 50, 100, 200 }))
    .Sortable()
    .Events(events => { events.DataBound("dataBound"); events.Edit("onEdit"); })
    .Scrollable()
    .Navigatable()
    .Filterable()
                //.Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                //.Excel(excel => excel
                //.FileName("DecaCustomerList.xlsx")
                //.Filterable(true)
                //.ProxyURL(Url.Action("Excel_Export", "DecaCustomer")))
    .Reorderable(r => r.Columns(true))
    .Resizable(r => r.Columns(true))
    .ColumnMenu()
    .DataSource(dataSource => dataSource
    .Ajax()
    .Batch(true)
    .PageSize(20)
    .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
    .Model(model =>
    {
        model.Id(p => p.Id);
        //model.Field(p => p.PhysicalID).Editable(false);
        model.Field(p => p.CustomerID).Editable(false);
        model.Field(p => p.CreatedAt).Editable(false);
        model.Field(p => p.CreatedBy).Editable(false);
        model.Field(p => p.UpdatedAt).Editable(false);
        model.Field(p => p.UpdatedBy).Editable(false);
    })
    .Create(create => create.Action("Create", "DecaCustomer"))
    .Read(read => read.Action("Read", "DecaCustomer"))
    .Update(update => update.Action("Update", "DecaCustomer"))
    .Destroy("Destroy", "DecaCustomer"))

        )
    </div>
</div>
@(Html.Kendo()
      .Window()
      .Name("window")
      .Title("ImportForm")
      .Content(@<text>
        <div class="row-fluid">
            <div class="span4">
                <form id="importform" action="@Url.Content("~/DecaCustomer/ImportFromExcel")" method="post" class="form-horizontal" enctype="multipart/form-data" style="margin-bottom:0px;">
                    <input type="file" id="FileUpload" name="FileUpload" />
                </form>
            </div>
            <button type="button" id="btnImport" class="btn btn-purple btn-small span2" style="float: right;">Import</button>
        </div>
        <div class="row-fluid">
            <a id="btndownload" style="display: none" class="btn btn-warning btn-small">@Resources.Multi.DownloadTemplateError</a>
        </div>
    </text>)
      .Draggable()
      .Resizable()
      .Visible(false)
      .Width(1000)
      .Actions(actions => actions.Close())

)

<script>

    $(document).ready(function () {
        $("#listCompany").css('witdh', "30%");
        $("#listCompany").chosen();
        $("#listCompany").val(['']);

        $("#listHometown").css('witdh', "30%");
        $("#listHometown").chosen();
        $("#listHometown").val(['']);

        $("#listBank").css('witdh', "30%");
        $("#listBank").chosen();
        $("#listBank").val(['']);
    })
    var selectedCompany, selectedBranch;
    function onEdit(e) {
        if (e.model.isNew() == false) {
            $('input[name=PhysicalID]').parent().html(e.model.PhysicalID);
        }

        selectedCompany = e.model.CompanyID;
    }
    function onChangeCompany(e) {
        var dataItem = this.dataItem(e.item);
        selectedCompany = dataItem.CompanyID;
    }
    function filterBranch() {
        return {
            CompanyID: selectedCompany
        };
    }
    function filter() {

        grid = $("#grid").data("kendoGrid");
        var listCompany = $("#listCompany option:selected");
        var listHometown = $("#listHometown option:selected");
        var listBank = $('#listBank option:selected');
        var text = $('#filterText').val();
        var filter = { logic: "and", filters: [] };
        var fillterCompany = { logic: "or", filters: [] };
        var fillterHometown = { logic: "or", filters: [] };
        var fillterBank = { logic: "or", filters: [] }

        var filtertext = { logic: "or", filters: [] };


        if (listCompany.length > 0) {
            for (var i = 0; i < listCompany.length; i++) {
                var option = listCompany[i].value;
                if (option == '') {
                    fillterCompany.filters.push({ field: "CompanyID", operator: "contains", value: '' });
                }
                else {
                    fillterCompany.filters.push({ field: "CompanyID", operator: "eq", value: option });
                }
            }
            filter.filters.push(fillterCompany);
        }

        if (listHometown.length > 0) {
            for (var i = 0; i < listHometown.length; i++) {
                var option = listHometown[i].value;
                if (option == '') {
                    fillterHometown.filters.push({ field: "HomeTown", operator: "contains", value: '' });
                }
                else {
                    fillterHometown.filters.push({ field: "HomeTown", operator: "eq", value: option });
                }
            }
            filter.filters.push(fillterHometown);
        }


        if (listBank.length > 0) {
            for (var i = 0; i < listBank.length; i++) {
                var option = listBank[i].value;
                if (option == '') {
                    fillterBank.filters.push({ field: "CreditBank", operator: "contains", value: '' });
                }
                else {
                    fillterBank.filters.push({ field: "CreditBank", operator: "eq", value: option });
                }
            }
            filter.filters.push(fillterBank);
        }
        if (text) {
            filtertext.filters.push({ field: "EmployeeID", operator: "contains", value: text });
            filtertext.filters.push({ field: "PhysicalID", operator: "contains", value: text });
            filtertext.filters.push({ field: "FullName", operator: "contains", value: text });
            filtertext.filters.push({ field: "Phone", operator: "contains", value: text });
            filtertext.filters.push({ field: "Email", operator: "contains", value: text });
            filter.filters.push(filtertext);
        }

        grid.dataSource.filter(filter);
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                    $("#grid").data("kendoGrid").dataSource.read();
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
    function onRequestEnd(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Update @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#grid").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#grid").data("kendoGrid").dataSource.read();
        }
    }

    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        dataFreezeArea = gridElement.find(".k-grid-content-locked"),
        otherElements = gridElement.children().not(".k-grid-content").not(".k-grid-content-locked"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 50);
        dataFreezeArea.height(offsetbottom - otherElementsHeight - 50);
    }

    $(window).resize(function () {
        resizeGrid();
    });
    function dataBound() {
        resizeGrid();

        var grid = this;

        // ask the parameterMap to create the request object for you
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
        .options.parameterMap({
            page: grid.dataSource.page(),
            sort: grid.dataSource.sort(),
            filter: grid.dataSource.filter()
        });

        // Get the export link as jQuery object
        var $exportLink = grid.element.find('.export');


        // Get its 'href' attribute - the URL where it would navigate to
        var href = $exportLink.attr('href');

        // Update the 'page' parameter with the grid's current page
        //href = href.replace(/page=([^&]*)/, 'page=' + requestObject.page || '~');

        // Update the 'sort' parameter with the grid's current sort descriptor
        href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');

        // Update the 'pageSize' parameter with the grid's current pageSize
        //href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + grid.dataSource._pageSize);

        //update filter descriptor with the filters applied

        href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));

        // Update the 'href' attribute
        $exportLink.attr('href', href);
    }
    $("#filterText").keypress(function (e) {
        if (e.keyCode == 13) {
            filter();
        }
    });
    $(document).ready(function () {
        $('#import').bind('click', function () {
            $("#window").kendoWindow({
                actions: {}, /*from Vlad's answer*/
                draggable: true,
                height: "300px",
                modal: true,
                resizable: false,
                width: "500px",
                visible: false /*don't show it yet*/
            }).data("kendoWindow").center().open();
            $('#FileUpload').ace_file_input({
                no_file: 'No File ...',
                btn_choose: 'Choose',
                btn_change: 'Change',
                droppable: false,
                onchange: null,
                thumbnail: false //| true | large
                //whitelist:'gif|png|jpg|jpeg'
                //blacklist:'exe|php'
                //onchange:''
                //
            });
        });

        //$('#import').attr('data-toggle', 'modal');
        $('#btnImport').bind('click', function () {
            $('#importform').submit();
        });

        (function () {
            $("#importform").ajaxForm({
                beforeSend: function () {
                    $("#window").data("kendoWindow").close();
                    $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
                },
                uploadProgress: function (event, position, total, percentComplete) {
                },
                success: function (data) {
                    if (data.success) {
                        $("#grid").data("kendoGrid").dataSource.read();
                        $.gritter.add({
                            // (string | mandatory) the heading of the notification
                            title: '',
                            // (string | mandatory) the text inside the notification
                            text: 'Import successfully ' + data.total + ' record(s)',
                            class_name: 'gritter-success'
                        });
                        if (data.totalError > 0) {
                            $("#window").data("kendoWindow").open();
                            $('#btndownload').css('display', 'inline-block');
                            $('#btndownload').attr('href', r + "/DecaCustomer/Download?file=" + data.link);
                        }
                        else {
                            $('#btndownload').css('display', 'none');
                            $('#btndownload').attr('href', "");
                        }
                    }
                    else {
                        $.gritter.add({
                            // (string | mandatory) the heading of the notification
                            title: '',
                            // (string | mandatory) the text inside the notification
                            text: data.message,
                            class_name: 'gritter-error'
                        });
                    }
                },
                complete: function (xhr) {

                }
            });
        })();
    });

</script>
