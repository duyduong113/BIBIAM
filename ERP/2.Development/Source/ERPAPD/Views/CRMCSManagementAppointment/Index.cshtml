@model IEnumerable<ERPAPD.Models.CRM_Appointment>
@{
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
}
<style>
    .gr-btn-work button {
        margin-right: 1px;
    }
</style>
<div class="row-fluid">
    <div class="span5">
        <div class="span6">
            <select multiple class="chosen-select" id="listTypeFilter" data-placeholder="Loại công việc" style="display: none;">
                @foreach (var item in ViewBag.listAppointmentType)
                {
                    <option value="@item.ParamID">@item.Value</option>
                }
            </select>
        </div>
        <div class="span6">
            <select class="chosen-select" id="listStatusFilter" data-placeholder="Trạng thái" style="display: none;">
                <option disabled selected>Trạng thái</option>
                <option value="YET">Chưa làm</option>
                <option value="DONE">Đã làm</option>
            </select>
        </div>

    </div>
    <div class="span6">
        <div class="span6">
            <button type="button" class="btn btn-small btn-primary pull-left" onclick="filter()"> @Resources.Multi.Filter</button>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @(Html.Kendo().Grid(Model)
    .Name("GridAppointment")
    .Columns(columns =>
            {
                columns.Bound(p => p.RowID)
                 .HeaderTemplate("<input style='text-align:center' type='checkbox' id='checkboxcheckAll'  onClick='checkAll(this)' />")
                 .ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=RowID#' status='#=Status#' title='#=Title#' />")
                 .Width(30).Filterable(false).Sortable(false);
                columns.Bound(p => p.RowID).Title("Tiêu đề").Width(100).ClientTemplate("<a href='javascript::void(0)' onclick='showForm(1,this)'>#=Title#</a>");
                columns.Bound(p => p.Status).Title("Trạng thái").ClientTemplate(
                "#if(Status == 'YET'){#<span class='blue'>Chưa làm</span>#}else{#<span class='red'>Đã làm</span>#}#").Width(80);
                columns.Bound(p => p.Date).Title("Ngày hẹn").Width(80).Format("{0:dd/MM/yyyy}");
                columns.Bound(p => p.Hours).Title("Giờ").Width(40);
                columns.ForeignKey(p => p.Type, (System.Collections.IEnumerable)ViewBag.listAppointmentType, "ParamID", "Value").Title("Loại công việc").Width(80);
                columns.Bound(p => p.Address).Title("Địa điểm").Width(150);
                columns.Bound(p => p.Description).Title("Nội dung").Width(150);
                columns.Bound(p => p.CustomerName).Title("Khách hàng").Width(240);
                columns.Bound(p => p.Name).Title("Người liên hệ").Width(100);
                columns.Bound(p => p.Person_contact).Width(100).Hidden();
                columns.Bound(p => p.Guests).Title("Khách mời").Width(100);
                columns.Bound(p => p.Bcc).Title("Bcc").Width(100);
                columns.Bound(p => p.Files).Title("Files").Width(100);
                columns.Bound(p => p.CustomerID).Title("Mã khách hàng").Hidden();
                columns.Bound(p => p.RowCreatedUser).Title("Người tạo").Width(100);
                //columns.Bound(p => p.Deadline).Format("{0:dd/MM/yyyy}").Width(100);
            })

    .Pageable(pager => pager.PageSizes(new[] { 20, 50 }))
    .Navigatable()
    .Resizable(r => r.Columns(true))
    .Events(events => { events.DataBound("dataBound"); })
    .Scrollable(scrollable => scrollable.Virtual(false))
    .ToolBar(toolbar =>
        {
            if (AllowUpdate)
            {
                toolbar.Template(@<text>
                    <div class="pull-left">
                        @if (AllowCreate)
                        {
                            <a class="btn btn-success btn-small" href="javascript:void(0)" onclick="showForm(0,this)">
                                @*<i class="icon-plus"></i>*@ @Resources.Multi.Add
                            </a>
                        }
                        @if (AllowUpdate)
                        {
                            <a class="btn btn-primary btn-small" href="javascript:void(0)" id="btnGridUpdate" onclick="showConfirmPopup(1)">
                                @*<i class="icon-plus"></i>*@ Xác nhận hoàn tất
                            </a>
                        }
                        @if (AllowDelete)
                        {
                            <a class="btn btn-danger btn-small" href="javascript:void(0)" id="btnGridDelete" onclick="showConfirmPopup(-1)">
                                @*<i class="icon-plus"></i>*@ @Resources.Multi.Delete
                            </a>
                        }
                    </div>
                </text>);
            }
        })
                                                        .DataSource(dataSource => dataSource
                                                        .Ajax()
                                                        .Batch(true)
                                                        .PageSize(20)
                                                        .Sort(sort =>
                                                            {
                                                                sort.Add("RowID").Descending();
                                                            })
                                                        .Model(model =>
                                                        {
                                                            model.Id(p => p.CustomerID);
                                                        })
                                                            .Read(read => read.Action("AppointmentRead", "CRMCSManagementAppointment"))
                                                        ))
    </div>
</div>
@Html.Partial("_popup")
@Html.Partial("_ppCreate")
<script type="text/javascript">
   
    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#GridAppointment').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    function dataBound(e) {
        resizeGrid();
        var grid = this;
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
       .options.parameterMap({
           page: grid.dataSource.page(),
           sort: grid.dataSource.sort(),
           filter: grid.dataSource.filter()
       });
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#GridAppointment').offset().top);
        var gridElement = $("#GridAppointment");
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 40);
    }
    $("#listTypeFilter, #listStatusFilter").chosen();

    function filter() {
        var grid = $('#GridAppointment').data('kendoGrid');
        var filter = { logic: "and", filters: [] };
        var fillterOr = { logic: "or", filters: [] };

        var TypeOption = $("#listTypeFilter option:selected");
        console.log(TypeOption);
        var fillterType = { logic: "or", filters: [] }
        if (TypeOption.length > 0) {
            for (var i = 0; i < TypeOption.length; i++) {
                var option = TypeOption[i].value;
                fillterType.filters.push({ field: "Type", operator: "eq", value: option });
            }
            filter.filters.push(fillterType);
        }
        var StatusOption = $("#listStatusFilter").val();
        var fillterStatus = { logic: "and", filters: [] };

        console.log(StatusOption);
        if (StatusOption && StatusOption != "") {
            fillterStatus.filters.push({ field: "Status", operator: "eq", value: StatusOption });
            filter.filters.push(fillterStatus);
        }
        //return;
        grid.dataSource.filter(filter);
    }

</script>
<style>
    .chosen-container .chosen-results {
        max-height: 100px !important;
    }

    .form-horizontal .control-label {
        width: 90px;
    }

    .form-horizontal .controls {
        margin-left: 110px;
    }
</style>
<script type="text/javascript">

    
   
    

   
</script>
