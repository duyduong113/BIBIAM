@{
    ViewBag.Title = "Quản lý chủ đề khảo sát";
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
    var typeAnswer = new List<Object>();
    typeAnswer.Add(new { Name = "Multi choice" });
    typeAnswer.Add(new { Name = "Single choice" });
    typeAnswer.Add(new { Name = "Free text" });
    ViewBag.typeAnswer = typeAnswer;
}
<style>
    #GridCustomerFilter .k-grid-content {
        height: 220px !important;
    }
    #GridCustomer .k-grid-content {
        height: 240px !important;
    }
    #GridQuestion .k-grid-content {
        height: 300px !important;
    }

    #GridQuestionFilter .k-grid-content {
        height: 300px !important;
    }

    #GridActionUser .k-grid-content {
        height: 300px !important;
    }
</style>

<div class="row-fluid">
    <div class="span12">
        <div class="control-group">
            <div class="controls filter">
                @*<label class="span1">Chủ đề</label>*@
                <select name="SurveyID" id="SurveyID" class=" chosen-select">
                    <option selected>Chọn chủ đề khảo sát (s)</option>
                    @foreach (var item in ViewBag.listSurveyCategory)
                    {
                        <option value="@item.Id">@item.Title</option>
                    }
                </select>
            </div>
        </div>
        <div class="span8" id="detail">
            <p class="detail-popup-title" id="DetailTitle">
                <label class="span2">Mã chủ đề: <span id="Id"></span></label>
                <label class="span2">Tên chủ đề: <span id="Title"></span></label>
                <label class="span2"> Tổng câu hỏi: ( <span id="QuestionCount"> @Html.Raw(@Resources.Multi.Question.ToLower())</span> )</label>
                <span class="label label-important arrowed">Mục tiêu: <span id="Target"></span></span>
                <span class='label label-yellow arrowed' style='font-size:10px; '> @Html.Raw(@Resources.Multi.Status): <span id="Status"></span></span>
                @*<span class="label label-success arrowed" style="font-size:10px;">@Html.Raw(@Resources.Multi.Status): @Html.Raw(@Resources.Multi.InProcess)</span>
                    <button class="btn btn-minier btn-grey"   onclick="EndSurvey()">
                        <i class="icon-pause"></i>
                        @Html.Raw(@Resources.Multi.End)
                    </button>
                    <span class="label label-grey arrowed" style="font-size:10px;">@Html.Raw(@Resources.Multi.Status): @Html.Raw(@Resources.Multi.End)</span>*@
            </p>
            <p class="detail-popup-description" id="DetailDescription"></p>
            @* <p class="detail-popup-createdtime" id="DetailCreatedBy">@Resources.Multi.FromDate <span id="StartDate"></span>  @Resources.Multi.ToDate <span id="EndDate"></span></p>*@
        </div>
    </div>
</div>

<div id="viewtab">
    <ul class="nav nav-tabs" id="myTab">
        <li class="active">
            <a data-toggle="tab" href="#question">
                @Html.Raw(@Resources.Multi.Question)
            </a>
        </li>
        <li class="">
            <a data-toggle="tab" href="#customer">
                @Html.Raw(@Resources.Multi.Customer)
            </a>
        </li>
        <li class="">
            <a data-toggle="tab" href="#user">
                @Html.Raw(@Resources.Multi.Performer)
            </a>
        </li>
    </ul>
    <div class="tab-content" style="height: 340px;">
        <div id="question" class="tab-pane active">
            <div class="span6">
                <div class="row-fluid" style="padding-bottom:4px;">
                    @using (Html.BeginForm("SaveQuestion", "CRMSurveyManagement", FormMethod.Post, new { @class = "form-inline", id = "ViewQuestionForm", style = "margin:0;" }))
                    {
                        // <input type="hidden" name="SurveyManagementID" id="SurveyManagementID" />
                    <div class="span6">
                        <label style="color:blue; font-weight:bold;"> Danh sách câu hỏi được chọn khảo sát</label>
                    </div>
                    }
                </div>
                <div class="row-fluid">
                    @(Html.Kendo()
                .Grid<ERPAPD.Models.CRM_Survey_Management_Question>()
                .Name("GridQuestion")
                .Columns(columns =>
                {
                    columns.Bound(p => p.QuestionID).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAllQuestion'  onClick='checkAllQuestion(this)' />")
                        .ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=QuestionID#' onclick='BoChon(this)'  />")
                        .Width(10).Filterable(false).Sortable(false)
                          .HtmlAttributes(new { style = "text-align: center" })
                          .HeaderHtmlAttributes(new { style = "text-align: center" });
                    ;
                    columns.Bound(p => p.Description).Title(Resources.Multi.Desc + " " + Resources.Multi.Question.ToLower()).Width(200);
                })
                            // .Pageable(pager => pager.PageSizes(new[] { 20, 100, 200, 300 }))
                            //.Navigatable()
                            //.Scrollable(scrollable => scrollable.Virtual(false))
                            //.Sortable()
                .Resizable(resize => resize.Columns(false))
                    @*.ToolBar(toolbar =>
                        {
                            toolbar.Template(@<text>
                                <div class="pull-left">
                                    @if (AllowCreate)
                                    {
                                        <a class="btn btn-danger btn-small" href="javascript:void(0)" id="btnGridAdd">
                                            <i class="icon-plus"></i> @Resources.Multi.Delete
                                        </a>
                                    }
                                </div>
                            </text>);
                        })*@
.DataSource(dataSource => dataSource
                                   .Ajax()
    // .Sort(a => a.Add(m => m.SortOrder).Ascending())
                                   .PageSize(50)
                                   .Read(read => read.Action("Question_Read", "CRMSurveySetting").Data("SurveyCateID"))
                                 )
                    )
                </div>
            </div>

            <div class="span6" style="float:right">
                <div class="row-fluid" style="padding-bottom:4px;">
                    @using (Html.BeginForm("SaveQuestion", "CRMSurveySetting", FormMethod.Post, new { @class = "form-inline", id = "AddQuestionForm", style = "margin:0;" }))
                    {
                    <input type="hidden" name="SurveyManagementID" id="SurveyManagementID" />
                    <input type="hidden" name="QuestionID" id="QuestionID" />
                    <div class="span4">
                        <div class="controls filter">
                            <select name="CategoryID" id="CategoryID" class=" chosen-select" onchange="dosearchQuestions()">
                                <option value="">Chọn nhóm câu hỏi ...</option>
                                @foreach (var item in ViewBag.Category)
                                    {
                                    <option value="@item.CategoryID">@item.Name</option>
                                    }
                            </select>
                        </div>
                    </div>
                    <div class="span1"></div>
                    <div class="span4">
                        <div class="controls filter">
                            <select data-placeholder="Chọn loại câu hỏi..." name="typeAnswer" id="typeAnswer" class="chosen-select span3" multiple onchange="dosearchQuestions()">
                                @foreach (var item in ViewBag.typeAnswer)
                                    {
                                    <option value="@item.Name">@item.Name</option>
                                    }
                            </select>
                        </div>
                    </div>
                    }
                </div>
                <div class="row-fluid">
                    @(Html.Kendo()
                .Grid<ERPAPD.Models.CRM_Survey_Management_Question>()
                .Name("GridQuestionFilter")
                .Columns(columns =>
                {
                    columns.Bound(p => p.QuestionID).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAllQuestionFilter'  onClick='checkAllQuestionFilter(this)' />")
                        .ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=QuestionID#' onclick='Chon(this)' />")
                        .Width(10).Filterable(false).Sortable(false)
                        .HtmlAttributes(new { style = "text-align: center" })
                        .HeaderHtmlAttributes(new { style = "text-align: center" });
                    columns.Bound(p => p.Description).Title(Resources.Multi.Desc + " " + Resources.Multi.Question.ToLower()).Width(200);
                })
                            //.Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
                            //.Navigatable()
                            // .Scrollable(scrollable => scrollable.Virtual(false))
                            //.Sortable()
                .Resizable(resize => resize.Columns(false))
                    @*.ToolBar(toolbar =>
                        {
                            toolbar.Template(@<text>
                                <div class="pull-left">
                                    @if (AllowCreate)
                                    {
                                        <a class="btn btn-small btn-primary" href="javascript:void(0)" id="btnGridAdd" onclick="btnSubmit()">
                                            <i class="icon-plus"></i> @Resources.Multi.Add
                                        </a>
                                    }
                            </text>);
                        })*@
                    .DataSource(dataSource => dataSource
                                .Ajax()
                     // .Sort(a => a.Add(m => m.SortOrder).Ascending())
                     // .PageSize(20)
                                .Read(read => read.Action("Question_ReadFilter", "CRMSurveySetting").Data("SurveyCateID")) // new { SurveyManagementID = "SurveyCateID()" })
                                 )
                    )
                </div>
            </div>
        </div>
        <div id="customer" class="tab-pane">
            <div class="span6">
                <div class="row-fluid" style="padding-bottom:4px;">
                    <div class="span6">
                        <label style="color:blue; font-weight:bold;"> Danh sách khách hàng được chọn khảo sát</label>
                    </div>
                </div>
                <div class="row-fluid">
                        @(Html.Kendo()
                .Grid<ERPAPD.Models.CRM_Survey_Management_Customer>()
                .Name("GridCustomer")
                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).HeaderTemplate("<input style='text-align:center;opacity:1;'  type='checkbox' id= 'checkboxcheckAllCusFilter'  onClick='checkAllCus(this)' />")
                        .ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=Id#' onClick='BoChonCustomer(this)' />")
                         .HtmlAttributes(new { style = "text-align: center" })
                        .HeaderHtmlAttributes(new { style = "text-align: center" })
                        .Width(35).Filterable(false).Sortable(false);
                    columns.Bound(p => p.CustomerID).Title(Resources.Multi.CustomerCode)
                        .HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(100);
                    columns.Bound(p => p.Name).Title(Resources.Multi.CustomerName).HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(120);
                    columns.Bound(p => p.Phone).Title(Resources.Multi.Phone).HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(80);
                    // columns.Bound(p => p.PhysicalID).Title(Resources.Multi.ID).HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(80);
                    //columns.Bound(p => p.CustomerRank).Title(Resources.Multi.CatagoryCustomer).HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(140);
                    // columns.Bound(p => p.Merchant).Title(Resources.Multi.MerchantName).HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(140);
                    //columns.Bound(p => p.Carrier).Title(Resources.Multi.Transproter).HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(140);
                    columns.Bound(p => p.IsDone).Title(Resources.Multi.Excute).ClientTemplate("#if(IsDone){#<i class='icon-ok green'></i> #}else{# #}# ").Width(70);

                })
                .Pageable(pager => pager.PageSizes(new[] { 20, 100, 200, 300 }))
                //.Navigatable()
                //.Editable(editable => editable.Mode(GridEditMode.InCell))
                .Scrollable(scrollable => scrollable.Virtual(false))
                                // .Sortable()
                
                .Resizable(resize => resize.Columns(false))
                .DataSource(dataSource => dataSource
                .Ajax()
                    //.Filter(f => { f.Add(a => a.Status).IsEqualTo(true); })
                .Batch(true)
                .PageSize(20)
                .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                .Model(model =>
                {
                    model.Id(p => p.Id);
                    model.Field(p => p.Id).Editable(false);
                    model.Field(p => p.IsDone).Editable(false);
                })
                .Read(read => read.Action("Customer_Read", "CRMSurveySetting").Data("SurveyCateID"))
                .Create(create => create.Action("Customer_Create", "CRMSurveySetting").Data("SurveyCateID"))
                .Update(update => update.Action("Customer_Create", "CRMSurveySetting").Data("SurveyCateID"))

                )
                        )
                    </div>


                </div>
            <div class="span6" style="float:right">
                <div class="row-fluid" style="padding-bottom:4px;">
                    <div class="span4"><label style="color:blueviolet">Chọn khách hàng cần khảo sát</label> </div>
                    <div class="span8">
                        <div class="controls filter">
                            <input type="text" name="txtSearchCustomer" id="txtSearchCustomer" style="width:200px;" />
                        </div>
                    </div>
                </div>
                <div class="row-fluid">
                    @(Html.Kendo()
                .Grid<ERPAPD.Models.ERPAPD_Customer>()
                .Name("GridCustomerFilter")
                .Columns(columns =>
                {
                    columns.Bound(p => p.RowID).Hidden();
                    columns.Bound(p => p.CustomerID).HeaderTemplate("<input style='text-align:center;opacity:1;' hidden type='checkbox' id= 'checkboxcheckAllCusFilter'  onClick='checkAllCusFilter(this)' />")
                        .ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=CustomerID#' onClick='ChonCustomer(this)' />")
                        .HtmlAttributes(new { style = "text-align: center" })
                        .HeaderHtmlAttributes(new { style = "text-align: center" })
                        .Width(10).Filterable(false).Sortable(false);
                    //columns.Bound(p => p.OrderID).Title(Resources.Multi.OrderCode);//.HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(100);
                    columns.Bound(p => p.CustomerName).Title(Resources.Multi.CustomerName).Width(200);//.HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(120);
                    columns.Bound(p => p.Phone).Title(Resources.Multi.Phone).Width(60);//.HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(80);
                    //columns.Bound(p => p.PhysicalID).Title(Resources.Multi.ID);//.HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(80);
                    //columns.Bound(p => p.CustomerRank).Title(Resources.Multi.CatagoryCustomer);//.HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(140);
                    //columns.Bound(p => p.Merchant).Title(Resources.Multi.MerchantName);//.HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(140);
                    // columns.Bound(p => p.Carrier).Title(Resources.Multi.Transproter);//.HtmlAttributes(new { style = "background-color: rgb(223,240,216);color:rgb(70,136,71)" }).Width(140);
                    //columns.Bound(p => p.IsDone).Title(Resources.Multi.Excute).ClientTemplate("#if(IsDone){#<i class='icon-ok green'></i> #}else{# #}# ").Width(70);

                })
                .Pageable(pager => pager.PageSizes(new[] { 20, 100, 200, 300 }))
                //.Navigatable()
                            // .Editable(editable => editable.Mode(GridEditMode.InCell))
                .Scrollable(scrollable => scrollable.Virtual(false))
                //.Sortable()
                .Resizable(resize => resize.Columns(false))
                .DataSource(dataSource => dataSource
                .Ajax()
                    //.Filter(f => { f.Add(a => a.Status).IsEqualTo(true); })
                .Batch(true)
                .PageSize(20)
                 // .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                .Model(model =>
                {
                    model.Id(p => p.RowID);
                    //  model.Field(p => p.Id).Editable(false);
                    // model.Field(p => p.IsDone).Editable(false);
                })
                .Read(read => read.Action("Customer_Read_Filter", "CRMSurveySetting").Data("SurveyCateID"))
                )
                    )
                </div>
            </div>
        </div>
        <div id="user" class="tab-pane">
            <div class="row-fluid" style="padding-bottom:4px;">
                @using (Html.BeginForm("SaveActionUser", "CRMSurveySetting", FormMethod.Post, new { @class = "form-inline", id = "AddActionUserForm", style = "margin:0;" }))
                {
                <input type="hidden" id="SurveyManagementID2" name="SurveyManagementID2" />
                <label>Nhóm người dùng</label>
                @(Html.Kendo().DropDownList()
                                        .Name("UserGroup")
                                    .HtmlAttributes(new { style = "width:150px" })
                                    .DataValueField("Id")
                                    .DataTextField("Name")
                                    .Events(e => e.Select("selectedUserGroup"))
                                    .OptionLabel("người dùng...")
                                    .BindTo(ViewBag.ListGroup)

)
                <label>Người thực hiện</label>
                <select id="slActionUser" data-placeholder="Chọn người thực hiện..." name="listUserName" style="height:15px" multiple></select>
                <button type="submit" id="btnAddActionUser" class="btn btn-success btn-mini" style=" margin-left: 15px;">@Html.Raw(@Resources.Multi.Add)</button>
                <a id="btnRemoveActionUser" class="btn btn-danger btn-mini" onclick="showConfirmPopup(3)">@Html.Raw(@Resources.Multi.Delete)</a>
                }
</div>
<div class="row-fluid">
    @(Html.Kendo()
                .Grid<ERPAPD.Models.CRM_Survey_Management_User>()
                .Name("GridActionUser")
                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll4'  onClick='checkAll4(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=Id#'  />").Width(35).Filterable(false).Sortable(false);
                    columns.Bound(p => p.UserName).Title("Username").Width(250);
                    columns.Bound(p => p.FullName).Title("Họ tên").Width(250);
                })
                .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
                .Navigatable()
                .Scrollable(scrollable => scrollable.Virtual(false))
                .Sortable()
                .Resizable(resize => resize.Columns(true))
                .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(50)
                .Read(read => read.Action("ActionUser_Read", "CRMSurveySetting").Data("SurveyCateID"))
                )
)
</div>
</div>
</div>
</div>
@Html.Partial("_popup")
<script>
    $("#SurveyID, #CategoryID, #typeAnswer").chosen();
    $("#detail").hide();
    function btnSubmit() {
        $("#AddQuestionForm").submit();
    }
    function Chon(e) {
        var checkbox = $(e);
        if (checkbox.is(':checked')) {
            //alert(checkbox.is(':checked'));
            var item = $('#GridQuestionFilter').data('kendoGrid').dataItem($(e).closest("tr"));
            $('#QuestionID').val(item.QuestionID);
            btnSubmit();
            $('#GridQuestionFilter').data('kendoGrid').dataItem($(e).closest("tr").hide());
        }
        else {
        }
    }
    function BoChon(e) {
        var checkbox = $(e);
        if (checkbox.is(':checked')) {
            //alert(checkbox.is(':checked'));
            // var item = $('#GridQuestion').data('kendoGrid').dataItem($(e).closest("tr"));
            showConfirmPopup(1);
        }
        else {
        }
    }
    // $("#viewtab").hide();
    $("#Id").text(0);
    function dosearchQuestions() {
        var grid = $("#GridQuestionFilter").data("kendoGrid");
        var typeAnswer = $("#typeAnswer option:selected");
        var Name = $('#CategoryID').val();
        var filter = { logic: "and", filters: [] };
        var filtertypeAnswer = { logic: "or", filters: [] };
        var filtertext = { logic: "or", filters: [] };
        debugger;
        if (typeAnswer.length > 0) {
            for (var i = 0; i < typeAnswer.length; i++) {
                var option = typeAnswer[i].value;
                filtertypeAnswer.filters.push({ field: "Type", operator: "eq", value: option });
            }
            filter.filters.push(filtertypeAnswer);
        }
        if (Name) {
            filtertext.filters.push({ field: "CategoryID", operator: "eq", value: Name });
            filter.filters.push(filtertext);
        }
        grid.dataSource.filter(filter);
    }
    
    $("#SurveyID").change(function () {
        var ID = $("#SurveyID").val();
        $.post(r + "/CRMSurveySetting/GetListSurvey", { ID: ID }, function (data) {
            if (data.success) {
                debugger;
                $("#Id").text(data.data[0].Id);
                $("#Title").text(data.data[0].Title);
                $("#QuestionCount").text(data.data[0].QuestionCount);
                var target = (parseFloat(data.data[0].Actual) / parseFloat(data.data[0].Target)) * 100;
                var percent = parseFloat(data.data[0].Actual) / parseFloat(data.data[0].Target);
                if (data.data[0].Target == 0) {
                    $("#Target").text("Chưa đặt mục tiêu");
                }
                else if (target < 50) {
                    $("#Target").text(target.toString() + " % (" + data.data[0].Actual + "/" + data.data[0].Target + ")");
                }
                else if (target < 65) {
                    $("#Target").text(target.toString() + " % (" + data.data[0].Actual + "/" + data.data[0].Target + ")");
                }
                else {
                    $("#Target").text(target.toString() + " % (" + data.data[0].Actual + "/" + data.data[0].Target + ")");
                }
                //if (data.data[0].Status == "Mới")
                //{
                //    $("#Status").text("Mới");
                //}
                //else if (Status == "Đang thực hiện") {
                //}
                $("#Status").text(data.data[0].Status);
                $("#StartDate").text(data.data[0].StartDate);
                $("#EndDate").text(data.data[0].EndDate);
                $("#SurveyManagementID").val(data.data[0].Id);
                $("#SurveyManagementID2").val(data.data[0].Id);
                //read data
                $("#GridCustomer").data("kendoGrid").dataSource.read();
                $("#GridCustomerFilter").data("kendoGrid").dataSource.read();
                //$("#GridQuestionFilter").data("kendoGrid").dataSource.read();
                $("#GridQuestion").data("kendoGrid").dataSource.read();
                $("#GridActionUser").data("kendoGrid").dataSource.read();
                $("#detail").show();
                // $("#viewtab").show();
            } else {
                $("#detail").hide();
                //$("#viewtab").hide();
            }
        });
    });
    function SurveyCateID() {
        return {
            SurveyManagementID: $("#Id").text()
        };
    }
    var currentID = "";
    function checkAllQuestionFilter(e) {
        var x = $(e).prop('checked');
        $('#QuestionID').val("All");
        btnSubmit();
        $('#GridQuestionFilter').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
        $(e).prop('checked', false);
    }
    function checkAllQuestion(e) {
        var x = $(e).prop('checked');
        $('#GridQuestion').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
        showConfirmPopup(1);
    }
    /// Thêm khach hàng
    function dosearchCustomer() {
        var grid = $("#GridCustomerFilter").data("kendoGrid");
        var Name = $('#txtSearchCustomer').val();
        var filter = { logic: "and", filters: [] };
        var filtertext = { logic: "or", filters: [] };
        if (Name) {
            filtertext.filters.push({ field: "CustomerID", operator: "contains", value: Name });
            filtertext.filters.push({ field: "CustomerName", operator: "contains", value: Name });
            filtertext.filters.push({ field: "Phone", operator: "contains", value: Name });
            filter.filters.push(filtertext);
        }
        grid.dataSource.filter(filter);
    }
    $("#txtSearchCustomer").bind('keypress', function (e) {
        var code = e.keyCode ? e.keyCode : e.which;
        if (code == 13) {
            dosearchCustomer();
        }
    });
    function checkAllCus(e) {
        var x = $(e).prop('checked');
        $('#GridCustomer').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
        showConfirmPopup(2);
    }
    function checkAllCusFilter(e) {
        var x = $(e).prop('checked');
        $('#GridCustomerFilter').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    $('#btnGridAdd').click(function () {
        $("#GridCustomer").data("kendoGrid").dataSource.insert();
    })
    $('#btnGridSave').bind('click', function () {
        if ($('#GridCustomer').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#GridCustomer').data('kendoGrid').saveChanges();
        }
    })
    $('#btnGridCancel').bind('click', function () {
        $('#GridCustomer').data('kendoGrid').cancelChanges();
    });
    function ChonCustomer(e) {
        var checkbox = $(e);
        if (checkbox.is(':checked')) {
            var item = $('#GridCustomerFilter').data('kendoGrid').dataItem($(e).closest("tr"));
            debugger;
            $.post(r + "/CRMSurveySetting/Customer_Create_Filter", { SurveyManagementID: $("#Id").text(), CustomerID: item.CustomerID }, function (data) {
                if (data.success) {
                    $('#GridCustomerFilter').data('kendoGrid').dataItem($(e).closest("tr").hide());
                    $("#GridCustomer").data("kendoGrid").dataSource.read();
                }
                else {
                    $.gritter.add({
                        title: '',
                        text: data.message,
                        class_name: 'gritter-error'
                    });
                }
            });
            
        }
        else {
        }
    }
    function BoChonCustomer(e) {
        var checkbox = $(e);
        if (checkbox.is(':checked')) {
            //alert(checkbox.is(':checked'));
            // $('#GridQuestionFilter').data('kendoGrid').dataItem($(e).closest("tr"));
            showConfirmPopup(2);
        }
        else {
        }
    }
    ///
    
    function checkAll4(e) {
        var x = $(e).prop('checked');
        $('#GridActionUser').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    function filterQuestion() {
        return {
            CategoryID: $("#CategoryID").val()
        };
    }
    function dataBound(e) {
        resizeGrid();
        drawcolor();
        var grid = this;
        // Get the export link as jQuery object
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "@Html.Raw(@Resources.Multi.Error):\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            $.gritter.add({
                text: message,
                class_name: 'gritter-error'
            });
        } else {
            $.gritter.add({
                text: '@Html.Raw(@Resources.Multi.Create) @Html.Raw(@Resources.Multi.Successfully)',
                class_name: 'gritter-success'
            });
        }
    }
    function onRequestEnd(e) {
        var grid = this;
        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '@Html.Raw(@Resources.Multi.Success)',
                // (string | mandatory) the text inside the notification
                text: 'Cập nhật @Html.Raw(@Resources.Multi.Success.ToLower())',
                class_name: 'gritter-success'
            });
            grid.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '@Html.Raw(@Resources.Multi.Success)',
                // (string | mandatory) the text inside the notification
                text: 'Tạo mới @Html.Raw(@Resources.Multi.Success.ToLower())',
                class_name: 'gritter-success'
            });
            grid.read();
            //changeTypeAsset();
        }
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid");
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 10);
    }
    $("#AddQuestionForm").validate({
        // Rules for form validation
        submitHandler: function (form) {
            $(form).ajaxSubmit({
                beforeSend: function () {
                    // $("#btnAddQuestion").attr("disabled", "disabled");
                    // $.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })
                },
                success: function (data) {
                    if (data.success) {
                        @*$.gritter.add({
                            title: '@Html.Raw(@Resources.Multi.Success)',
                            text: 'Thêm câu hỏi thành công.',
                            class_name: 'gritter-success'
                        });*@
                        // $("#GridQuestionFilter").data("kendoGrid").dataSource.read();
                        $("#GridQuestion").data("kendoGrid").dataSource.read();
                    }
                    else {
                        $.gritter.add({
                            // (string | mandatory) the heading of the notification
                            title: "@Html.Raw(@Resources.Multi.Error)",
                            // (string | mandatory) the text inside the notification
                            text: data.message,
                            class_name: 'gritter-error'
                        });
                    }
                    $("#btnAddQuestion").removeAttr("disabled");
                },
                complete: function () {
                    $.unblockUI();
                }
            });
            return false;
        }
    });
    $("#AddActionUserForm").validate({
        // Rules for form validation
        submitHandler: function (form) {
            $(form).ajaxSubmit({
                beforeSend: function () {
                    $("#btnAddActionUser").attr("disabled", "disabled");
                    $.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })
                },
                success: function (data) {
                    if (data.success) {
                        $.gritter.add({
                            title: '@Html.Raw(@Resources.Multi.Success)',
                            text: 'Thêm người thực hiện thành công.',
                            class_name: 'gritter-success'
                        });
                        $("#GridActionUser").data("kendoGrid").dataSource.read();
                    }
                    else {
                        $.gritter.add({
                            // (string | mandatory) the heading of the notification
                            title: "@Html.Raw(@Resources.Multi.Error)",
                            // (string | mandatory) the text inside the notification
                            text: data.message,
                            class_name: 'gritter-error'
                        });
                    }
                    $("#btnAddActionUser").removeAttr("disabled");
                },
                complete: function () {
                    $.unblockUI();
                }
            });
            return false;
        }
    });

    @*function drawcolor() {
        var collumStatus = 7;
        var data = $("#Grid").data("kendoGrid").dataSource.data();
        $.each(data, function (i, row) {
            try {
                if (row.Status == "Mới") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + collumStatus + ')').html("<span class='badge badge-yellow' style='font-size:10px;'>@Resources.Multi.New</span>");
                }
                else if (row.Status == "Đang thực hiện") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + collumStatus + ')').html('<span class="badge badge-success" style="font-size:10px;">@Resources.Multi.InProcess</span>');
                }
                else if (row.Status == "Kết thúc") {
                    $('tr[data-uid="' + row.uid + '"] td:nth-child(' + collumStatus + ')').html('<span class="badge badge-grey" style="font-size:10px;">@Resources.Multi.End</span>');
                }
            }
            catch (err) {
            }
        });
    }*@

    function importCustomer() {
        $("#windowimport").kendoWindow({
            actions: {}, /*from Vlad's answer*/
            draggable: true,
            height: "300px",
            modal: true,
            resizable: false,
            width: "500px",
            visible: false /*don't show it yet*/
        }).data("kendoWindow").center().open();
    }
    $("#txtName").keypress(function (e) {
        if (e.keyCode == 13) {
            filter();
        }
    });
    $("#slStatus").chosen();
    function filter() {
        grid = $("#Grid").data("kendoGrid");
        var Status = $("#slStatus option:selected");
        var Name = $('#txtName').val();
        var filter = { logic: "and", filters: [] };
        var filterText = { logic: "or", filters: [] };
        var filterStatus = { logic: "or", filters: [] };

        if (Status.length > 0) {
            for (var i = 0; i < Status.length; i++) {
                var option = Status[i].value;
                if (option == '') {
                    filterTopic.filters.push({ field: "Status", operator: "neq", value: 0 });
                }
                else {
                    filterTopic.filters.push({ field: "Status", operator: "eq", value: option });
                }
            }
            filter.filters.push(filterTopic);
        }
        if (Name) {
            filterText.filters.push({ field: "Title", operator: "contains", value: option });
            filterText.filters.push({ field: "Detail", operator: "contains", value: option });
            filter.filters.push(filterText);
        }

        grid.dataSource.filter(filter);
    }
    $('#btnImport').bind('click', function () {
        $('#importform input[name="SurveyManagementID"]').val(currentID);
        $('#importform').submit();
    });

    (function () {
        $("#importform").ajaxForm({
            beforeSend: function () {
                $("#windowimport").data("kendoWindow").close();
                $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
            },
            uploadProgress: function (event, position, total, percentComplete) {
            },
            success: function (data) {
                if (data.success) {
                    $("#GridCustomer").data("kendoGrid").dataSource.read();
                    $.gritter.add({
                        title: '',
                        text: 'Nhập thành công ' + data.total + ' khách hàng',
                        class_name: 'gritter-success'
                    });
                    if (data.totalError > 0) {
                        $("#windowimport").data("kendoWindow").open();
                        $('#btndownload').css('display', 'inline-block');
                        $('#btndownload').attr('href', r + "/PotentialCustomer/Download?file=" + data.link);
                    }
                    else {
                        $('#btndownload').css('display', 'none');
                        $('#btndownload').attr('href', "");
                    }
                }
                else {
                    $.gritter.add({
                        title: '',
                        text: 'Có lỗi xuất hiện',
                        class_name: 'gritter-error'
                    });
                }
            },
            complete: function (xhr) {
            }
        });

    })();

    function selectedUserGroup(e) {
        $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
        var dataItem = this.dataItem(e.item);
        $('#slActionUser').empty();
        $('#slActionUser').trigger("chosen:updated");
        $.post(r + "/CRMSurveyManagement/GetListUsersByGroup/", { GroupID: dataItem.Id }, function (data) {
            if (data.success) {
                $('#slActionUser').empty();
                var item = "";
                item += "<option value='Tất cả'>Tất cả</option>";
                for (var i = 0; i < data.data.length; i++) {
                    var value = data.data[i];
                    item += "<option value='" + value.UserName + "'>" + value.FullName + "</option>";
                }
                $("#slActionUser").append(item);
                $("#slActionUser").chosen();
                $('#slActionUser').trigger("chosen:updated");
                $("#slActionUser" + "_chosen").css('width', '430px');
                $("#slActionUser_chosen").find('div.chosen-drop ul').css('max-height', '200px');
            } else {
                $.gritter.add({
                    // (string | mandatory) the heading of the notification
                    title: "@Html.Raw(@Resources.Multi.Error)",
                    // (string | mandatory) the text inside the notification
                    text: data.message,
                    class_name: 'gritter-error'
                });
            }
        });
    }



</script>