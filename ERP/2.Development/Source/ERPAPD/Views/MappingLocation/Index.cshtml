@model IEnumerable<ERPAPD.Models.DC_Location_MappingLocation>
@{
    ViewBag.Title = Resources.Multi.MappingLocation;
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
}
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="widget-header widget-header-blue widget-header-flat">
                <p style="font-size:14px">@Resources.Multi.Filter</p>

                <span class="widget-toolbar">
                    <a href="#" data-action="collapse">
                        <i class="icon-chevron-up"></i>
                    </a>
                </span>
            </div>
            <div class="widget-body">
                <div class="widget-main">
                    <div class="row-fluid">
                        <div id="newlistICareID" style="display: inline-block;">
                            <input type="text" id="AliasName" name="AliasName" placeholder="@Resources.Multi.Search @Resources.Multi.Follow.ToLower() @Resources.Multi.Multiple.ToLower() @Resources.Multi.MenuRegionDefinition.ToLower() (@Resources.Multi.Space @Resources.Multi.By.ToLower() ;)" style="width: 350px;" />
                        </div>
                        <select name="select" id="listCountry" class='chosen-select span2' data-placeholder="@Resources.Multi.Select @Resources.Multi.MenuCountryDefinition.ToLower()..." style="width: 250px;" multiple>
                            <option></option>
                            @foreach (var item1 in ViewBag.Country)
                            {
                                <option value="@item1.CountryName">@item1.CountryName</option>
                            }
                        </select>
                        <select name="select" id="listAlias" class='chosen-select span2' data-placeholder="@Resources.Multi.Select @Resources.Multi.Definition.ToLower()..." style="width: 250px;" multiple>
                            <option></option>
                            <option value="">All</option>
                            @foreach (var item in ViewBag.Alias)
                            {
                                <option value="@item.AliasName">@item.AliasName</option>
                            }
                        </select>
                        <button type="button" id="btnSearch" class="btn btn-primary btn-small" style="float:none;"  onclick="filter()">@Resources.Multi.Filter</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @* </ Hiện thị thông tin> *@
        @(Html.Kendo()
        .Grid(Model)
        .Name("Grid")
                //.HtmlAttributes(new { style = "height: auto;" })
        .Columns(columns =>
        {
            //columns.Bound(p => p.RegionID).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=RegionID#'  />").Width(35).Filterable(false).Sortable(false);
            columns.Bound(p => p.RegionID).Width(100).Title(Resources.Multi.RegionCode);
            columns.Bound(p => p.RegionName).Width(120).Title(Resources.Multi.MenuRegionDefinition);
            columns.Bound(p => p.CountryName).Width(180).Title(Resources.Multi.MenuCountryDefinition);
            columns.Bound(p => p.AliasName).Width(180).Title(Resources.Multi.Definition);
            //columns.Bound(p => p.Active).Width(100).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
            columns.Command(command => { command.Custom("Mapping").Text(Resources.Multi.Mapping).HtmlAttributes(new { @class = "btn btn-success" }).Click("Mapping"); }).Width(65).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top", @href = "javascript:void(0)" }).Title(Resources.Multi.Mapping);
            columns.Bound(p => p.RowCreatedUser).Width(100).Title(Resources.Multi.CreatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
            columns.Bound(p => p.RowCreatedTime).Width(100).Format("{0:" + Resources.Multi.DateFormat + "}").Title(Resources.Multi.CreatedAt).ClientTemplate("#=ConvertTimeZone(RowCreatedTime," + Constants.TIME_ZONE + ")#");
            columns.Bound(p => p.RowLastUpdatedUser).Width(100).Title(Resources.Multi.UpdatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
            columns.Bound(p => p.RowLastUpdatedTime).Format("{0:" + Resources.Multi.DateFormat + "}").Width(100).Title(Resources.Multi.UpdatedAt).ClientTemplate("#if(kendo.toString(RowLastUpdatedTime,'dd/MM/yyyy') != '01/01/1900'){#" + "#= ConvertTimeZone(RowLastUpdatedTime," + Constants.TIME_ZONE + ") #" + "#}#").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
        })
        .ToolBar(toolbar =>
        {
            toolbar.Custom()
            .Text(Resources.Multi.ExportMapping)
            .HtmlAttributes(new { @class = "btn btn-primary" })
            .Url(Url.Action("ExportExcelAllMappinged", "MappingLocation", new { filter = "~", sort = "~" }));
            toolbar.Custom()
            .Text(Resources.Multi.ExportNonMapping)
            .HtmlAttributes(new { @class = "btn btn-danger" })
            .Url(Url.Action("ExportAllListWaitingMapping", "MappingLocation", new { filter = "~", sort = "~", organizationId = "~" }));
        })
        .Events(events => { events.DataBound("dataBound"); events.DetailExpand("detailExpand"); })
        .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
        .Navigatable()
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Scrollable(scrollable => scrollable.Virtual(false))
        .Sortable()
        .ColumnMenu()
        .Filterable()
                //.Selectable(selectable => selectable.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
        .Resizable(resize => resize.Columns(true))
        .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .PageSize(50)
        .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
            .Model(model =>
            {
                model.Id(p => p.RegionID);
                model.Field(p => p.RegionID).Editable(false);
                model.Field(p => p.RowCreatedUser).Editable(false);
                model.Field(p => p.RowCreatedTime).Editable(false);
                model.Field(p => p.RowLastUpdatedTime).Editable(false);
                model.Field(p => p.RowLastUpdatedUser).Editable(false);
                model.Field(p => p.RegionName).Editable(false);
                model.Field(p => p.CountryName).Editable(false);
                model.Field(p => p.AliasName).Editable(false);
            })
            .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
            .Read("MappingLocation_Read", "MappingLocation")
                //.Create("Alias_Create", "AliasDefinition")
                //.Update("Alias_Update", "AliasDefinition")
            )
        )
    </div>
</div>
<script>
    $("#listAlias").chosen();
    $("#listCountry").chosen();
    function Mapping(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location = '@Url.Action("Mapping", "MappingLocation")/' + dataItem.RegionID;
    }
    $('#FileUploadOther').ace_file_input({
        no_file: 'No File ...',
        btn_choose: 'Choose',
        btn_change: 'Change',
        droppable: false,
        onchange: null,
        thumbnail: false //| true | large
        //whitelist:'gif|png|jpg|jpeg'
        //blacklist:'exe|php'
        //onchange:''
        //
    });
    $('#importOther').bind('click', function () {
        $("#windowOther").kendoWindow({
            actions: {}, /*from Vlad's answer*/
            draggable: true,
            height: "300px",
            modal: true,
            resizable: false,
            width: "500px",
            visible: false /*don't show it yet*/
        }).data("kendoWindow").center().open();
    });
    function importexcel() {
        if ($("#FileUploadOther").val() == '') {
            $.gritter.add({
                title: '',
                text: 'Please choose file import.',
                class_name: 'gritter-error'
            });
            return false;
        }
        else {
            $('#ImportformOther').submit();
        }
    }
    (function () {
        $("#ImportformOther").ajaxForm({
            beforeSend: function () {
                $("#windowOther").data("kendoWindow").close();
                $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
            },
            uploadProgress: function (event, position, total, percentComplete) {
            },
            success: function (data) {
                if (data.success) {
                    $("#Grid").data("kendoGrid").dataSource.read();
                    //$(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
                    $.gritter.add({
                        title: '',
                        text: 'Import successfully ' + data.total + ' record(s)',
                        class_name: 'gritter-success'
                    });
                }
                else {
                    $.gritter.add({
                        title: '',
                        text: 'Import Error',
                        class_name: 'gritter-error'
                    });
                    $("#Grid").data("kendoGrid").dataSource.read();
                }
            },
            complete: function (xhr) {
            }
        });

    })();
    function filter() {

        grid = $("#Grid").data("kendoGrid");
        var AliasName = $("#AliasName").val();
        var filter = { logic: "and", filters: [] };
        var filterAliasName = { logic: "or", filters: [] };
        var listAlias = $("#listAlias option:selected");
        var listCountry = $("#listCountry option:selected");
        var filterDescription = { logic: "or", filters: [] };
        var filterCountryName = { logic: "or", filters: [] };
        if (AliasName) {
            for (var i = 0; i < AliasName.split(';').length; i++) {
                //filterAliasName.filters.push({ field: "AliasName", operator: "eq", value: AliasName.split(';')[i] });
                filterAliasName.filters.push({ field: "RegionName", operator: "contains", value: AliasName.split(';')[i] });
                //filterAliasName.filters.push({ field: "CountryName", operator: "eq", value: AliasName.split(';')[i] });
            }
            filter.filters.push(filterAliasName);
        }
        if (listAlias.length > 0) {
            for (var i = 0; i < listAlias.length; i++) {
                var option = listAlias[i].value;
                if (option == "") {
                    filterDescription.filters.push({ field: "AliasName", operator: "contains", value: "" });
                }
                filterDescription.filters.push({ field: "AliasName", operator: "eq", value: option });
            }
            filter.filters.push(filterDescription);
        }
        if (listCountry.length > 0) {
            for (var i = 0; i < listCountry.length; i++) {
                var option = listCountry[i].value;
                if (option == "") {
                    filterCountryName.filters.push({ field: "CountryName", operator: "contains", value: "" });
                }
                filterCountryName.filters.push({ field: "CountryName", operator: "eq", value: option });
            }
            filter.filters.push(filterCountryName);
        }
        grid.dataSource.filter(filter);
    }
    $('#AliasName').bind('keypress', function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            filter();
        }
    });
    function DeleteAlias() {
        var listrowid = "";
        $('#Grid').find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            var c = confirm("@Resources.Multi.DeleteConfirm");
            if (c == true) {
                $.post(r + "/AliasDefinition/DeleteAlias", { data: listrowid, }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: '@Resources.Multi.Delete @Resources.Multi.Successfully',
                            class_name: 'gritter-success'
                        });
                        $("#Grid").data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAll').prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                        $("#Grid").data("kendoGrid").dataSource.read();
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: '@Resources.Multi.Please @Resources.Multi.Select.ToLower() data.',
                class_name: 'gritter-error'
            });
            return false;
        }
    }
    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    $(window).resize(function () {
        resizeGrid();
    });
    var expandedRow;
    var curunitid;
    function detailExpand(e) {
        // Only one open at a time
        if (expandedRow != null && expandedRow[0] != e.masterRow[0]) {
            var grid = $('#Grid').data('kendoGrid');
            grid.collapseRow(expandedRow);
        }
        expandedRow = e.masterRow;
        var masterDataItem = $('#Grid').data('kendoGrid').dataItem(expandedRow);
        curunitid = masterDataItem.ExamID;
    }
    function dataBound(e) {
        resizeGrid();
        var grid = this;
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
       .options.parameterMap({
           page: grid.dataSource.page(),
           sort: grid.dataSource.sort(),
           filter: grid.dataSource.filter()
       });
        //Get the export link as jQuery object
        //var $exportLink = grid.element.find('.exportClass');
        //var href = $exportLink.attr('href');
        //href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
        //href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));
        //$exportLink.attr('href', href);

        // Get the export link as jQuery object
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                    $("#Grid").data("kendoGrid").dataSource.read();
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        } else {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
        }
    }
    function onRequestEnd(e) {
       
        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Update @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid");
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 30);
    }
    $('.icon-chevron-up').bind('click', function () {
        setInterval(function () {
            resizeGrid();
        }, 500)
    });
</script>