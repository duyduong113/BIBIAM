@model IEnumerable<ERPAPD.Models.ERPAPD_Product>
@{
    //ViewBag.Title = Resources.Multi.ListOfDistrict;
    ViewBag.Title = "Danh sách sản phẩm";

    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
    string FormatDateTime = HttpContext.Current.Session["DateTime"] != null ? HttpContext.Current.Session["DateTime"].ToString() : "MM/dd/yyyy";

}
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="row-fluid">
                <input type="text" id="txtText" placeholder="Tên sản phẩm ... " style="width: 250px;" />
                <button type="button" id="btnSearch" class="btn btn-primary btn-small" style="float:none;" onclick="filter()">Tìm kiếm</button>
            </div>

        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @(Html.Kendo().Grid(Model)
        .Name("Grid")
        .Columns(columns =>
        {
            //columns.Bound(p => p.PKProduct).HeaderTemplate("<input style='text-align:center;opaDistrict:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=Id#'  />").Width(25).Filterable(false).Sortable(false);
            columns.Bound(p => p.Code).Title("Mã").Width(150);
            columns.Bound(p => p.Name).Title("Tên sản phẩm").Width(200);
            columns.Bound(p => p.ProductTypeName).Title("Loại sản phẩm").Width(130);
            columns.Bound(p => p.WebsiteName).Title("Website").Width(120);
            columns.Bound(p => p.PageTypeName).Title("Loại trang").Width(150);
            columns.Bound(p => p.CategoryName).Title("Chuyên mục").Width(150);
            columns.Bound(p => p.LocationName).Title("Vị trí").Width(150);
            columns.Bound(p => p.NatureName).Title("Tính chất").Width(100);
            columns.Bound(p => p.Size).Title("Kích thước").Width(100);
            columns.Bound(p => p.Number).Title("Số lượng").Width(100);
            columns.Bound(p => p.Price).Title("Giá").Width(100).Format("{0:N0}");
            columns.Bound(p => p.Time).Title("Thời gian").Width(100);
            columns.Bound(p => p.Capacity).Title("Trọng lượng").Width(100);
            columns.Bound(p => p.Statistics).Width(100);
            columns.Bound(p => p.BeginDate).Title("Ngày bắt đầu").Width(100).Format("{0:" + FormatDateTime + "}").ClientTemplate("#if(kendo.toString(BeginDate,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(BeginDate,'" + FormatDateTime + "') #" + "#}#");
            columns.Bound(p => p.EndDate).Title("Ngày kết thúc").Width(100).Format("{0:" + FormatDateTime + "}").ClientTemplate("#if(kendo.toString(EndDate,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(EndDate,'" + FormatDateTime + "') #" + "#}#");
            columns.Bound(p => p.Note).Title("Ghi chú").Width(100);
            columns.Bound(p => p.Status).Width(100);
            columns.Bound(p => p.FileName).Width(100);
        })
        .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
        .Navigatable()
        .Scrollable(scrollable => scrollable.Virtual(false))
        .Sortable()
        .Resizable(resize => resize.Columns(true))
        .DataSource(dataSource => dataSource.Ajax()
                                            .Read(read => read.Action("Read", "CRM_Product"))
                                            .PageSize(100))
         )
       
    </div>
</div>

<script>
    $(document).ready(function () {
        resizeGrid();
    });

    function dataBound(e) {
        resizeGrid();
    }
   
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid");
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 30);
    }
    $('.icon-chevron-up').bind('click', function () {
        setInterval(function () {
            resizeGrid();
        }, 500)
    });

    function filter() {
        var grid = $("#Grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };
        var filteText = { logic: "or", filters: [] };

        var text = $("#txtText").val();
        if (text) {
            filteText.filters.push({ field: "Name", operator: "contains", value: text });
            filter.filters.push(filteText);
        }
        grid.dataSource.filter(filter);
    }
    $('#txtText').bind('keypress', function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            filter();
        }
    });
</script>
<style>
    .dropdown-menu > li > a {
        margin-bottom: 4px !important;
        text-align: left;
    }
</style>