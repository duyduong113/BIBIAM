@model IEnumerable<ERPAPD.Models.CRM_FAQ_Topic>
@{
    ViewBag.Title = "Chủ đề FAQ";
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
}
<style>
    label.error {
        border: none !important;
        background-color: #fff !important;
        color: #ff0000;
    }

    #CustomerForm .control-label {
        text-align: left;
    }

    .actionGird {
        margin-left: 2px;
    }

    div.k-window-content {
        overflow: inherit;
    }
</style>
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="row-fluid">
                <div class="span4">
                    <input type="text" id="txtInfoFilter" style ="width:92%" placeholder="Tên FAQ, mô tả....">
                </div>
                <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="doSearch()" style="float:none">@Resources.Multi.Filter</button>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid mn-list">
    @(Html.Kendo()
    .Grid<ERPAPD.Models.CRM_FAQ_Topic>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.Id)
                .Width(30)
                .Filterable(false)
                .Sortable(false)
                .HeaderTemplate("<input type='checkbox' id='checkboxcheckAll'  onClick='checkAll(this)' />")
                .ClientTemplate("<input class='checkrowid' type='checkbox' id='#=Id#'  />")
                .HtmlAttributes(new { style = "text-align: center" })
                .HeaderHtmlAttributes(new { style = "text-align: center" });
        columns.Bound(p => p.Name).Width(150).Title("Tên chủ đề").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Description).Width(350).Title(Resources.Multi.Desc).Format("{0:N0}").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.CreatedAt).Width(120).Format("{0:dd/MM/yyyy}").Title("Ngày tạo").HtmlAttributes(new { style = "text-align: right" }); 
        columns.Bound(p => p.CreatedBy).Width(100).Title(Resources.Multi.CreatedBy);
        columns.Bound(p => p.UpdatedAt).Width(120).Format("{0:dd/MM/yyyy}").Title(Resources.Multi.UpdatedAt).ClientTemplate("#if(kendo.toString(UpdatedAt,'dd/MM/yyyy') != '01/01/1900'){#" + "#=kendo.toString(UpdatedAt,'dd/MM/yyyy')#" + "#}#").HtmlAttributes(new { style = "text-align: right" });
        columns.Bound(p => p.UpdatedBy).Width(100).Title(Resources.Multi.UpdatedBy);
    })
  .ToolBar(toolBar =>
  {
      toolBar.Template(@<text>
        <div class="pull-left">
            <a class="btn btn-success btn-small" href="javascript:void(0)" id="btnGridAdd" onclick="Create()">
                @*<i class="icon-plus"></i>*@ @Resources.Multi.btnAdd
            </a>
            <a class="btn btn-primary btn-small" href="javascript:void(0)" id="btnGridSave" onclick="Update()">
                @*<i class="icon-plus"></i>*@ @Resources.Multi.btnSave
            </a>
            <a class="btn btn-default btn-small " href="javascript:void(0)" id="btnGridCancel" onclick="Cancel()">
                @*<i class="icon-plus"></i>*@ Hủy thay đổi
            </a>
            <a class="btn btn-small btn-danger " href="javascript:void(0)" id="btnGridDelete" onclick="showConfirmPopup(1)">
                @*<i class="icon-plus"></i>*@ Xóa
            </a>
        </div>
    </text>);
  })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Events(events => { events.DataBound("dataBound"); })
    .Pageable()
    .Sortable()
    .Scrollable()
    .Navigatable()
    //.Filterable()
    .Reorderable(r => r.Columns(true))
    .Resizable(r => r.Columns(true))
    //.ColumnMenu()
    .DataSource(
                dataSource => dataSource
                .Ajax()
                .Batch(true)
                .Model(model =>
                {
                    model.Id(p => p.Id);
                    model.Field(p => p.Id).Editable(false);
                    model.Field(p => p.CreatedAt).Editable(false);
                    model.Field(p => p.CreatedBy).Editable(false);
                    model.Field(p => p.UpdatedAt).Editable(false);
                    model.Field(p => p.UpdatedBy).Editable(false);
                })
                .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                .PageSize(20)
                .Create(create => create.Action("Create", "CRMFAQTopic"))
                .Read(read => read.Action("Read", "CRMFAQTopic"))
                .Update(update => update.Action("Update", "CRMFAQTopic"))
    )
    )
</div>
@Html.Partial("_popup")
<script>
    $(document).ready(function () {
       
    });

    function Update() {
        if ($('#grid').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#grid').data('kendoGrid').saveChanges();
        }
    }
    function Create() {
        $("#grid").data("kendoGrid").dataSource.insert();
    }
    function Cancel() {
        $('#grid').data('kendoGrid').cancelChanges();
    }

    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid");
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 10);
    }
    function dataBound(e) {
        resizeGrid();
        var grid = this;
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
           .options.parameterMap({
               page: grid.dataSource.page(),
               sort: grid.dataSource.sort(),
               filter: grid.dataSource.filter()
           });
        //var $exportLink = grid.element.find('.exportClass');
        //var href = $exportLink.attr('href');
        //href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
        //href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));
        //$exportLink.attr('href', href);
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
        }
    }
    function onRequestEnd(e) {
        if (e.type == "update" || e.type == "create" || e.type == "delete") {
            if (e.response.Errors == null) {
                if (e.response.Errors == null) {
                    $.gritter.add({
                        title: '',
                        text: 'Cập nhật dữ liệu thành công',
                        class_name: 'gritter-success'
                    });
                }
                $("#grid").data("kendoGrid").dataSource.read();
            }
        }
    }
    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    function doSearch() {
        grid = $("#grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };
        var filterInfor = { logic: "or", filters: [] };


        var searchInfor = $("#txtInfoFilter").val().trim();
        if (searchInfor) {
            filterInfor.filters.push({ field: "Name", operator: "contains", value: searchInfor });
            filterInfor.filters.push({ field: "Description", operator: "contains", value: searchInfor });
            filter.filters.push(filterInfor);
        }

        grid.dataSource.filter(filter);
    }
    $('#txtInfoFilter').bind('keypress', function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            doSearch();
        }
    });

</script>
