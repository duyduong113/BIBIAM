@{
    ViewBag.Title = Resources.Multi.Survey;
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
    var typeAnswer = new List<Object>();
    typeAnswer.Add(new { Name = "Multi choice" });
    typeAnswer.Add(new { Name = "Single choice" });
    typeAnswer.Add(new { Name = "Free text" });
    ViewBag.typeAnswer = typeAnswer;

    var typeChannel = new List<Object>();
    typeChannel.Add(new { Name = "Email Survey" });
    typeChannel.Add(new { Name = "Field Survey" });
    typeChannel.Add(new { Name = "Call Survey" });
    ViewBag.typeChannel = typeChannel;

    var listCustomer = new List<Object>();
    listCustomer.Add(new { Name = "Exclude New Customer" });
    listCustomer.Add(new { Name = "Include New Customer" });
    ViewBag.listCustomer = listCustomer;

    var listStatus = new List<Object>();
    listStatus.Add(new { Name = "Hidden" });
    listStatus.Add(new { Name = "Shown" });
    ViewBag.listStatus = listStatus;

    var listAnswer = new List<Object>();
    listAnswer.Add(new { Name = "No" });
    listAnswer.Add(new { Name = "Yes" });
    ViewBag.listAnswer = listAnswer;
}
<style>
    .k-picker-wrap .k-state-default {
        height: 28px;
    }

    .country .chosen-choices {
        width: 250px;
    }

    .country .chosen-drop {
        width: 250px;
    }

    .country .chosen-container {
        width: 250px !important;
    }

    .branch .chosen-choices {
        width: 180px;
    }

    .branch .chosen-drop {
        width: 180px;
    }

    .branch .chosen-container {
        width: 180px !important;
    }

    .org .chosen-choices {
        width: 280px;
    }

    .org .chosen-drop {
        width: 280px;
    }

    .org .chosen-container {
        width: 280px !important;
    }

    .newlistOrg .chosen-choices {
        width: 250px;
    }

    .newlistOrg .chosen-drop {
        width: 250px;
    }

    .newlistOrg .chosen-container {
        width: 250px !important;
    }
</style>
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div id="newlistICareID" style="display: inline-block;" class="newlistOrg">
                <input type="text" id="txtQuestionDescription" name="txtQuestionDescription" placeholder="Lọc theo mô tả..." style="width: 250px;" />
                <select name="select" id="ActiveVisiQuestion" class='chosen-select span2' style="width:250px;" multiple data-placeholder="@Resources.Multi.Select @Resources.Multi.Active.ToLower()...">
                    <option value="true">@Resources.Multi.Active</option>
                    <option value="false">@Resources.Multi.InActive</option>
                </select>
                <select name="select" id="ActiveTypeQuestion" class='chosen-select span2' style="width:250px;" multiple data-placeholder="@Resources.Multi.ChooseTypeQuestion...">
                    <option value="Single choice">Single choice</option>
                    <option value="Multi choice">Multi choice</option>
                    <option value="Free text">Free text</option>
                </select>
            </div>
            <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="filterQuestion()" style="float:none">@Resources.Multi.Filter</button>
        </div>
      
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @* </ Hiện thị thông tin> *@
        @(Html.Kendo()
                .Grid<ERPAPD.Models.CRM_Survey_Question>()
                .Name("GridQuestion")
                .HtmlAttributes(new { style = "height: auto;" })
                .Columns(columns =>
                {
                    columns.Bound(p => p.QuestionID).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll2'  onClick='checkAll2(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=QuestionID#'  />").Width(35).Filterable(false).Sortable(false);
                    //columns.Bound(p => p.QuestionID).HeaderTemplate("").HtmlAttributes(new { cid = "#=QuestionID#" }).ClientTemplate("<button type='button' class='btn-success' style='display:inline-block;color:white;' onclick ='GetCompany(this)' ><i class='icon-ok bigger-100'></i>Detail</button>").Title("Action").Width(65);
                    //columns.Bound(p => p.QuestionID).Hidden();
                    columns.Bound(p => p.Description).Title(Resources.Multi.Desc).Width(250).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                    columns.ForeignKey(o => o.Type, (System.Collections.IEnumerable)ViewBag.typeAnswer, "Name", "Name").Title(Resources.Multi.Catagory).EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).Width(100);
                    columns.ForeignKey(p => p.CategoryID, (System.Collections.IEnumerable)ViewBag.Category, "CategoryID", "Name").Title(Resources.Multi.Group).EditorTemplateName("GridNullableForeignKey").Width(150).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                    columns.Bound(p => p.Active).Title(Resources.Multi.Active).Width(65).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }); ;
                    //columns.Bound(p => p.Description).Width(350).EditorTemplateName("TextArea").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                    //columns.ForeignKey(p => p.ParentCategoryID, (System.Collections.IEnumerable)ViewBag.Category, "CategoryID", "Name").EditorTemplateName("GridNullableForeignKey").Width(150).Title("ParentCategory").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                    //columns.ForeignKey(p => p.Visibility, (System.Collections.IEnumerable)ViewBag.listStatus, "Name", "Name").EditorTemplateName("GridNullableForeignKey").Width(110).Title("Visibility").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });

                    columns.Bound(p => p.CreatedBy).Width(100).Title(Resources.Multi.CreatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
                    columns.Bound(p => p.CreatedAt).Width(90).Format("{0:" + Resources.Multi.DateFormat + "}").Title(Resources.Multi.CreatedAt).ClientTemplate("#=ConvertTimeZone(CreatedAt," + Constants.TIME_ZONE + ")#");
                    columns.Bound(p => p.UpdatedBy).Width(100).Title(Resources.Multi.UpdatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
                    columns.Bound(p => p.UpdatedAt).Format("{0:" + Resources.Multi.DateFormat + "}").Width(90).Title(Resources.Multi.UpdatedAt).ClientTemplate("#if(kendo.toString(UpdatedAt,'dd/MM/yyyy') != '01/01/1900'){#" + "#= ConvertTimeZone(UpdatedAt," + Constants.TIME_ZONE + ") #" + "#}#").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });


                })
                .ToolBar(toolbar =>
                {
                    toolbar.Template(@<text>
                        <div class="pull-left">
                            @if (AllowCreate)
                                {
                                <a class="btn btn-success btn-small" href="javascript:void(0)" id="btnGridAdd">
                                    @*<i class="icon-plus"></i>*@ @Resources.Multi.Add
                                </a>
                                }
                            @if (AllowUpdate)
                                {
                                <a class="btn btn-primary btn-small" href="javascript:void(0)" id="btnGridSave">
                                    @*<i class="icon-ok"></i>*@ @Resources.Multi.GridSave
                                </a>
                                <a class="btn btn-default btn-small" href="javascript:void(0)" id="btnGridCancel">
                                    @*<i class="icon-remove"></i>*@ @Resources.Multi.GridCancel
                                </a>
                                }
                            <div class="btn-group" style="margin-left: 20px">
                                <button data-toggle="dropdown" class="btn btn-small btn-inverse dropdown-toggle">
                                    Thao tác khác
                                    <span class="caret"></span>
                                </button>
                                <ul class="dropdown-menu" style="min-width:110px !important">
                                    <li>
                                        @if (AllowDelete)
                                            {
                                            <a class="btn btn-small btn-danger" href="javascript:void(0)" id="btnGridDelete" onclick="showConfirmPopup('GridQuestion', 'checkboxcheckAll2', -1)">
                                                @*<i class=" icon-trash">   </i>*@@Resources.Multi.GridDelete
                                            </a>
                                            }
                                    </li>
                                    @*<li>
                                        @if (AllowExport)
                                                {
                                            <a class="btn btn-small btn-info" href="@Url.Content("~/CRMSurvey/ExportCategory")" id="btnGridExport">
                                                <i class="fa fa-file-excel-o fa-1"></i> @Resources.Multi.GridExport
                                            </a>
                                            }
                                    </li>
                                    <li>
                                        <a class="btn btn-small btn-purple" style="text-align:left" href="javascript:void(0)" id="importOther" onclick="importCategory()">
                                            <i class="fa fa-file-excel-o fa-1"></i> @Resources.Multi.GridImport
                                        </a>
                                    </li>*@
                                </ul>
                            </div>
                        </div>
                        </text>);
                    //toolbar.Create().Text(Resources.Multi.Add).HtmlAttributes(new { @style = "display:" + (AllowCreate ? "inline-block" : "none") });
                    //toolbar.Save().SaveText(Resources.Multi.Save).CancelText(Resources.Multi.Cancel).HtmlAttributes(new { @style = "display:" + (AllowUpdate ? "inline-block" : "none") });
                    //toolbar.Custom()
                    //  .Text(Resources.Multi.Export)
                    //.HtmlAttributes(new { @class = "export btn btn-primary" })
                    //.Url(Url.Action("ExportQuestion", "Survey", new { filter = "~", sort = "~", QuestionID = "~" }));
                    //toolbar.Custom()
                    //.Text(Resources.Multi.Import)
                    //.HtmlAttributes(new { id = "importListColumn", @class = "btn btn-purple", Href = "javascript:importQuestion();" });
                    //toolbar.Custom()
                    //.Text(Resources.Multi.Delete)
                    //.HtmlAttributes(new { @id = "btnDelete", @class = "btn btn-danger", @style = "display:" + (AllowDelete ? "inline-block" : "none"), @Href = "javascript:DeleteQuestion()" });
                })
                .Events(events => { events.DetailExpand("detailExpand"); })
                .Events(events => { events.DataBound("dataBoundQuestion"); })
                .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
                .Navigatable()
                .Editable(editable => editable.Mode(GridEditMode.InCell))
                .Scrollable(scrollable => scrollable.Virtual(false))
                .Sortable()
                //.Selectable(selectable => selectable.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
                .Resizable(resize => resize.Columns(true))
                .DataSource(dataSource => dataSource
                .Ajax()
                .Batch(true)
                .PageSize(50)
                .Events(events => { events.Error("error_handlerQuestion"); events.RequestEnd("onRequestEndQuestion"); })
                .Model(model =>
                {
                    model.Id(p => p.QuestionID);
                    model.Field(p => p.QuestionID).Editable(false);
                    model.Field(p => p.CreatedBy).Editable(false);
                    model.Field(p => p.CreatedAt).Editable(false);
                    model.Field(p => p.UpdatedAt).Editable(false);
                    model.Field(p => p.UpdatedBy).Editable(false);
                    model.Field(p => p.Active).DefaultValue(true);

                })
                        .Read("Question_Read", "CRMSurvey")
                        .Create("Question_Create", "CRMSurvey")
                        .Update("Question_Update", "CRMSurvey")
                )
                .ClientDetailTemplateId("SurveyQuestionDetails")
        )
    </div>
</div>
<script id="SurveyQuestionDetails" type="text/kendo-tmpl">
    #if(Type =="Multi choice"){#
    <div class="span4">
        @(Html.Kendo()
        .TabStrip()
                .HtmlAttributes(new { @style = "width:1250px;" })
        .Name("tabStrip_#=QuestionID#")
        .SelectedIndex(0)
        .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
        .Items(items =>
        {
            items.Add().Text(Resources.Multi.List + " " + Resources.Multi.Answer.ToLower()).Content(@<text>
        @(Html.Kendo()
        .Grid<ERPAPD.Models.CRM_Survey_AnswerList>()
        .Name("GridSubjectDetails_#=QuestionID#")
        .Columns(columns =>
        {
            columns.Bound(p => p.AnswerID).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAllAnswer'  onClick='checkAllAnswer(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='\\#=AnswerID\\#'  />").Width(30).Filterable(false).Sortable(false);
            columns.Bound(p => p.AnswerDescription).Width(350).Title(Resources.Multi.Answer).HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.ForeignKey(p => p.Answer, (System.Collections.IEnumerable)ViewBag.listAnswer, "Name", "Name").Title(Resources.Multi.AttachFreetext).EditorTemplateName("GridNullableForeignKey").Width(110).HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            //columns.ForeignKey(p => p.Visibility, (System.Collections.IEnumerable)ViewBag.listStatus, "Name", "Name").EditorTemplateName("GridNullableForeignKey").Width(110).Title("Visibility").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(p => p.Content).Width(250).Title(Resources.Multi.TooltipInfo).HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(p => p.Active).Title(Resources.Multi.Active).Width(50).HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(o => o.CreatedAt).Title(Resources.Multi.CreatedAt).Format("{0:" + Resources.Multi.DateFormat + "}").Width(110);
            columns.Bound(o => o.CreatedBy).Title(Resources.Multi.CreatedBy).Width(110);
            columns.Bound(o => o.UpdatedAt).Title(Resources.Multi.UpdatedAt).Format("{0:" + Resources.Multi.DateFormat + "}").Width(110).ClientTemplate("\\#if(kendo.toString(UpdatedAt,'dd/MM/yyyy') != '01/01/1900'){\\#" + "\\#= ConvertTimeZone(UpdatedAt," + Constants.TIME_ZONE + ") \\#" + "\\#}\\#").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" }); ;
            columns.Bound(o => o.UpdatedBy).Title(Resources.Multi.UpdatedBy).Width(110);

        })
        .ToolBar(toolBar =>
        {

                    toolBar.Create().Text(Resources.Multi.Add).HtmlAttributes(new { @style = "display:" + (AllowCreate ? "inline-block" : "none") });
                    toolBar.Save().SaveText(Resources.Multi.Save).CancelText(Resources.Multi.Cancel).HtmlAttributes(new { @style = "display:" + (AllowUpdate ? "inline-block" : "none") });
                    toolBar.Custom()
                    .Text(Resources.Multi.Export)
                    .HtmlAttributes(new { @class = "export btn btn-primary" })
                    .Url(Url.Action("ExportAnswerList", "Survey", new { filter = "~", sort = "~", QuestionID = "~" }));
                    toolBar.Custom()
                    .Text(Resources.Multi.Delete)
                    .HtmlAttributes(new { @id = "btnDelete", @class = "btn btn-danger btn-small", @style = "display:" + (AllowDelete ? "inline-block" : "none"), @Href = "javascript:DeleteAnswer();" });

        })
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Events(events => { events.DataBound("dataBoundAnswer"); })
        .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .Events(events => { events.Error("error_handler_SubDetails"); events.RequestEnd("onRequestEndSubDetails"); })
        .PageSize(20)
        .Model(model =>
        {
            model.Id(p => p.AnswerID);
            model.Field(p => p.AnswerID).Editable(false);
            model.Field(p => p.CreatedBy).Editable(false);
            model.Field(p => p.CreatedAt).Editable(false);
            model.Field(p => p.UpdatedBy).Editable(false);
            model.Field(p => p.UpdatedAt).Editable(false);
            model.Field(p => p.Active).DefaultValue(true);
            model.Field(p => p.Answer).DefaultValue("No");
        })
        .Read(read => read.Action("AnswerList_Read", "CRMSurvey", new { QuestionID = "#=QuestionID#" }))
                .Create("AnswerList_Create", "CRMSurvey", new { QuestionID = "#=QuestionID#" })
                .Update("AnswerList_Update", "CRMSurvey", new { QuestionID = "#=QuestionID#" })
        //.Destroy("SubjectDetails_Destroy", "TrainningOnlineSubject", new { SubID = "#=SubjectID#", classId = "#=SubjectID#", courseID = "#=CourseID#", teacher = "#=Teacher#" })
        )
        .Pageable(pager => pager
        .PageSizes(new[] { 20, 100, 200, 300 }))

        .Resizable(resize => resize.Columns(true))
        .Sortable()
                        //.Filterable()
                        //.ColumnMenu()
        .ToClientTemplate())

            </text>);
            items.Add().Text("Cài đặt câu trả lời").Content(@<text>
                @(Html.Kendo()
        .Grid<ERPAPD.Models.CRM_Survey_AnswerConfig>()
        .Name("GridConfig_#=QuestionID#")
        .Columns(columns =>
        {
            columns.Bound(p => p.Id).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll3'  onClick='checkAll3(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='\\#=Id\\#'  />").Width(30).Filterable(false).Sortable(false);
            columns.Bound(p => p.Description).Width(250).Title(Resources.Multi.Desc + " " + Resources.Multi.Answer.ToLower());
            columns.Bound(p => p.Detail).Width(50).Title(Resources.Multi.Detail).HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            //columns.ForeignKey(p => p.Visibility, (System.Collections.IEnumerable)ViewBag.listStatus, "Name", "Name").EditorTemplateName("GridNullableForeignKey").Width(110).Title("Visibility").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            //columns.Bound(p => p.Content).Width(250).Title("Tooltips Content").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(p => p.Active).Title(Resources.Multi.Active).Width(50).HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(o => o.CreatedAt).Title(Resources.Multi.CreatedAt).Format("{0:" + Resources.Multi.DateFormat + "}").Width(110);
            columns.Bound(o => o.CreatedBy).Title(Resources.Multi.CreatedBy).Width(110);
            columns.Bound(o => o.UpdatedAt).Title(Resources.Multi.UpdatedAt).Format("{0:" + Resources.Multi.DateFormat + "}").Width(110).ClientTemplate("\\#if(kendo.toString(UpdatedAt,'dd/MM/yyyy') != '01/01/1900'){\\#" + "\\#= ConvertTimeZone(UpdatedAt," + Constants.TIME_ZONE + ") \\#" + "\\#}\\#").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" }); ;
            columns.Bound(o => o.UpdatedBy).Title(Resources.Multi.UpdatedBy).Width(110);
            //columns.Command(command => command.Destroy()).Width(110);
        })
        .ToolBar(toolBar =>
        {
            toolBar.Save().SaveText(Resources.Multi.Save).CancelText(Resources.Multi.Cancel).HtmlAttributes(new { @style = "display:" + (AllowUpdate ? "inline-block" : "none") });
        })
        .Editable(editable => editable.Mode(GridEditMode.InCell))
                        //.Events(events => { events.DataBound("dataBound3"); })
        .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(false)
        .Events(events => { events.Error("error_handler_Config"); events.RequestEnd("onRequestEndConfig"); })
        .PageSize(20)
        .Model(model =>
        {
            model.Id(p => p.Id);
            model.Field(p => p.Id).Editable(false);
            model.Field(p => p.CreatedBy).Editable(false);
            model.Field(p => p.CreatedAt).Editable(false);
            model.Field(p => p.UpdatedBy).Editable(false);
            model.Field(p => p.UpdatedAt).Editable(false);
            model.Field(p => p.Description).Editable(false);
            model.Field(p => p.Active).DefaultValue(true);
        })
                .Read(read => read.Action("Configuration_Read", "CRMSurvey", new { QuestionID = "#=QuestionID#" }))
            //.Create("AnswerList_Create", "SurveyCategory", new { QuestionID = "#=QuestionID#" })
                .Update("Configuration_Update", "CRMSurvey", new { QuestionID = "#=QuestionID#" })
                        //.Destroy("SubjectDetails_Destroy", "TrainningOnlineSubject", new { SubID = "#=SubjectID#", classId = "#=SubjectID#", courseID = "#=CourseID#", teacher = "#=Teacher#" })
        )
        .Pageable(pager => pager
        .PageSizes(new[] { 20, 100, 200, 300 }))

        .Resizable(resize => resize.Columns(true))
        .Sortable()
                        //.Filterable()
                        //.ColumnMenu()
        .ToClientTemplate())
            </text>);
        }).ToClientTemplate())
    </div>
    #}#
    #if(Type =="Single choice"){#
    <div class="span4">
        @(Html.Kendo()
        .TabStrip()
        .HtmlAttributes(new { @style = "width:1250px;" })
        .Name("tabStrip_#=QuestionID#")
        .SelectedIndex(0)
        .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
        .Items(items =>
        {
            items.Add().Text("Danh sách câu trả lời").Content(@<text>

                @(Html.Kendo()
        .Grid<ERPAPD.Models.CRM_Survey_AnswerList>()
        .Name("GridSubjectDetails_#=QuestionID#")
        .Columns(columns =>
        {
            columns.Bound(p => p.AnswerID).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAllAnswer'  onClick='checkAllAnswer(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='\\#=AnswerID\\#'  />").Width(30).Filterable(false).Sortable(false);
            columns.Bound(p => p.AnswerDescription).Width(350).Title(Resources.Multi.Desc + " " + Resources.Multi.Answer.ToLower()).HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.ForeignKey(p => p.Answer, (System.Collections.IEnumerable)ViewBag.listAnswer, "Name", "Name").Title(Resources.Multi.AttachFreetext).EditorTemplateName("GridNullableForeignKey").Width(110).HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            //columns.ForeignKey(p => p.Visibility, (System.Collections.IEnumerable)ViewBag.listStatus, "Name", "Name").EditorTemplateName("GridNullableForeignKey").Width(110).Title("Visibility").HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(p => p.Content).Width(250).Title(Resources.Multi.TooltipInfo).HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(p => p.Active).Title(Resources.Multi.Active).Width(50).HtmlAttributes(new { style = "background-color:rgb(223, 240, 216);color:rgb(70, 136, 71);" });
            columns.Bound(o => o.CreatedAt).Title(Resources.Multi.CreatedAt).Format("{0:" + Resources.Multi.DateFormat + "}").Width(110);
            columns.Bound(o => o.CreatedBy).Title(Resources.Multi.CreatedBy).Width(110);
            columns.Bound(o => o.UpdatedAt).Title(Resources.Multi.UpdatedAt).Format("{0:" + Resources.Multi.DateFormat + "}").Width(110).ClientTemplate("\\#if(kendo.toString(UpdatedAt,'dd/MM/yyyy') != '01/01/1900'){\\#" + "\\#= ConvertTimeZone(UpdatedAt," + Constants.TIME_ZONE + ") \\#" + "\\#}\\#").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" }); ;
            columns.Bound(o => o.UpdatedBy).Title(Resources.Multi.UpdatedBy).Width(110);

        })
        .ToolBar(toolBar =>
        {

            toolBar.Create().Text(Resources.Multi.Add).HtmlAttributes(new { @style = "display:" + (AllowCreate ? "inline-block" : "none") });
            toolBar.Save().SaveText(Resources.Multi.Save).CancelText(Resources.Multi.Cancel).HtmlAttributes(new { @style = "display:" + (AllowUpdate ? "inline-block" : "none") });

            toolBar.Custom()
            .Text("Delete")
            .HtmlAttributes(new { @id = "btnDelete", @class = "btn btn-danger btn-small", @style = "display:" + (AllowDelete ? "inline-block" : "none"), @Href = "javascript:DeleteAnswer();" });

        })
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Events(events => { events.DataBound("dataBoundAnswer"); })
        .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .Events(events => { events.Error("error_handler_SubDetails"); events.RequestEnd("onRequestEndSubDetails"); })
        .PageSize(20)
        .Model(model =>
        {
            model.Id(p => p.AnswerID);
            model.Field(p => p.AnswerID).Editable(false);
            model.Field(p => p.CreatedBy).Editable(false);
            model.Field(p => p.CreatedAt).Editable(false);
            model.Field(p => p.UpdatedBy).Editable(false);
            model.Field(p => p.UpdatedAt).Editable(false);
            model.Field(p => p.Active).DefaultValue(true);
            model.Field(p => p.Answer).DefaultValue("No");
        })
       .Read(read => read.Action("AnswerList_Read", "CRMSurvey", new { QuestionID = "#=QuestionID#" }))
       .Create("AnswerList_Create", "CRMSurvey", new { QuestionID = "#=QuestionID#" })
       .Update("AnswerList_Update", "CRMSurvey", new { QuestionID = "#=QuestionID#" })
                        //.Destroy("SubjectDetails_Destroy", "TrainningOnlineSubject", new { SubID = "#=SubjectID#", classId = "#=SubjectID#", courseID = "#=CourseID#", teacher = "#=Teacher#" })
        )
        .Pageable(pager => pager
        .PageSizes(new[] { 20, 100, 200, 300 }))

        .Resizable(resize => resize.Columns(true))
        .Sortable()
                        //.Filterable()
                        //.ColumnMenu()
        .ToClientTemplate())
            </text>);
        }).ToClientTemplate())
    </div>
    #}#
</script>
@(Html.Kendo()
      .Window()
      .Name("windowQuestion")
      .Title("ImportForm")
      .Content(@<text>
        <div class="row-fluid">
            <div class="span7">
                <form id="importQuestion" action="@Url.Content("~/CRMSurvey/ImportQuestion")" method="post" class="form-horizontal" enctype="multipart/form-data" style="margin-bottom:0px;">
                    <input type="file" class="FileUpload" name="FileUpload" />
                </form>
            </div>
            <button type="button" id="btnImportQuestion" class="btn btn-purple btn-small span2" style="float: right;">Import</button>
        </div>
        <div class="row-fluid">
            <a id="btndownload" style="display: none" class="btn btn-warning btn-small">@Resources.Multi.DownloadTemplateError</a>
        </div>
    </text>)
.Draggable()
.Resizable()
.Visible(false)
.Width(1000)
.Actions(actions => actions.Close())
)
@(Html.Kendo()
      .Window()
      .Name("windowimport")
      .Title("ImportForm")
      .Content(@<text>
        <div class="row-fluid">
            <div class="span7">
                <form id="importform" action="@Url.Content("~/CRMSurvey/ImportCategory")" method="post" class="form-horizontal" enctype="multipart/form-data" style="margin-bottom:0px;">
                    <input type="file" class="FileUpload" name="FileUpload" />
                </form>
            </div>
            <button type="button" id="btnImport" class="btn btn-purple btn-small span2" style="float: right;">Import</button>
        </div>
        <div class="row-fluid">
            <a id="btndownload" style="display: none" class="btn btn-warning btn-small">@Resources.Multi.DownloadTemplateError</a>
        </div>
    </text>)
.Draggable()
.Resizable()
.Visible(false)
.Width(1000)
.Actions(actions => actions.Close())
)
@Html.Partial("_popup")
<script>
    $('.FileUpload').ace_file_input({
        no_file: 'No File ...',
        btn_choose: 'Choose',
        btn_change: 'Change',
        droppable: false,
        onchange: null,
        thumbnail: false //| true | large
    });
    $("#slStatus, #ActiveVisiQuestion, #ActiveTypeQuestion, #ActiveManagement").chosen();
</script>
<!-- CRM_Survey_Question -->
<script>
 $('#btnGridAdd').click(function () {
     $("#GridQuestion").data("kendoGrid").dataSource.insert();
 })

 $('#btnGridSave').bind('click', function () {
     if ($('#GridQuestion').data('kendoGrid').dataSource.hasChanges() == true) {
         $('#GridQuestion').data('kendoGrid').saveChanges();
     }
 })

 $('#btnGridCancel').bind('click', function () {
     $('#GridQuestion').data('kendoGrid').cancelChanges();
 })
    function importQuestion() {
        $("#windowQuestion").kendoWindow({
            actions: {}, /*from Vlad's answer*/
            draggable: true,
            height: "300px",
            modal: true,
            resizable: false,
            width: "500px",
            visible: false /*don't show it yet*/
        }).data("kendoWindow").center().open();
    }
    $('#btnImportQuestion').bind('click', function () {
        $('#importQuestion').submit();
    });
    (function () {
        $("#importQuestion").ajaxForm({
            beforeSend: function () {
                $("#windowQuestion").data("kendoWindow").close();
                $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
            },
            uploadProgress: function (event, position, total, percentComplete) {
            },
            success: function (data) {
                if (data.success) {
                    $("#GridQuestion").data("kendoGrid").dataSource.read();
                    $.unblockUI;
                    $.gritter.add({
                        title: '',
                        text: 'Import successfully ' + data.total + ' record(s)',
                        class_name: 'gritter-success'
                    });
                    if (data.totalError > 0) {
                        $("#windowQuestion").data("kendoWindow").open();
                        $('#btndownload').css('display', 'inline-block');
                        $('#btndownload').attr('href', r + "/PotentialCustomer/Download?file=" + data.link);
                    }
                    else {
                        $('#btndownload').css('display', 'none');
                        $('#btndownload').attr('href', "");
                    }
                }
                else {
                    $.gritter.add({
                        title: '',
                        text: 'Import Error',
                        class_name: 'gritter-error'
                    });
                    $.unblockUI;
                }
            },
            complete: function (xhr) {

            }
        });

    })();

    function checkAll2(e) {
        var x = $(e).prop('checked');
        $('#GridQuestion').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    
    var expandedRow; var curunitid;
    function detailExpand(e) {
        // Only one open at a time
        if (expandedRow != null && expandedRow[0] != e.masterRow[0]) {
            var grid = $('#GridQuestion').data('kendoGrid');
            grid.collapseRow(expandedRow);
        }
        expandedRow = e.masterRow;
        id = expandedRow[0].cells[0].innerText;
        var masterDataItem = $('#GridQuestion').data('kendoGrid').dataItem(expandedRow);
        curunitid = masterDataItem.QuestionID;
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#GridQuestion').offset().top);
        var gridElement = $("#GridQuestion");
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 10);

        //var offsetbottom = parseInt($(window).height()) - parseInt($('#GridManagement').offset().top);
        //var gridElement = $("#GridManagement");
        //dataArea = gridElement.find(".k-grid-content"),
        //otherElements = gridElement.children().not(".k-grid-content"),
        //otherElementsHeight = 0;
        //otherElements.each(function () {
        //    otherElementsHeight += $(this).outerHeight();
        //});
        //dataArea.height(offsetbottom - otherElementsHeight - 30);

    }
    function dataBoundQuestion(e) {
        resizeGrid();
        var grid = this;
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
       .options.parameterMap({
           page: grid.dataSource.page(),
           sort: grid.dataSource.sort(),
           filter: grid.dataSource.filter()
       });
        //Get the export link as jQuery object
        //var $exportLink = grid.element.find('.export');
        //var href = $exportLink.attr('href');
        //href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
        //href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));
        //$exportLink.attr('href', href);

        // Get the export link as jQuery object
    }
    function error_handlerQuestion(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            $.gritter.add({
                text: message,
                class_name: 'gritter-error'
            });
        } else {
            $.gritter.add({
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
        }
    }
    function onRequestEndQuestion(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                text: '@Resources.Multi.Update @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#GridQuestion").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#GridQuestion").data("kendoGrid").dataSource.read();
            //changeTypeAsset();
        }
    }
    function filterQuestion() {
        grid = $("#GridQuestion").data("kendoGrid");
        var department = $("#txtQuestionDescription").val();
        var ActiveDocument = $("#ActiveVisiQuestion option:selected");
        var ActiveType = $("#ActiveTypeQuestion option:selected");

        var filterActiveDocument = { logic: "or", filters: [] };
        var filterActiveType = { logic: "or", filters: [] };
        var filter = { logic: "and", filters: [] };
        if (department) {
            filter.filters.push({ field: "Description", operator: "contains", value: department });
        }

        if (ActiveType.length > 0) {
            for (var i = 0; i < ActiveType.length; i++) {
                var option = ActiveType[i].value;
                if (option == "") {
                    filterActiveType.filters.push({ field: "Type", operator: "contains", value: "" });
                }
                filterActiveType.filters.push({ field: "Type", operator: "eq", value: option });
            }
            filter.filters.push(filterActiveType);
        }
        if (ActiveDocument.length > 0) {
            for (var i = 0; i < ActiveDocument.length; i++) {
                var option = ActiveDocument[i].value;
                if (option == "") {
                    filterActiveDocument.filters.push({ field: "Active", operator: "contains", value: "" });
                }
                filterActiveDocument.filters.push({ field: "Active", operator: "eq", value: option });
                //filterActiveDocument.filters.push({ field: "Active", operator: "contains", value: option });
            }
            filter.filters.push(filterActiveDocument);
        }
        grid.dataSource.filter(filter);
    }
    $("#txtQuestionDescription").bind('keypress', function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            filterQuestion();
        }
    });
</script>
<!-- CRM_Survey_AnswerList-->
<script>
    function error_handler_SubDetails(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });

                }
                $("#GridSubjectDetails_" + curunitid).data("kendoGrid").dataSource.read();
                //$("#GridConfig_" + curunitid).data("kendoGrid").dataSource.read();

            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        } else {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#GridSubjectDetails_" + curunitid).data("kendoGrid").dataSource.read();
            $("#GridConfig_" + curunitid).data("kendoGrid").dataSource.read();
        }
    }
    function onRequestEndSubDetails(e) {
        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Update @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#GridSubjectDetails_" + curunitid).data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#GridSubjectDetails_" + curunitid).data("kendoGrid").dataSource.read();
            $("#GridConfig_" + curunitid).data("kendoGrid").dataSource.read();
        }
    }
    function dataBoundAnswer(e) {
        var g = $("#GridSubjectDetails_" + curunitid).data("kendoGrid");
        g.thead.find("[data-field=Id]>.k-header-column-menu").remove();
    }
    function checkAllAnswer(e) {
        var x = $(e).prop('checked');
        $('#GridSubjectDetails_' + curunitid).find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    function DeleteAnswer() {
        var listrowid = "";
        $('#GridSubjectDetails_' + curunitid).find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            var c = confirm("@Resources.Multi.DeleteConfirm");
            if (c == true) {
                $.post(r + "/CRMSurvey/DeleteAnswer", { data: listrowid, }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: '@Resources.Multi.Delete @Resources.Multi.Successfully',
                            class_name: 'gritter-success'
                        });
                        $("#GridSubjectDetails_" + curunitid).data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAllAnswer').prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                        $("#GridSubjectDetails_" + curunitid).data("kendoGrid").dataSource.read();
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: 'Please choose data!',
                class_name: 'gritter-error'
            });
            return false;
        }
    }
</script>
<!--CRM_Survey_AnswerConfig-->
<script>
    function error_handler_Config(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            $.gritter.add({
                text: message,
                class_name: 'gritter-error'
            });
        } else {
            $.gritter.add({
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
        }
    }
    function onRequestEndConfig(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Update @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#GridConfig_" + curunitid).data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#GridConfig_" + curunitid).data("kendoGrid").dataSource.read();
        }
    }
</script>
