@{
    ViewBag.Title = "Nhóm câu hỏi khảo sát";
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
    var typeAnswer = new List<Object>();
    typeAnswer.Add(new { Name = "Multi choice" });
    typeAnswer.Add(new { Name = "Single choice" });
    typeAnswer.Add(new { Name = "Free text" });
    ViewBag.typeAnswer = typeAnswer;

    var typeChannel = new List<Object>();
    typeChannel.Add(new { Name = "Email Survey" });
    typeChannel.Add(new { Name = "Field Survey" });
    typeChannel.Add(new { Name = "Call Survey" });
    ViewBag.typeChannel = typeChannel;

    var listCustomer = new List<Object>();
    listCustomer.Add(new { Name = "Exclude New Customer" });
    listCustomer.Add(new { Name = "Include New Customer" });
    ViewBag.listCustomer = listCustomer;

    var listStatus = new List<Object>();
    listStatus.Add(new { Name = "Hidden" });
    listStatus.Add(new { Name = "Shown" });
    ViewBag.listStatus = listStatus;

    var listAnswer = new List<Object>();
    listAnswer.Add(new { Name = "No" });
    listAnswer.Add(new { Name = "Yes" });
    ViewBag.listAnswer = listAnswer;
}
<style>
    .k-picker-wrap .k-state-default {
        height: 28px;
    }

    .country .chosen-choices {
        width: 250px;
    }

    .country .chosen-drop {
        width: 250px;
    }

    .country .chosen-container {
        width: 250px !important;
    }

    .branch .chosen-choices {
        width: 180px;
    }

    .branch .chosen-drop {
        width: 180px;
    }

    .branch .chosen-container {
        width: 180px !important;
    }

    .org .chosen-choices {
        width: 280px;
    }

    .org .chosen-drop {
        width: 280px;
    }

    .org .chosen-container {
        width: 280px !important;
    }

    .newlistOrg .chosen-choices {
        width: 250px;
    }

    .newlistOrg .chosen-drop {
        width: 250px;
    }

    .newlistOrg .chosen-container {
        width: 250px !important;
    }
</style>
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            @*<div class="widget-header widget-header-blue widget-header-flat">
                    <p style="font-size:14px">@Resources.Multi.Filter</p>
                    <span class="widget-toolbar">
                        <a href="#" data-action="collapse">
                            <i class="icon-chevron-up"></i>
                        </a>
                    </span>
                </div>*@
            <input type="text" id="txtName" name="txtName" placeholder="@Resources.Multi.Search @Resources.Multi.Follow.ToLower() @Resources.Multi.Title.ToLower(), @Resources.Multi.Desc.ToLower()..." style="width: 350px;" />
            <select name="select" id="slStatus" class='chosen-select span2' style="width:250px;" multiple data-placeholder="@Resources.Multi.Select @Resources.Multi.Active.ToLower()...">
                <option value="true">@Resources.Multi.Active</option>
                <option value="false">@Resources.Multi.InActive</option>
            </select>
            <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="filter()" style="float:none">@Resources.Multi.Filter</button>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @* </ Hiện thị thông tin> *@
        @(Html.Kendo()
                    .Grid<ERPAPD.Models.CRM_Survey_Category>()
                    .Name("Grid")
                    .HtmlAttributes(new { style = "height: auto;" })
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.CategoryID).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=CategoryID#'  />").Width(35).Filterable(false).Sortable(false);
                        //columns.Bound(p => p.ColumnID).Width(80).Title("ColumnID");
                        columns.Bound(p => p.Name).Title(Resources.Multi.Name).Width(120).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.Bound(p => p.Description).Title(Resources.Multi.Desc).Width(350).EditorTemplateName("TextArea").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.ForeignKey(p => p.ParentCategoryID, (System.Collections.IEnumerable)ViewBag.Category, "CategoryID", "Name").EditorTemplateName("GridNullableForeignKey").Width(150).Title(Resources.Multi.Group).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        //columns.ForeignKey(p => p.Visibility, (System.Collections.IEnumerable)ViewBag.listStatus, "Name", "Name").EditorTemplateName("GridNullableForeignKey").Width(110).Title("Visibility").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.Bound(p => p.Active).Width(65).Title(Resources.Multi.Active).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                        columns.Bound(p => p.CreatedBy).Width(100).Title(Resources.Multi.CreatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
                        columns.Bound(p => p.CreatedAt).Width(100).Format("{0:" + Resources.Multi.DateFormat + "}").Title(Resources.Multi.CreatedAt).ClientTemplate("#=ConvertTimeZone(CreatedAt," + Constants.TIME_ZONE + ")#");
                        columns.Bound(p => p.UpdatedBy).Width(100).Title(Resources.Multi.UpdatedBy).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });
                        columns.Bound(p => p.UpdatedAt).Format("{0:" + Resources.Multi.DateFormat + "}").Width(100).Title(Resources.Multi.UpdatedAt).ClientTemplate("#if(kendo.toString(UpdatedAt,'dd/MM/yyyy') != '01/01/1900'){#" + "#= ConvertTimeZone(UpdatedAt," + Constants.TIME_ZONE + ") #" + "#}#").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;vertical-align: top" });

                    })
                    .ToolBar(toolbar =>
                    {
                        toolbar.Template(@<text>
                        <div class="pull-left">
                            @if (AllowCreate)
                                {
                                <a class="btn btn-success btn-small" href="javascript:void(0)" id="btnGridAdd">
                                    @*<i class="icon-plus"></i>*@ @Resources.Multi.Add
                                </a>
                                }
                            @if (AllowUpdate)
                                {
                                <a class="btn btn-primary btn-small" href="javascript:void(0)" id="btnGridSave">
                                    @*<i class="icon-ok"></i>*@ @Resources.Multi.GridSave
                                </a>
                                <a class="btn btn-default btn-small" href="javascript:void(0)" id="btnGridCancel">
                                    @*<i class="icon-remove"></i>*@ @Resources.Multi.GridCancel
                                </a>
                                }
                            <div class="btn-group" style="margin-left: 20px">
                                <button data-toggle="dropdown" class="btn btn-small btn-inverse dropdown-toggle">
                                    Thao tác khác
                                    <span class="caret"></span>
                                </button>
                                <ul class="dropdown-menu" style="min-width:110px !important">
                                    <li>
                                        @if (AllowDelete)
                                            {
                                            <a class="btn btn-small btn-danger" href="javascript:void(0)" id="btnGridDelete" onclick="showConfirmPopup('Grid', 'checkboxcheckAll', -1)">
                                                @*<i class=" icon-trash">   </i>*@@Resources.Multi.GridDelete
                                            </a>
                                            }
                                    </li>
                                    @*<li>
                                        @if (AllowExport)
                                                {
                                            <a class="btn btn-small btn-info" href="@Url.Content("~/CRMSurvey/ExportCategory")" id="btnGridExport">
                                                <i class="fa fa-file-excel-o fa-1"></i> @Resources.Multi.GridExport
                                            </a>
                                                }
                                    </li>
                                    <li>
                                        <a class="btn btn-small btn-purple" style="text-align:left" href="javascript:void(0)" id="importOther" onclick="importCategory()">
                                            <i class="fa fa-file-excel-o fa-1"></i> @Resources.Multi.GridImport
                                        </a>
                                    </li>*@
                                </ul>
                            </div>
                        </div>
                        </text>);
                        //toolbar.Create().Text(Resources.Multi.Add).HtmlAttributes(new { @style = "display:" + (AllowCreate ? "inline-block" : "none") });
                        //toolbar.Save().SaveText(Resources.Multi.Save).CancelText(Resources.Multi.Cancel).HtmlAttributes(new { @style = "display:" + (AllowUpdate ? "inline-block" : "none") });
                        //toolbar.Custom()
                        //.Text(Resources.Multi.Export)
                        //.HtmlAttributes(new { @class = "exportClass btn btn-primary" })
                        //.Url(Url.Action("ExportCategory", "Survey", new { filter = "~", sort = "~", CategoryID = "~" }));
                        //toolbar.Custom()
                        //.Text(Resources.Multi.Import)
                        //.HtmlAttributes(new { id = "importCategory", @class = "btn btn-purple", Href = "javascript:importCategory();" });
                        //toolbar.Custom()
                        //.Text(Resources.Multi.Delete)
                        //.HtmlAttributes(new { @id = "btnDelete", @class = "btn btn-danger", @style = "display:" + (AllowDelete ? "inline-block" : "none"), @Href = "javascript:DeleteCategory()" });

                    })
                                                    .Events(events => { events.DataBound("dataBound"); })
                                                    .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
                                                    .Navigatable()
                                                    .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                    .Scrollable(scrollable => scrollable.Virtual(false))
                                                    .Sortable()
                                                    .Resizable(resize => resize.Columns(true))
                                                    .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                        //.Filter(f => { f.Add(a => a.Status).IsEqualTo(true); })
                                                    .Batch(true)
                                                    .PageSize(50)
                                                    .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                                                    .Model(model =>
                                                    {
                                                        model.Id(p => p.CategoryID);
                                                        model.Field(p => p.CategoryID).Editable(false);
                                                        model.Field(p => p.CreatedBy).Editable(false);
                                                        model.Field(p => p.CreatedAt).Editable(false);
                                                        model.Field(p => p.UpdatedAt).Editable(false);
                                                        model.Field(p => p.UpdatedBy).Editable(false);
                                                        model.Field(p => p.Active).DefaultValue(true);
                                                    })
                                                    .Read("SurveyCategory_Read", "CRMSurvey")
                                                    .Create("SurveyCategory_Create", "CRMSurvey")
                                                    .Update("SurveyCategory_Create", "CRMSurvey")
                                                    )
                            //.ClientDetailTemplateId("SurveyCategorDetails")
        )
    </div>
</div>
@Html.Partial("_popup")
@(Html.Kendo()
      .Window()
      .Name("windowQuestion")
      .Title("ImportForm")
      .Content(@<text>
        <div class="row-fluid">
            <div class="span7">
                <form id="importQuestion" action="@Url.Content("~/CRMSurvey/ImportQuestion")" method="post" class="form-horizontal" enctype="multipart/form-data" style="margin-bottom:0px;">
                    <input type="file" class="FileUpload" name="FileUpload" />
                </form>
            </div>
            <button type="button" id="btnImportQuestion" class="btn btn-purple btn-small span2" style="float: right;">Import</button>
        </div>
        <div class="row-fluid">
            <a id="btndownload" style="display: none" class="btn btn-warning btn-small">@Resources.Multi.DownloadTemplateError</a>
        </div>
    </text>)
.Draggable()
.Resizable()
.Visible(false)
.Width(1000)
.Actions(actions => actions.Close())
)
@(Html.Kendo()
      .Window()
      .Name("windowimport")
      .Title("ImportForm")
      .Content(@<text>
        <div class="row-fluid">
            <div class="span7">
                <form id="importform" action="@Url.Content("~/CRMSurvey/ImportCategory")" method="post" class="form-horizontal" enctype="multipart/form-data" style="margin-bottom:0px;">
                    <input type="file" class="FileUpload" name="FileUpload" />
                </form>
            </div>
            <button type="button" id="btnImport" class="btn btn-purple btn-small span2" style="float: right;">Import</button>
        </div>
        <div class="row-fluid">
            <a id="btndownload" style="display: none" class="btn btn-warning btn-small">@Resources.Multi.DownloadTemplateError</a>
        </div>
    </text>)
.Draggable()
.Resizable()
.Visible(false)
.Width(1000)
.Actions(actions => actions.Close())
)
<script>
    $('.FileUpload').ace_file_input({
        no_file: 'No File ...',
        btn_choose: 'Choose',
        btn_change: 'Change',
        droppable: false,
        onchange: null,
        thumbnail: false //| true | large
    });
    $("#slStatus, #ActiveVisiQuestion, #ActiveTypeQuestion, #ActiveManagement").chosen();
</script>
<!--CRM_Survey_Category -->
<script>
    $('#btnGridAdd').click(function () {
        $("#Grid").data("kendoGrid").dataSource.insert();
    })

    $('#btnGridSave').bind('click', function () {
        if ($('#Grid').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#Grid').data('kendoGrid').saveChanges();
        }
    })

    $('#btnGridCancel').bind('click', function () {
        $('#Grid').data('kendoGrid').cancelChanges();
    })
    function importCategory() {
        $("#windowimport").kendoWindow({
            actions: {}, /*from Vlad's answer*/
            draggable: true,
            height: "300px",
            modal: true,
            resizable: false,
            width: "500px",
            visible: false /*don't show it yet*/
        }).data("kendoWindow").center().open();
    }
    $('#btnImport').bind('click', function () {
        $('#importform').submit();
    });

    (function () {
        $("#importform").ajaxForm({
            beforeSend: function () {
                $("#windowimport").data("kendoWindow").close();
                $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
            },
            uploadProgress: function (event, position, total, percentComplete) {
            },
            success: function (data) {
                if (data.success) {
                    $("#Grid").data("kendoGrid").dataSource.read();
                    $.unblockUI;
                    $.gritter.add({
                        title: '',
                        text: 'Import successfully ' + data.total + ' record(s)',
                        class_name: 'gritter-success'
                    });
                    if (data.totalError > 0) {
                        $("#windowimport").data("kendoWindow").open();
                        $('#btndownload').css('display', 'inline-block');
                        $('#btndownload').attr('href', r + "/PotentialCustomer/Download?file=" + data.link);
                    }
                    else {
                        $('#btndownload').css('display', 'none');
                        $('#btndownload').attr('href', "");
                    }
                }
                else {
                    $.gritter.add({
                        title: '',
                        text: 'Import Error',
                        class_name: 'gritter-error'
                    });
                    $.unblockUI;
                }
            },
            complete: function (xhr) {

            }
        });

    })();
    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    function dataBound(e) {
        resizeGrid();
        var grid = this;
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
       .options.parameterMap({
           page: grid.dataSource.page(),
           sort: grid.dataSource.sort(),
           filter: grid.dataSource.filter()
       });
        //Get the export link as jQuery object
        //var $exportLink = grid.element.find('.exportClass');
        //var href = $exportLink.attr('href');
        //href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');
        //href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));
        //$exportLink.attr('href', href);

        // Get the export link as jQuery object
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            $.gritter.add({
                text: message,
                class_name: 'gritter-error'
            });
        } else {
            $.gritter.add({
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
        }
    }
    function onRequestEnd(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Update @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Create @Resources.Multi.Successfully',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
            //changeTypeAsset();
        }
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid");
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 10);

        //var offsetbottom = parseInt($(window).height()) - parseInt($('#GridManagement').offset().top);
        //var gridElement = $("#GridManagement");
        //dataArea = gridElement.find(".k-grid-content"),
        //otherElements = gridElement.children().not(".k-grid-content"),
        //otherElementsHeight = 0;
        //otherElements.each(function () {
        //    otherElementsHeight += $(this).outerHeight();
        //});
        //dataArea.height(offsetbottom - otherElementsHeight - 30);

    }
    $('.icon-chevron-up').bind('click', function () {
        setInterval(function () {
            resizeGrid();
        }, 500)
    });

    $('#btnAsset').click(function () {
        setTimeout(function () { resizeGrid(); }, 20)
    })
    $('#btnTypeAsset').click(function () {
        setTimeout(function () { resizeGrid(); }, 20)
    })
    $('#btnManagement').click(function () {
        setTimeout(function () { resizeGrid(); }, 20)
    })
    function filter() {

        grid = $("#Grid").data("kendoGrid");
        var ActiveDocument = $("#slStatus option:selected");
        var department = $("#txtName").val();
        var filter = { logic: "and", filters: [] };
        var filterActiveDocument = { logic: "or", filters: [] };
        var filterlistDescription = { logic: "or", filters: [] };
        if (ActiveDocument.length > 0) {
            for (var i = 0; i < ActiveDocument.length; i++) {
                var option = ActiveDocument[i].value;
                if (option == "") {
                    filterActiveDocument.filters.push({ field: "Active", operator: "contains", value: "" });
                }
                filterActiveDocument.filters.push({ field: "Active", operator: "eq", value: option });
                //filterActiveDocument.filters.push({ field: "Active", operator: "contains", value: option });
            }
            filter.filters.push(filterActiveDocument);
        }
        if (department) {
            filterlistDescription.filters.push({ field: "Name", operator: "contains", value: department });
            filterlistDescription.filters.push({ field: "Description", operator: "contains", value: department });
            filter.filters.push(filterlistDescription);
        }
        grid.dataSource.filter(filter);
    }
    $("#txtName").bind('keypress', function (e) {
        var code = e.keyCode ? e.keyCode : e.which;
        if (code == 13) {
            filter();
        }
    });

</script>

