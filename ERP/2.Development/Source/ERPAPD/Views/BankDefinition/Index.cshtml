@model IEnumerable<ERPAPD.Models.DC_Company_Type>

@{
    /// tạo
    ViewBag.Title = "Master Data";
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
}
<script src="@Url.Content("~/Scripts/underscore.js")"></script>
<div id="hidePopupStart" onclick="ClosePopupEnd('#hidePopupStart')"></div>



@*Bank*@

<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="widget-header widget-header-blue widget-header-flat">
                <p style="font-size:14px">@Resources.Multi.Filter</p>

                <span class="widget-toolbar">
                    <a href="#" data-action="collapse">
                        <i class="icon-chevron-up"></i>
                    </a>
                </span>
            </div>
            <div class="widget-body">
                <div class="widget-main">
                    <div class="row-fluid">
                        <div class="span12">
                            <input style="width: 300px; height: 20px; " name="date-range-picker span2" type="text" id="BankName" placeholder="Tên ngắn gọn, đầy đủ..." />
                            <select name="select" id="listAssignee" class='chosen-select span3' data-placeholder="Chọn nhân viên phụ trách…" multiple>
                                @foreach (var a in ViewBag.Assignee)
                                {
                                    <option value="@a.UserName">@a.UserName</option>
                                }
                            </select>
                            <select name="select" id="listContract" class='chosen-select span3' data-placeholder="Chọn ngân hàng giải ngân…" multiple>
                                @foreach (var a in ViewBag.Contract)
                                {
                                    <option value="@a.StageID">@a.Description</option>
                                }
                            </select>
                            <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="filterBank()" style="float:none">@Resources.Multi.Filter</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @(Html.Kendo()
                                .Grid<ERPAPD.Models.DC_Bank_Definition>()
                                .Name("GridBank")
                                .Columns(columns =>
                                {
                                    columns.Bound(p => p.BankID).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAllBank(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=BankID#'  />").Width(50).Filterable(false).Sortable(false);
                                    columns.Bound(p => p.BankID).Width(100).Hidden();
                                    columns.Bound(p => p.BankName).Title("Tên ngắn gọn").Width(120).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).Format("{0:N0}");
                                    columns.Bound(p => p.FullName).Title("Tên đầy đủ").Width(220).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).Format("{0:N0}");
                                    columns.ForeignKey(p => p.ContractID, (System.Collections.IEnumerable)ViewBag.Contract, "StageID", "Description").EditorTemplateName("GridNullableForeignKey").Title("Trạng thái hợp đồng").Width(140).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                                    columns.ForeignKey(p => p.Assignee, (System.Collections.IEnumerable)ViewBag.Assignee, "UserName", "UserName").EditorTemplateName("GridNullableForeignKey").Title("Nhân viên phụ trách").Width(140).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                                    columns.Bound(p => p.Note).Title("Ghi chú").Width(200).EditorTemplateName("Textarea").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                                    columns.Bound(p => p.LastAction).Title("Hoạt động cuối").Width(200);
                                    columns.Bound(p => p.DefaultInstallment).Title("Tháng TG").Width(85);
                                    columns.Bound(p => p.Address).Title("Địa chỉ").EditorTemplateName("Textarea").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).Width(180);
                                    columns.Bound(p => p.Phone).Title("Điện thoại").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).Width(90);
                                    columns.Bound(p => p.Email).Title("Email").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).Width(140);
                                    columns.Bound(p => p.Website).Title("Website").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).Width(140);
                                    columns.ForeignKey(p => p.PaymentGateway, (System.Collections.IEnumerable)ViewBag.PaymentGateway, "CodeID", "Description").EditorTemplateName("GridNullableForeignKey").Title("Cổng thanh toán").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).Width(120);
                                    columns.Bound(p => p.Active).Title(Resources.Multi.Active).Width(90).HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                                    columns.Bound(p => p.RowCreatedTime).Title(Resources.Multi.CreatedAt).Width(140).Format("{0:" + Resources.Multi.DateFormat+ " HH:mm:ss}");
                                    columns.Bound(p => p.RowCreatedUser).Title(Resources.Multi.CreatedBy).Width(100);
                                    columns.Bound(p => p.RowLastUpdatedTime).Width(140).Format("{0:" + Resources.Multi.DateFormat + "}").Title(Resources.Multi.UpdatedAt).ClientTemplate("#if(kendo.toString(RowLastUpdatedTime,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(RowLastUpdatedTime,'dd/MM/yyyy HH:mm:ss') #" + "#}#");
                                    columns.Bound(p => p.RowLastUpdatedUser).Width(100).Title(Resources.Multi.UpdatedBy);
                                })
                                .ToolBar(toolbar =>
                                {
                                    //toolbar.Custom()
                                    //                 .Text("Export To Excel")
                                    //                 .HtmlAttributes(new { @class = "exportBank" })
                                    //                 .Url(Url.Action("Export_Bank", "BankDefinition", new { filter = "~", sort = "~" }));
                                    //toolbar.Custom()
                                    //              .Text("Import From Excel")
                                    //              .HtmlAttributes(new { id = "importBank", Href = "javascript:void(o)" });
                                    toolbar.Create().Text(Resources.Multi.Add).HtmlAttributes(new { @style = "display:" + (AllowCreate ? "inline-block" : "none") });
                                    toolbar.Save().SaveText(Resources.Multi.Save).CancelText(Resources.Multi.Cancel).HtmlAttributes(new { @style = "display:" + (AllowUpdate ? "inline-block" : "none") });
                                    toolbar.Custom()
                                                  .Text(Resources.Multi.Delete)
                                                  .HtmlAttributes(new { @id = "btnDeleteBank", @style = "background-color:#d3413b;color:white;display:" + (AllowDelete ? "inline-block" : "none"), @Href = "javascript:DeleteBank()" });

                                })
                                .Editable(editable => editable.Mode(GridEditMode.InCell))
                                        .Events(events => { events.DataBound("dataBoundBank"); events.DetailExpand("detailExpand"); })
                                .Pageable(pager => pager.PageSizes(new[] { 20, 50, 100, 200 }))
                                .Navigatable()
                                .ColumnMenu()
                                .Sortable()
                                .Scrollable(scrollable => scrollable.Virtual(false))
                                .Filterable()
                                .Resizable(resize => resize.Columns(true))
                                .DataSource(dataSource => dataSource
                                .Ajax()
                                        .Batch(true)
                                            .PageSize(50)
                                            .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                                            .Model(model =>
                                            {
                                                model.Id(p => p.RowID);
                                                model.Field(p => p.BankID).Editable(false);
                                                model.Field(p => p.BankName).Editable(true);
                                                model.Field(p => p.RowCreatedUser).Editable(false);
                                                model.Field(p => p.RowCreatedTime).Editable(false);
                                                model.Field(p => p.RowLastUpdatedTime).Editable(false);
                                                model.Field(p => p.RowLastUpdatedUser).Editable(false);
                                                model.Field(p => p.LastAction).Editable(false);
                                                model.Field(p => p.DefaultInstallment).Editable(false);
                                            })
                                            .Create(update => update.Action("SaveBank", "BankDefinition"))
                                            .Read(read => read.Action("Bank_Read", "BankDefinition"))
                                            .Update(update => update.Action("UpdateBank", "BankDefinition"))
                                            ).ClientDetailTemplateId("BankDetail")
        )

    </div>
</div>


<script id="BankDetail" type="text/kendo-tmpl">
    <div class="row-fluid">
    <div style="width:1200px">
            @(Html.Kendo()
                .TabStrip()
                .Name("tabStrip_#=BankID#")
                .SelectedIndex(0)
                .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
                .Items(items =>
                {
                    items.Add().Text("Hoạt động").Content(@<text>
                        <input type="hidden" name="txtBankID" class="txtBankID" value="#=BankID#" />
                        @(Html.Kendo()
        .Grid<ERPAPD.Models.Deca_Bank_Action>()
        .Name("gridAction_#=BankID#")
        .Columns(columns =>
        {
            columns.Bound(o => o.ID).Width(100).Visible(false);
            columns.Bound(o => o.Action).Title(Resources.Multi.Active).HtmlAttributes(new { style = "background-color:rgb(223,240,216); color:rgb(70,136,71)" }).EditorTemplateName("Textarea").Width(300);
            columns.Bound(p => p.CreatedAt).Title(Resources.Multi.CreatedAt).Width(120).Format("{0:" + Resources.Multi.DateFormat+ " HH:mm:ss}");
            columns.Bound(p => p.CreatedBy).Title(Resources.Multi.CreatedBy).Width(100);
        })
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Events(e => e.Edit("onEditGridAction"))
        .ToolBar(toolbar =>
        {

            toolbar.Create().Text(Resources.Multi.Add).HtmlAttributes(new { @style = "display:" + (AllowCreate ? "inline-block" : "none") });
            toolbar.Save().CancelText(Resources.Multi.Cancel).SaveText(Resources.Multi.Save).HtmlAttributes(new { @style = "display:" + (AllowCreate ? "inline-block" : "none") });
        })
        .Pageable(pager => pager
        .PageSizes(new[] { 10, 20, 100, 200, 300 }))
        .Resizable(resize => resize.Columns(true))
        .Sortable()
        .DataSource(dataSource => dataSource
            .Ajax()
            .Batch(true)
            .PageSize(10)
            .Sort(s => s.Add(a => a.CreatedAt).Descending())
                    .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEndAction"); })
            .Model(model =>
            {

                model.Id(p => p.ID);
                model.Field(p => p.ID).Editable(false);
                model.Field(p => p.CreatedAt).Editable(false);
                model.Field(p => p.CreatedBy).Editable(false);
            })
                                                        .Create(update => update.Action("SaveAction", "BankDefinition", new { BankID = "#=BankID#" }))
                                                .Update(update => update.Action("SaveAction", "BankDefinition", new { BankID = "#=BankID#" }))
                                        .Read(read => read.Action("Action_Read", "BankDefinition", new { BankID = "#=BankID#" }))
                                                    )
        .ToClientTemplate())
                    </text>);
                    items.Add().Text("Thời hạn trả góp").Content(@<text>
                    <input type="hidden" name="txtBankID" class="txtBankID" value="#=BankID#" />

                    @(Html.Kendo()
        .Grid<ERPAPD.Models.Deca_Bank_Installment>()
        .Name("gridInstallment_#=BankID#")
        .Columns(columns =>
        {
            columns.Bound(p => p.ID).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAllInstallment'  onClick='checkAllInstallment(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowidInstallment' type='checkbox' id='\\#=ID\\#'  />").Width(50).Filterable(false).Sortable(false);
            columns.Bound(o => o.ID).Width(100).Visible(false);
            columns.Bound(o => o.Installment).Title("Tháng trả góp").Width(140);
            columns.Bound(o => o.ConvertionFee).Title("Phí chuyển đổi(%)").Width(140);
            columns.Bound(o => o.Active).Title("Kích hoạt").Width(140);
            columns.Bound(o => o.Default).Title("Mặc định").Width(140);
            columns.Bound(p => p.CreatedAt).Title(Resources.Multi.CreatedAt).Width(120).Format("{0:" + Resources.Multi.DateFormat+ " HH:mm:ss}");
            columns.Bound(p => p.CreatedBy).Title(Resources.Multi.CreatedBy).Width(100);
            columns.Bound(p => p.UpdatedAt).Width(140).Format("{0:" + Resources.Multi.DateFormat + "}").Title(Resources.Multi.UpdatedAt);
            columns.Bound(p => p.UpdatedBy).Width(100).Title(Resources.Multi.UpdatedBy);
        })
                        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .ToolBar(toolbar =>
        {

            toolbar.Create().Text(Resources.Multi.Add).HtmlAttributes(new { @style = "display:" + (AllowCreate ? "inline-block" : "none") });
            toolbar.Save().SaveText(Resources.Multi.Save).CancelText(Resources.Multi.Cancel).HtmlAttributes(new { @style = "display:" + (AllowUpdate ? "inline-block" : "none") });
            toolbar.Custom()
                            .Text(Resources.Multi.Delete)
                            .HtmlAttributes(new { @id = "btnDeleteBankInstallment", @class = "btn btn-danger", @style = "display:" + (AllowDelete ? "inline-block" : "none"), @Href = "javascript:DeleteBankInstallment()" });
        })
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .Sort(s => s.Add(a => a.Installment).Descending())
        .PageSize(6)
                .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEndInstallment"); })
        .Model(model =>
        {
            model.Id(p => p.ID);
            model.Field(p => p.ID).Editable(false);
            model.Field(p => p.CreatedAt).Editable(false);
            model.Field(p => p.CreatedBy).Editable(false);
            model.Field(p => p.UpdatedAt).Editable(false);
            model.Field(p => p.UpdatedBy).Editable(false);
        })
            .Create(update => update.Action("SaveInstallment", "BankDefinition", new { BankID = "#=BankID#" }))
    .Read(read => read.Action("Installment_Read", "BankDefinition", new { BankID = "#=BankID#" }))
            .Update(update => update.Action("UpdateInstallment", "BankDefinition", new { BankID = "#=BankID#" }))
                                                )
        .Pageable(pager => pager
        .PageSizes(new[] { 6, 10, 20, 100, 200, 300 }))
        .Resizable(resize => resize.Columns(true))
        .Sortable()
        .ToClientTemplate())
                    </text>);
                    items.Add().Text("Người liên hệ").Content(
                        @<text>
                            <input type="hidden" name="txtBankID" class="txtBankID" value="#=BankID#" />

                            @(Html.Kendo()
        .Grid<ERPAPD.Models.Deca_Bank_Contactor>()
                .Name("gridContactor_#=BankID#")
        .Columns(columns =>
        {
            columns.Bound(p => p.ID).HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAllContactor'  onClick='checkAllContactor(this)' />").ClientTemplate("<input style='text-align:center' class='checkrowidContactor' type='checkbox' id='\\#=ID\\#'  />").Width(50).Filterable(false).Sortable(false);

            columns.Bound(o => o.ID).Width(100).Visible(false);
            columns.Bound(o => o.FullName).Title("Tên người liên hệ").Width(140);
            columns.Bound(o => o.Title).Title("Xưng danh").Width(70);
            columns.Bound(o => o.Position).Title("Chức vụ").Width(140);
            columns.Bound(o => o.Phone).Title("Điện thoại").Width(90);
            columns.Bound(o => o.Email).Title("Email").Width(140);
            columns.Bound(o => o.Note).Title("Ghi chú").EditorTemplateName("Textarea").Width(140);
            columns.Bound(p => p.UpdatedAt).Width(120).Format("{0:dd/MM/yyyy HH:mm}").Title(Resources.Multi.UpdatedAt);
            columns.Bound(p => p.UpdatedBy).Width(100).Title(Resources.Multi.UpdatedBy);
        })
                .Editable(editable => editable.Mode(GridEditMode.InCell))
                .ToolBar(toolbar =>
                {

                    toolbar.Create().Text(Resources.Multi.Add).HtmlAttributes(new { @style = "display:" + (AllowCreate ? "inline-block" : "none") });
                    toolbar.Save().SaveText(Resources.Multi.Save).CancelText(Resources.Multi.Cancel).HtmlAttributes(new { @style = "display:" + (AllowUpdate ? "inline-block" : "none") });
                    toolbar.Custom()
                                    .Text(Resources.Multi.Delete)
                                    .HtmlAttributes(new { @id = "btnDeleteBankContactor", @class = "btn btn-danger", @style = "display:" + (AllowDelete ? "inline-block" : "none"), @Href = "javascript:DeleteBankContactor()" });
                })
            .DataSource(dataSource => dataSource
                .Ajax()
                .Sort(s => s.Add(a => a.FullName))
                .Batch(true)
                .PageSize(6)
                .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEndContactor"); })
                .Model(model =>
                {
                    model.Id(p => p.ID);
                    model.Field(p => p.ID).Editable(false);
                    model.Field(p => p.CreatedAt).Editable(false);
                    model.Field(p => p.CreatedBy).Editable(false);
                    model.Field(p => p.UpdatedAt).Editable(false);
                    model.Field(p => p.UpdatedBy).Editable(false);
                })
                                                                    .Create(update => update.Action("SaveContactor", "BankDefinition", new { BankID = "#=BankID#" }))
                                                            .Read(read => read.Action("Contactor_Read", "BankDefinition", new { BankID = "#=BankID#" }))
                                                                    .Update(update => update.Action("UpdateContactor", "BankDefinition", new { BankID = "#=BankID#" }))
                                                        )
        .Pageable(pager => pager
        .PageSizes(new[] { 6, 10, 20, 100, 200, 300 }))
        .Resizable(resize => resize.Columns(true))
        .Sortable()
        .ToClientTemplate())
                        </text>
            );
                }).ToClientTemplate())
        </div>
    </div>
</script>



@*Import Bank*@

@(Html.Kendo()
      .Window()
      .Name("windowimportBank")
      .Title("ImportForm")
      .Content(@<text>
        <div class="row-fluid">
            <div class="span7">
                <form id="importformBank" action="@Url.Content("~/BankDefinition/ImportFromExcel_Bank")" method="post" class="form-horizontal" enctype="multipart/form-data" style="margin-bottom:0px;">
                    <input type="file" id="FileUploadBank" name="FileUpload" />
                </form>
            </div>
            <button type="button" id="btnImportBank" class="btn btn-purple btn-small span2" style="float: right;">Import</button>
        </div>
        <div class="row-fluid">
            <a id="btndownloadBank" style="display: none" class="btn btn-warning btn-small">@Resources.Multi.DownloadTemplateError</a>
        </div>
    </text>)
      .Draggable()
      .Resizable()
      .Visible(false)
      .Width(1000)
      .Actions(actions => actions.Close())

)


<style>
    .btnPopup {
        width: 70px;
        text-align: center;
    }

    .hide {
        display: none;
    }

    .controls {
        margin-left: 20px;
    }

    #showdatatobay {
        margin-left: 20px;
        line-height: 32px;
    }

    #hidePopupStart {
        display: none;
        z-index: 999;
        opacity: 0.5;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: #000;
    }

    .height_35px {
        height: 35px;
    }

    .setWidthDr .chosen-container {
        width: 200px !important;
        margin-right: 20px;
    }

    .k-window {
        width: 500px;
    }

    .newlistExam .chosen-choices {
        width: 800px;
    }

    .newlistExam .chosen-drop {
        width: 800px;
    }

    .newlistExam .chosen-container {
        width: 800px !important;
    }
</style>

<script>
    function onEditGridAction(e) {
        if (e.model.isNew() == false)
            $('#gridAction_' + $(".txtBankID").val()).data("kendoGrid").closeCell(e); // khóa edit.
    }
    $("#listAssignee").chosen();
    $("#listContract").chosen();
    var expandedRow;
    function detailExpand(e) {
        // Only one open at a time
        if (expandedRow != null && expandedRow[0] != e.masterRow[0]) {
            var grid = $('#GridBank').data('kendoGrid');
            grid.collapseRow(expandedRow);
        }
        expandedRow = e.masterRow;
    }
    //Search Bank
    $('#BankName').bind('keypress', function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            filterBank();
        }
    });
    $('#btnSearchBank').bind('click', function () {
        filterBank();
    })

    function filterBank() {
        grid = $("#GridBank").data("kendoGrid");

        var BankName = $('#BankName').val();
        var filter = { logic: "and", filters: [] };
        var filtercusinfo = { logic: "or", filters: [] };

        var listAssignee = $("#listAssignee option:selected");
        var listContract = $('#listContract option:selected');
        var fillterAssignee = { logic: "or", filters: [] };
        var fillterContract = { logic: "or", filters: [] }


        if (BankName) {
            filtercusinfo.filters.push({ field: "BankName", operator: "contains", value: BankName });
            filtercusinfo.filters.push({ field: "FullName", operator: "contains", value: BankName });
            filter.filters.push(filtercusinfo);
        }


        if (listAssignee.length > 0) {
            for (var i = 0; i < listAssignee.length; i++) {
                var option = listAssignee[i].value;
                if (option == '') {
                    fillterAssignee.filters.push({ field: "Assignee", operator: "contains", value: '' });
                }
                else {
                    fillterAssignee.filters.push({ field: "Assignee", operator: "eq", value: option });
                }
            }
            filter.filters.push(fillterAssignee);
        }
        if (listContract.length > 0) {
            for (var i = 0; i < listContract.length; i++) {
                var option = listContract[i].value;
                if (option == '') {
                    fillterContract.filters.push({ field: "ContractID", operator: "contains", value: '' });
                }
                else {
                    fillterContract.filters.push({ field: "ContractID", operator: "eq", value: option });
                }
            }
            filter.filters.push(fillterContract);
        }
        grid.dataSource.filter(filter);
    }


    function dataBoundBank(e) {
        resizeGrid();
        var grid = $("#GridBank").data("kendoGrid");

        // ask the parameterMap to create the request object for you
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
        .options.parameterMap({
            page: grid.dataSource.page(),
            sort: grid.dataSource.sort(),
            filter: grid.dataSource.filter()
        });

        // Get the export link as jQuery object
        //var $exportLink = grid.element.find('.exportBank');

        //// Get its 'href' attribute - the URL where it would navigate to
        //var href = $exportLink.attr('href');

        //// Update the 'page' parameter with the grid's current page
        //href = href.replace(/page=([^&]*)/, 'page=' + requestObject.page || '~');

        //// Update the 'sort' parameter with the grid's current sort descriptor
        //href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');

        //// Update the 'pageSize' parameter with the grid's current pageSize
        //href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + grid.dataSource._pageSize);

        //href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));

        //// Update the 'href' attribute
        //$exportLink.attr('href', href);
    }


    function checkAllBank(e) {
        var x = $(e).prop('checked');
        $('#GridBank').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    function checkAllInstallment(e) {
        var x = $(e).prop('checked');
        $('#gridInstallment_' + $(".txtBankID").val()).find(".checkrowidInstallment").each(function () {
            $(this).prop('checked', x);
        });
    }

    function checkAllContactor(e) {
        var x = $(e).prop('checked');
        $('#gridContactor_' + $(".txtBankID").val()).find(".checkrowidContactor").each(function () {
            $(this).prop('checked', x);
        });
    }

    function checkAllAction(e) {
        var x = $(e).prop('checked');
        $('#gridAction_' + $(".txtBankID").val()).find(".checkrowidAction").each(function () {
            $(this).prop('checked', x);
        });
    }
    function DeleteBank() {
        var listrowid = "";
        $('#GridBank').find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            var c = confirm("@Resources.Multi.DeleteConfirm");
            if (c == true) {
                $.post(r + "/BankDefinition/DeleteBank", { data: listrowid, }, function (data) {
                    if (data.success && data.totalError == 0) {
                        $.gritter.add({
                            text: '@Resources.Multi.Delete ' + data.totalSuccess + ' record(s) @Resources.Multi.Successfully',
                            class_name: 'gritter-success'
                        });
                        $("#GridBank").data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAll').prop('checked', false);
                    }
                    else if (data.success && data.totalError > 0) {
                        $.gritter.add({
                            text: '@Resources.Multi.Delete ' + data.totalSuccess + ' record(s) @Resources.Multi.Successfully.</br>  @Resources.Multi.Error  : ' + data.totalError + ' record(s) because this used.',
                            class_name: 'gritter-success'
                        });
                        $("#GridBank").data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAll').prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                        $("#GridBank").data("kendoGrid").dataSource.read();
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: '@Resources.Multi.Please @Resources.Multi.Select.ToLower() data.',
                class_name: 'gritter-error'
            });
            return false;
        }
    }

    function DeleteBankAction() {
        var listrowid = "";
        $('#gridAction_' + $(".txtBankID").val()).find(".checkrowidAction").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            var c = confirm("@Resources.Multi.DeleteConfirm");
            if (c == true) {
                $.post(r + "/BankDefinition/DeleteAction", { data: listrowid, }, function (data) {
                    if (data.success && data.totalError == 0) {
                        $.gritter.add({
                            text: '@Resources.Multi.Delete ' + data.totalSuccess + ' record(s) @Resources.Multi.Successfully',
                            class_name: 'gritter-success'
                        });
                        $("#gridAction_" + $(".txtBankID").val()).data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAllAction').prop('checked', false);
                    }
                    else if (data.success && data.totalError > 0) {
                        $.gritter.add({
                            text: '@Resources.Multi.Delete ' + data.totalSuccess + ' record(s) @Resources.Multi.Successfully.</br>  @Resources.Multi.Error  : ' + data.totalError + ' record(s) because this used.',
                            class_name: 'gritter-success'
                        });
                        $("#gridAction_" + $(".txtBankID")).data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAllAction').prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                        $("#gridAction_" + $(".txtBankID")).data("kendoGrid").dataSource.read();
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: '@Resources.Multi.Please @Resources.Multi.Select.ToLower() data.',
                class_name: 'gritter-error'
            });
            return false;
        }
    }

    function DeleteBankInstallment() {
        var listrowid = "";
        $('#gridInstallment_' + $(".txtBankID").val()).find(".checkrowidInstallment").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            var c = confirm("@Resources.Multi.DeleteConfirm");
            if (c == true) {
                $.post(r + "/BankDefinition/DeleteInstallment", { data: listrowid, }, function (data) {
                    if (data.success && data.totalError == 0) {
                        $.gritter.add({
                            text: '@Resources.Multi.Delete ' + data.totalSuccess + ' record(s) @Resources.Multi.Successfully',
                            class_name: 'gritter-success'
                        });
                        $("#gridInstallment_" + $(".txtBankID").val()).data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAllInstallment').prop('checked', false);
                    }
                    else if (data.success && data.totalError > 0) {
                        $.gritter.add({
                            text: '@Resources.Multi.Delete ' + data.totalSuccess + ' record(s) @Resources.Multi.Successfully.</br>  @Resources.Multi.Error  : ' + data.totalError + ' record(s) because this used.',
                            class_name: 'gritter-success'
                        });
                        $("#gridInstallment_" + $(".txtBankID")).data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAllInstallment').prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                        $("#gridInstallment_" + $(".txtBankID")).data("kendoGrid").dataSource.read();
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: '@Resources.Multi.Please @Resources.Multi.Select.ToLower() data.',
                class_name: 'gritter-error'
            });
            return false;
        }
    }



    function DeleteBankContactor() {
        var listrowid = "";
        $('#gridContactor_' + $(".txtBankID").val()).find(".checkrowidContactor").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            var c = confirm("@Resources.Multi.DeleteConfirm");
            if (c == true) {
                $.post(r + "/BankDefinition/DeleteContactor", { data: listrowid, }, function (data) {
                    if (data.success && data.totalError == 0) {
                        $.gritter.add({
                            text: '@Resources.Multi.Delete ' + data.totalSuccess + ' record(s) @Resources.Multi.Successfully',
                            class_name: 'gritter-success'
                        });
                        $("#gridContactor_" + $(".txtBankID").val()).data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAllContactor').prop('checked', false);
                    }
                    else if (data.success && data.totalError > 0) {
                        $.gritter.add({
                            text: '@Resources.Multi.Delete ' + data.totalSuccess + ' record(s) @Resources.Multi.Successfully.</br>  @Resources.Multi.Error  : ' + data.totalError + ' record(s) because this used.',
                            class_name: 'gritter-success'
                        });
                        $("#gridContactor_" + $(".txtBankID")).data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAllContactor').prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                        $("#gridContactor_" + $(".txtBankID")).data("kendoGrid").dataSource.read();
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: '@Resources.Multi.Please @Resources.Multi.Select.ToLower() data.',
                class_name: 'gritter-error'
            });
            return false;
        }
    }


    //Script Import Bank
    $('#FileUploadBank').ace_file_input({
        no_file: 'No File ...',
        btn_choose: 'Choose',
        btn_change: 'Change',
        droppable: false,
        onchange: null,
        thumbnail: false //| true | large
    });
    $('#importBank').bind('click', function () {
        $("#windowimportBank").kendoWindow({
            actions: {}, /*from Vlad's answer*/
            draggable: true,
            height: "300px",
            modal: true,
            resizable: false,
            width: "500px",
            visible: false /*don't show it yet*/
        }).data("kendoWindow").center().open();
    });

    $('#btnImportBank').bind('click', function () {
        $('#importformBank').submit();
    });
    (function () {
        $("#importformBank").ajaxForm({
            beforeSend: function () {
                $("#windowimportBank").data("kendoWindow").close();
                $(document).ajaxStart($.blockUI({ message: '<i class="icon-spinner icon-spin blue bigger-125" style="font-size:30px;"></i>', theme: false })).ajaxStop($.unblockUI);
            },
            uploadProgress: function (event, position, total, percentComplete) {
            },
            success: function (data) {
                if (data.success) {
                    $("#GridBank").data("kendoGrid").dataSource.read();
                    $.unblockUI;
                    $.gritter.add({
                        title: '',
                        text: 'Import successfully ' + data.total + ' record(s)',
                        class_name: 'gritter-success'
                    });
                    if (data.totalError > 0) {
                        $("#windowimportBank").data("kendoWindow").open();
                        $('#btndownloadBank').css('display', 'inline-block');
                        $('#btndownloadBank').attr('href', r + "/PotentialCustomer/Download?file=" + data.link);
                    }
                    else {
                        $('#btndownloadBank').css('display', 'none');
                        $('#btndownloadBank').attr('href', "");
                    }
                }
                else {
                    $.gritter.add({
                        title: '',
                        text: 'Import Error',
                        class_name: 'gritter-error'
                    });
                    $.unblockUI;
                }
            },
            complete: function (xhr) {

            }
        });

    })();

    function ActiveBank() {
        var listrowid = "";
        $('#GridBank').find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {

            var c = confirm("@Resources.Multi.AreYouSure @Resources.Multi.Change.ToLower() @Resources.Multi.Status [ @Resources.Multi.Active] ?");
            if (c == true) {
                $.post(r + "/BankDefinition/ChangeStatusActive_Bank", { data: listrowid, }, function (data) {
                    if (data.success) {
                        $.gritter.add({
                            text: '@Resources.Multi.Save @Resources.Multi.Success.ToLower()',
                            class_name: 'gritter-success'
                        });
                        $("#GridBank").data("kendoGrid").dataSource.read();
                        $('#checkboxcheckAll').prop('checked', false);
                    }
                    else {
                        $.gritter.add({
                            title: '',
                            text: data.alert,
                            class_name: 'gritter-error'
                        });
                        $("#GridBank").data("kendoGrid").dataSource.read();
                    }
                });
            }
            else {
                return false;
            }
        }
        else {
            $.gritter.add({
                title: '',
                text: '@Resources.Multi.Please @Resources.Multi.Select.ToLower() data.',
                class_name: 'gritter-error'
            });
            return false;
        }
    }

    function onRequestEnd(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Save @Resources.Multi.Success.ToLower()',
                class_name: 'gritter-success'
            });
            $("#GridBank").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Save @Resources.Multi.Success.ToLower()',
                class_name: 'gritter-success'
            });
            $("#GridBank").data("kendoGrid").dataSource.read();
        }
    }

    function onRequestEndAction(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Save @Resources.Multi.Success.ToLower()',
                class_name: 'gritter-success'
            });
            $("#gridAction_" + $(".txtBankID").val()).data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Save @Resources.Multi.Success.ToLower()',
                class_name: 'gritter-success'
            });
            $("#gridAction_" + $(".txtBankID").val()).data("kendoGrid").dataSource.read();
        }
    }


    function onRequestEndContactor(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Save @Resources.Multi.Success.ToLower()',
                class_name: 'gritter-success'
            });
            $("#gridContactor_" + $(".txtBankID").val()).data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Save @Resources.Multi.Success.ToLower()',
                class_name: 'gritter-success'
            });
            $("#gridContactor_" + $(".txtBankID").val()).data("kendoGrid").dataSource.read();
        }
    }



    function onRequestEndInstallment(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Save @Resources.Multi.Success.ToLower()',
                class_name: 'gritter-success'
            });
            $("#gridInstallment_" + $(".txtBankID").val()).data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: '@Resources.Multi.Save @Resources.Multi.Success.ToLower()',
                class_name: 'gritter-success'
            });
            $("#gridInstallment_" + $(".txtBankID").val()).data("kendoGrid").dataSource.read();
        }
    }


    function error_handler(e) {
        if (e.errors) {
            var message = "@Resources.Multi.Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        }
    }

    function resizeGrid() {
        //Bank Definition
        var offsetbottom = parseInt($(window).height()) - parseInt($('#GridBank').offset().top);
        var gridElement = $("#GridBank"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 30);
    }


</script>




