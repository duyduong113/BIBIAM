@{
    ViewBag.Title = "VNM | Customer";

    bool AllowCreate = (ViewBag.Assets.Create != null && ViewBag.Assets.Create);
    bool AllowUpdate = (ViewBag.Assets.Update != null && (bool)ViewBag.Assets.Update);
    bool AllowExport = (ViewBag.Assets.Export != null && (bool)ViewBag.Assets.Export);
    bool AllowImport = (ViewBag.Assets.Import != null && (bool)ViewBag.Assets.Import);
}
<style>
    .k-icon k-i-excel {
        display: none !important;
    }
</style>
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="widget-header widget-header-blue widget-header-flat">
                <p style="font-size:14px">Lọc dữ liệu theo điều kiện</p>

                <span class="widget-toolbar">
                    <a href="#" data-action="collapse">
                        <i class="icon-chevron-up"></i>
                    </a>
                </span>
            </div>
            <div class="widget-body">
                <div class="widget-main">
                    <div class="row-fluid">
                        <div class="span12">
                            <input class="span1" type="text" id="filterText" placeholder="Tìm khách hàng theo MNV, CMND, Số điện thoại, tên, email…" style="width:250px" />
                            <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="filter()" style="float:none">Lọc dữ liệu</button>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @(Html.Kendo()
    .Grid<DecaPay.Models.Sales_Order_Customer>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.Id).Width(80).Visible(false);
        columns.Bound(p => p.CustomerId).Width(100).Title("Mã kh").Locked();
        columns.Bound(p => p.FirstName).Width(100).Title("Họ").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).Locked();
        columns.Bound(p => p.LastName).Width(100).Title("Tên").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" }).Locked();
        columns.Bound(p => p.Birthday).Width(100).Format("{0:dd/MM/yyyy}").EditorTemplateName("Date").Title("Ngày sinh").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.PlaceOfBirth).Width(100).Title("Nơi sinh").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Gender).Width(100).Title("Giới tính").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Job).Width(100).Title("Nghề nghiệp").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.MaritalStatus).Width(100).Title("Trạng thái kết hôn").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.TaxNumber).Width(180).Title("MST").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Fax).Width(180).Title("Số Fax").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Phone).Width(180).Title("SĐT").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Email).Width(100).Title("Email").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Address).Width(100).Title("Địa chỉ").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.Type).Width(100).Title("Nhóm KH").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.IncomePoint).Width(100).Title("DSTL");
        columns.Bound(p => p.UsedPoint).Width(100).Title("Sử dụng");
        columns.Bound(p => p.CompanyName).Width(100).Title("Tên Cty").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.CompanyAddress).Width(100).Title("Địa chỉ Cty").HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
        columns.Bound(p => p.CreatedAt).Width(120).Format("{0:dd/MM/yyyy HH:mm:ss}");
        columns.Bound(p => p.CreatedBy).Width(100);
        columns.Bound(p => p.UpdatedAt).Width(120).Format("{0:dd/MM/yyyy HH:mm:ss}");
        columns.Bound(p => p.UpdatedBy).Width(100);
    })
    .ToolBar(tools =>
    {
        tools.Create().Text("Tạo mới");
        tools.Save().SaveText("Lưu lại").CancelText("Hủy bỏ");
        tools.Excel().Text("Xuất ra Excel").HtmlAttributes(new { @style = "margin-left:10px" });
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable(pager => pager.PageSizes(new[] { 20, 50, 100, 200 }))
    .Sortable()
    .Events(events => { events.DataBound("dataBound"); })
    .Scrollable()
    .Navigatable()
    .Filterable()
    .Excel(excel => excel
            .FileName("CustomerList.xlsx")
            .AllPages(true)
            .Filterable(true)
            .ProxyURL(Url.Action("Excel_Export", "VNMCustomer")))
    .Reorderable(r => r.Columns(true))
    .Resizable(r => r.Columns(true))
    .ColumnMenu()
    .DataSource(dataSource => dataSource
    .Ajax()
    .Batch(true)
    .PageSize(20)
    .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
    .Model(model =>
    {
        model.Id(p => p.Id);
        //model.Field(p => p.PhysicalID).Editable(false);
        model.Field(p => p.CustomerId).Editable(false);
        model.Field(p => p.IncomePoint).Editable(false);
        model.Field(p => p.UsedPoint).Editable(false);
        model.Field(p => p.UpdatedAt).Editable(false);
        model.Field(p => p.UpdatedBy).Editable(false);
    })
            .Create(create => create.Action("Create", "VNMCustomer"))
            .Read(read => read.Action("Read", "VNMCustomer"))
            .Update(update => update.Action("Update", "VNMCustomer"))
            .Destroy("Destroy", "VNMCustomer"))

        )
    </div>
</div>


<script>

    function filter() {

        grid = $("#grid").data("kendoGrid");

        var text = $('#filterText').val();
        var filter = { logic: "and", filters: [] };

        if (text) {
            filter.filters.push({ field: "MetaSearch", operator: "contains", value: keyword });
        }

        grid.dataSource.filter(filter);
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                    $("#grid").data("kendoGrid").dataSource.read();
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
    function onRequestEnd(e) {

        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Update successfully',
                class_name: 'gritter-success'
            });
            $("#grid").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: 'Create successfully',
                class_name: 'gritter-success'
            });
            $("#grid").data("kendoGrid").dataSource.read();
        }
    }

    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#grid').offset().top);
        var gridElement = $("#grid"),
        dataArea = gridElement.find(".k-grid-content"),
        dataFreezeArea = gridElement.find(".k-grid-content-locked"),
        otherElements = gridElement.children().not(".k-grid-content").not(".k-grid-content-locked"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 50);
        dataFreezeArea.height(offsetbottom - otherElementsHeight - 50);
    }

    $(window).resize(function () {
        resizeGrid();
    });
    function dataBound() {
        resizeGrid();
    }
    $("#filterText").keypress(function (e) {
        if (e.keyCode == 13) {
            filter();
        }
    });
</script>
