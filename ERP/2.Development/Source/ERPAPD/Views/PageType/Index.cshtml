@{
    ViewBag.Title = "Loại sản phẩm";
}
<style>
    .k-alt .editable {
        background-color: #C8E6C9;
    }

    .editable {
        background-color: #E8F5E9;
    }
</style>

<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="row-fluid frame-search">
                <input class="input-medium" id="txtPageTypeName" type="text" placeholder="Nhập tên loại">
                <button type="button" class="btn btn-small btn-primary" onclick='filter()'>Lọc dữ liệu</button>
            </div>
        </div>
    </div>
</div>


<div class="row-fluid">
    @(Html.Kendo().Grid<ERPAPD.Models.CRM_PageType>()
                    .Name("Grid")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.PageTypeID)
                             .HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />")
                             .ClientTemplate("<input style='text-align:center' class='checkrowid' type='checkbox' id='#=PageTypeID#'/> ")
                             .Width(25).Filterable(false).Sortable(false);
                        columns.Bound(p => p.PageTypeID).Title("ID").Width(50).Hidden();
                        columns.Bound(p => p.RefID).Title("Mã").Width(100).HtmlAttributes(new { @class = "editable" });
                        columns.Bound(p => p.PageTypeName).Title("Tên loại sản phẩm").Width(300).HtmlAttributes(new { @class = "editable" });
                        columns.Bound(p => p.Status).Title("Trạng thái").Width(100).ClientTemplate("#if(Status == true){#Hoạt động#}else{#Ngưng hoạt động#}#").HtmlAttributes(new { @class = "editable" });
                        columns.Bound(p => p.CreatedAt).Width(110).Title("Ngày tạo").Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
                        columns.Bound(p => p.CreatedBy).Width(100).Title("Người tạo");
                        columns.Bound(p => p.UpdatedAt).Title("Ngày cập nhật").Width(110).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
                        columns.Bound(p => p.UpdatedBy).Title("Người cập nhật").Width(100);
                    })
                    .Pageable(pager => pager.PageSizes(new[] { 100, 200, 300, 500 }))
                    .Scrollable()
                    .ToolBar(toolbar =>
                            {
                                toolbar.Template(@<text>
                                    <div class="pull-left">

                                        <a class="btn btn-success btn-small" onclick="Create()" href="javascript:void(0)" id="">
                                            @*<i class="icon-plus"></i>*@ @Resources.Multi.Add
                                        </a>
                                        <a class="btn btn-primary btn-small" href="javascript:void(0)" id="btnGridSave" onclick="Update()">
                                            @*<i class="icon-plus"></i>*@ @Resources.Multi.btnSave
                                        </a>
                                        <a class="btn btn-default btn-small " href="javascript:void(0)" id="btnGridCancel" onclick="Cancel()">
                                            @*<i class="icon-plus"></i>*@ Hủy thay đổi
                                        </a>
                                        @if (ViewBag.Delete)
                                        {
                                            <a class="btn btn-danger btn-small" href="javascript:void(0)" onclick="showConfirmPopup(1)" id="btnGridDelete">
                                                @*<i class="icon-plus"></i>*@ @Resources.Multi.Delete
                                            </a>
                                        }
                                    </div>
                                </text>);
                                //toolbar.Create().Text("Thêm");
                                //toolbar.Save().SaveText("Lưu").CancelText("Hủy");
                                //if (ViewBag.Delete)
                                //{
                                //    toolbar.Custom()
                                //       .Text("Xóa")
                                //       .HtmlAttributes(new { @class = "exportClass btn btn-danger", Href = "javascript:void(0)", @style = "margin-right: 10px;min-width: 70px;", onClick = "DeletePage()" });
                                //}
                            })

                                                                                                                                                                            .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                                                                                                                                            .Pageable(x => x.PageSizes(new int[] { 100, 200, 300, 500 }))
                                                                                                                                                                            .Events(events => { events.DataBound("dataBound"); })
                                                                                                                                                                            .Reorderable(reorderable => reorderable.Columns(true))
                                                                                                                                                                            .Resizable(resizable => resizable.Columns(true))
                                                                                                                                                                            .DataSource(dataSource => dataSource
                                                                                                                                                                            .Ajax()
                                                                                                                                                                            .Batch(true)
                                                                                                                                                                            .PageSize(100)
                                                                                                                                                                            .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                                                                                                                                                                            .Model(model =>
                                                                                                                                                                            {
                                                                                                                                                                                model.Id(p => p.PageTypeID);
                                                                                                                                                                                model.Field(p => p.PageTypeID).Editable(false);
                                                                                                                                                                                model.Field(p => p.UpdatedAt).Editable(false);
                                                                                                                                                                                model.Field(p => p.UpdatedBy).Editable(false);
                                                                                                                                                                                model.Field(p => p.Status).DefaultValue(true);
                                                                                                                                                                            })
                                                                                                                                                                                    .Read(c => c.Action("Read", "PageType"))
                                                                                                                                                                                    .Create(c => c.Action("Create", "PageType"))
                                                                                                                                                                                    .Update(c => c.Action("Update", "PageType"))
                                                                                                                                                                        )
    )
</div>
@Html.Partial("_popup")
<script>
    function Create() {
        $("#Grid").data("kendoGrid").dataSource.insert();
    }
    function Update() {
        if ($('#Grid').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#Grid').data('kendoGrid').saveChanges();
        }
    }
    function Cancel() {
        $('#Grid').data('kendoGrid').cancelChanges();
    }
    $(document).ready(function () {
        filter();
    });
    function resizeGrid(gridname) {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#' + gridname).offset().top);
        $("#" + gridname).find(".k-grid-content, .k-grid-content-locked").height(offsetbottom - 105);
    }
    function dataBound(e) {
        resizeGrid('Grid');
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br>";
                    });
                }
            });
            $.gritter.add({
                title: 'Lỗi',
                text: message,
                class_name: 'gritter-error'
            });
        }
    }

    function onRequestEnd(e) {
        if ((e.type == "update" || e.type == "create") && !e.response.Errors) {
            $.gritter.add({
                title: '',
                text: 'Lưu thành công',
                class_name: 'gritter-success'
            });
            if (e.type == "create") {
                this.read();
            }
        }
    }
    function filter() {
        grid = $("#Grid").data("kendoGrid");
        var filter = { logic: "and", filters: [] };

        var txtPageTypeName = $("#txtPageTypeName").val();
        if (txtPageTypeName) {
            filter.filters.push({ field: "PageTypeName", operator: "contains", value: txtPageTypeName });
        }

        grid.dataSource.filter(filter);
    }

    /////////
    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".k-grid-content .checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }

    //function DeletePage(data) {
    //    var list = Getlistcheck();
    //    if (!list) return;
    //    var c = confirm("Bạn có chắc chắn muốn xóa những dữ liệu này");
    //    if (!c) return;
    //    PostAndBlock(r + "/PageType/DeletePage", { listid: list }, function (data) {
    //        if (data.success) {
    //            $.gritter.add({
    //                title: '',
    //                text: 'Xóa thành công',
    //                class_name: 'gritter-success'
    //            });
    //            $("#Grid").data("kendoGrid").dataSource.read();
    //        }
    //        else {
    //            $.gritter.add({
    //                title: 'Lỗi',
    //                text: data.message,
    //                class_name: 'gritter-error'
    //            });
    //        }
    //    });
    //}
    function Getlistcheck() {
        var listrowid = '';
        $('#Grid').find(".k-grid-content .checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).data("id") + ',';
                $(this).data();
            }
        });
        return listrowid;
    }
</script>
