@model IEnumerable<CRM24H.Models.CRM_PagePosition>
@{
    ViewBag.Title = "Quản lý vị trí";
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
}
<style>
    .k-alt .editable {
        background-color: #C8E6C9;
    }

    .editable {
        background-color: #E8F5E9;
    }
</style>
<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div class="row-fluid frame-search">
                <div class="span12">
                    <input type="text" class="input-xs" id="txtWebSite" placeholder="Nhập Website">
                    <input type="text" class="input-xs" id="txtCategory" placeholder="Nhập tên chuyên mục">
                    <input type="text" class="input-small" id="txtSize" placeholder="Nhập Size">
                    <input type="text" class="input-small" id="txtShareNumber" placeholder="Nhập chia sẻ">                  
                    <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="Filter()" style="float:none">@Resources.Multi.Filter</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        <article class="col-sm-12">
            <div class="widget-body">

                @(Html.Kendo()
                .Grid(Model)
                .Name("Grid")
                .Editable()
                .Columns(columns =>
                {
                    columns.Bound(p => p.PositionID).Hidden();
                    columns.Bound(p => p.PositionID)
                        .HeaderTemplate("<input type='checkbox' id='checkboxcheckAll'  onClick='checkAll(this)' />")
                        .ClientTemplate("<input class='checkrowid' type='checkbox' id='#=PositionID#'  />")
                        .HtmlAttributes(new { style = "text-align:center" })
                        .HeaderHtmlAttributes(new { style = "text-align:center" })
                        .Width(25).Filterable(false).Sortable(false);
                    columns.Bound(p => p.RefID).Width(100).Title("Mã").HtmlAttributes(new { @class = "editable" });
                    columns.Bound(p => p.PositionName).Width(250).Title("Tên vị trí").HtmlAttributes(new { @class = "editable" });
                    columns.ForeignKey(p => p.WebsiteRefID, (System.Collections.IEnumerable)ViewBag.listWebsite, "WebSiteID", "WebSiteName").Title("Tên website").Width(150).EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { @class = "editable" });
                    //columns.Bound(p => p.WebsiteName).Width(150).Title("Tên website").HtmlAttributes(new { @class = "editable" }); 
                    columns.ForeignKey(p => p.Size, (System.Collections.IEnumerable)ViewBag.listSize, "ParamID", "Value").Title("Kích thước").Width(120).EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { @class = "editable" });
                    columns.Bound(p => p.FileSize).Width(100).Title("Dung lượng").HtmlAttributes(new { @class = "editable" }); 
                    columns.ForeignKey(p => p.ShareNumber, (System.Collections.IEnumerable)ViewBag.listShareType, "ParamID", "Value").Title("Tính chất").Width(80).EditorTemplateName("GridNullableForeignKey").HtmlAttributes(new { @class = "editable" });                   
                    columns.Bound(p => p.Status).Title("Trạng thái").Width(100).ClientTemplate("#if(Status == true){#Hoạt động#}else{#Ngưng hoạt động#}#").HtmlAttributes(new { @class = "editable" });
                    columns.Bound(p => p.CreatedAt).Width(110).Title("Ngày tạo").Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
                    columns.Bound(p => p.CreatedBy).Width(100).Title("Người tạo");
                    columns.Bound(p => p.UpdatedAt).Title("Ngày cập nhật").Width(110).Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:right" });
                    columns.Bound(p => p.UpdatedBy).Title("Người cập nhật").Width(100);
                })
                .ToolBar(toolbar =>
                {
                    if (AllowUpdate)
                    {
                        toolbar.Template(@<text>
                    <div class="pull-left">
                        @if (AllowCreate)
                        {
                            <a class="btn btn-success btn-small" onclick="Create()" href="javascript:void(0)" id="">
                                @*<i class="icon-plus"></i>*@ @Resources.Multi.Add
                            </a>
                                    <a class="btn btn-primary btn-small" href="javascript:void(0)" id="btnGridSave" onclick="Update()">
                                        @*<i class="icon-plus"></i>*@ @Resources.Multi.btnSave
                                    </a>
                                    <a class="btn btn-default btn-small " href="javascript:void(0)" id="btnGridCancel" onclick="Cancel()">
                                        @*<i class="icon-plus"></i>*@ Hủy thay đổi
                                    </a>
                        }

                        @if (AllowDelete)
                        {
                            <a class="btn btn-danger btn-small" href="javascript:void(0)" onclick="showConfirmPopup(1)" id="btnGridDelete">
                                @*<i class="icon-plus"></i>*@ @Resources.Multi.Delete
                            </a>
                        }
                    </div>
                        </text>);
                    }
                }).Events(events => { events.DataBound("onDatabound"); })
                                        .Pageable(pager => pager.PageSizes(new[] { 20, 100, 200, 300 }))
                                        .Resizable(r => r.Columns(true))
                                        .Editable(e => e.Mode(GridEditMode.InCell))
                                        .Navigatable()
                                        .Scrollable()
                                        .Sortable()
                                        .DataSource(dataSource => dataSource
                                            .Ajax()
                                            .Batch(true)
                                            .PageSize(20)
                                            .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                                            .Model(model =>
                                            {
                                                model.Id(p => p.PositionID);
                                                model.Field(p => p.PositionID).Editable(false);
                                                model.Field(p => p.CreatedBy).Editable(false);
                                                model.Field(p => p.CreatedAt).Editable(false);
                                                model.Field(p => p.UpdatedBy).Editable(false);
                                                model.Field(p => p.UpdatedAt).Editable(false);
                                            })
                                            .Read(read => read.Action("CRM_PagePosition_Read", "CRMPagePosition"))
                                            .Create(read => read.Action("UpdateDetail", "CRMPagePosition"))
                                            .Update(read => read.Action("UpdateDetail", "CRMPagePosition"))
                                        ))
            </div>
        </article>
    </div>
</div>
@Html.Partial("_popup")
<script>
    function Create() {
        $("#Grid").data("kendoGrid").dataSource.insert();
    }
    function Update() {
        if ($('#Grid').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#Grid').data('kendoGrid').saveChanges();
        }
    }
    function Cancel() {
        $('#Grid').data('kendoGrid').cancelChanges();
    }
    $(".chosen-select").chosen();
    $("#txtSearch").keypress(function (e) {
        if (e.keyCode == 13) {
            Filter();
        }
    });
   
    function onDatabound(e) {
        resizegrid();
        var grid = $("#Grid").data("kendoGrid");
        // ask the parameterMap to create the request object for you
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
        .options.parameterMap({
            page: grid.dataSource.page(),
            sort: grid.dataSource.sort(),
            filter: grid.dataSource.filter()
        });
    }
    function resizegrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 10);
    }

    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "Lỗi :\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: '',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
    function onRequestEnd(e) {
        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                title: '',
                text: 'Cập nhật dữ liệu thành công',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                title: '',
                text: 'Thêm mới dữ liệu thành công',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
    }

    function Filter() {
        var grid = $('#Grid').data('kendoGrid');
        var filter = { logic: "and", filters: [] };
        var fillterOr = { logic: "or", filters: [] };
        var txtCategory = $('#txtCategory').val();
        var txtWebSite = $('#txtWebSite').val();
        
        if (txtCategory != "") {
            filter.filters.push({ field: "PositionName", operator: "contains", value: txtCategory });
        }
        var txtSize = $('#txtSize').val();
        if (txtSize != "") {
            filter.filters.push({ field: "SizeName", operator: "contains", value: txtSize });
        }
        var txtShareNumber = $('#txtShareNumber').val();
        if (txtShareNumber != "") {
            filter.filters.push({ field: "ShareName", operator: "contains", value: txtShareNumber });
        }
        if (txtWebSite != "") {
            filter.filters.push({ field: "WebsiteName", operator: "contains", value: txtWebSite });
        }
        grid.dataSource.filter(filter);
    }
    $(".frame-search").keypress(function (e) {
        if (e.keyCode == 13) {
            Filter();
        }
    });
</script>

