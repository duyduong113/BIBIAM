@model IEnumerable<ERPAPD.Models.CRM_BookPR_Location>
@{
    ViewBag.Title = "Chỉnh sửa bài PR";
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);

}

<div class="row-fluid" style="margin-bottom:5px">
    <div class="span12">
        <div class="span4">
            <div class="control-group">
                <label>Khách hàng</label>
                <div class="controls">
                    <input type="hidden" class="span12" id="customer-id" value="@ViewBag.Customer"  />
                    <input type="hidden" class="span12" id="type" value="@ViewBag.type"  />
                    <input type="hidden" class="input-medium" id="pkbook" value="@ViewBag.PKBookPR" readonly />
                    <input type="text" class="span12" id="customer-name" value="@ViewBag.customerName " readonly />
                </div>
            </div>

        </div>
        <div class="span2">
            <div class="control-group">
                <label>Nhân viên</label>
                <div class="controls">
                    <input type="text" class="input-medium" id="staff" value="@ViewBag.StaffName" readonly />
                </div>
            </div>
        </div>
        <div class="span2">
            <div class="control-group">
                <label>Mã book</label>
                <div class="controls">
                    <input type="text" class="input-medium" id="bookcode" value="@ViewBag.BookCode" readonly />
                </div>
            </div>
        </div>
       
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @* </ Hiện thị thông tin> *@
        @(Html.Kendo()
              .Grid(Model)
              .Name("Grid")
              .Columns(columns =>
              {
                  columns.Bound(p => p.PKBookPRLocation)
                         .HeaderTemplate("<input style='text-align:center;opacity:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />")
                         .ClientTemplate("#=rendercheckbox(PKBookPRLocation)#")
                         //.ClientTemplate("#if(Status == 0){#<input style='text-align:center' class='checkrowid' type='checkbox' id='#=PKBookPRLocation#'  />#}#")
                         .Width(30).Filterable(false).Sortable(false);
                  //columns.Bound(p => p.PKBookPRLocation)
                  //      .Title("ID")
                  //      .Width(50);
                  columns.ForeignKey(p => p.Website, (System.Collections.IEnumerable)ViewBag.listWebsite, "Code", "Name")
                         .Title("Website")
                         .Width(120)
                         .HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" })
                         .EditorTemplateName("GridNullableForeignKey");

                  columns.ForeignKey(p => p.Category, (System.Collections.IEnumerable)ViewBag.listCategory, "Code", "Name")
                         .Title("Chuyên mục")
                         .Width(120)
                         .HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" })
                         .EditorTemplateName("GridNullableForeignKey");

                  columns.ForeignKey(p => p.Location, (System.Collections.IEnumerable)ViewBag.listLocation, "Code", "Name")
                         .Title("Vị trí")
                         .Width(120)
                         .HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" })
                         .EditorTemplateName("GridNullableForeignKey");

                  columns.Bound(p => p.NgayLen)
                         .Title("Ngày lên")
                         .Width(100).Format("{0:" + Resources.Multi.DateFormat + "}")
                         .ClientTemplate("#if(kendo.toString(NgayLen,'dd/MM/yyyy') != '01/01/1900'){#" + "#= kendo.toString(NgayLen,'" + Resources.Multi.DateFormat + "') #" + "#}#")
                         .HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" })
                         .EditorTemplateName("Date");

                  columns.ForeignKey(p => p.GioLen, (System.Collections.IEnumerable)ViewBag.listTime, "Code", "Name")
                        .Title("Giờ lên")
                        .Width(120)
                        .HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" })
                        .EditorTemplateName("GridNullableForeignKey");

                  columns.Bound(p => p.Link)
                         .Title("Link")
                         .Width(200)
                         .HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" });
                  //.EditorViewData(new { ViewBag.listWebsite })
                  //.EditorTemplateName("AutoCompleteTemplate");

                  columns.ForeignKey(p => p.VungMien, (System.Collections.IEnumerable)ViewBag.listRegion, "Code", "Name")
                         .Title("Vùng miền")
                         .Width(120)
                         .HtmlAttributes(new { style = "background-color:\\#dff0d8;color:\\#468847" })
                         .EditorTemplateName("GridNullableForeignKey");

              })
              .ToolBar(toolbar =>
              {
              toolbar.Template(@<text>
                <div class="pull-left">
                    @if (AllowCreate)
                    {
                        <a class="btn btn-small btn-success" href="javascript:void(0)" id="btnGridAdd">
                            @*<i class="icon-plus"></i>*@ @Resources.Multi.Add
                        </a>
                        <a class="btn btn-small btn-success" href="javascript:void(0)" id="btnCancel">
                            Hủy bỏ
                        </a>
                        <button type="button" id="btnSaveBook" class="btn btn-primary btn-small">Lưu thông tin</button>
                        <a class="btn btn-danger btn-small" href="javascript:void(0)" onclick="showConfirmDeleteDetail('XOA')">
                            Xóa
                        </a>

                        <a class="btn btn-default btn-small" href="@Url.Action("Index", "CRM_BookPR")" id="back">Trở về</a>
                    }
                </div>
            </text>);
              })

              .Navigatable()
              .Scrollable(scrollable => scrollable.Virtual(true))
              .Pageable(pager => pager
              .PageSizes(new[] { 20, 100, 200, 300 }))
              .Editable(editable =>  editable.Mode(GridEditMode.InCell))
              .Events(events => { events.DataBound("dataBound"); events.Edit("onEdit"); })
              .Resizable(resize => resize.Columns(true))
              .DataSource(dataSource => dataSource.Ajax()
                                        .Batch(true)
                                        .PageSize(50)
                                        .Events(events => { events.Error("error_handler"); events.RequestEnd("onRequestEnd"); })
                                        .Model(model =>
                                        {
                                            model.Id(p => p.PKBookPRLocation);
                                            model.Field(p => p.PKBookPRLocation).Editable(false);
                                        })
                                        .Read(read => read.Action("ReadDetail", "CRM_BookPR").Data("getHeaderInfo"))
                                        .Create(create => create.Action("SaveBook", "CRM_BookPR").Data("getHeaderInfo"))
                                        .Update(update => update.Action("SaveBook", "CRM_BookPR").Data("getHeaderInfo"))
                                        )
        )
    </div>
</div>
@Html.Partial("popup")
<script>
    function rendercheckbox(id) {
        debugger
        if (id == 0) {
            return "<span></span>";
        }
        else {
            return "<input style='text-align:center' class='checkrowid' type='checkbox' id='"+id+"'  />";
        }
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                    //$("#Grid").data("kendoGrid").dataSource.read();
                }
            });
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: 'Lỗi',
                // (string | mandatory) the text inside the notification
                text: message,
                class_name: 'gritter-error'
            });
        }
    }
    function onRequestEnd(e) {
        if (e.type == "update" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: 'Thành công',
                // (string | mandatory) the text inside the notification
                text: 'Cập nhật dữ liệu thành công',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create" && !e.response.Errors) {
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: 'Thành công',
                // (string | mandatory) the text inside the notification
                text: 'Thêm mới dữ liệu thành công',
                class_name: 'gritter-success'
            });
            $("#Grid").data("kendoGrid").dataSource.read();
        }
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid"),
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 30);
    }

    $(window).resize(function () {
        resizeGrid();
    });

    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }

    function dataBound() {
        resizeGrid();
        //load selected
        var gridDataSource = $("#Grid").data("kendoGrid").dataSource;
        var $Grid = $("#Grid");
        $('#Grid').find(".k-grid-content tbody tr").each(function () {
            var $tr = $(this);
            var uid = $tr.attr("data-uid");
            var data_entry = _.find(gridDataSource._data, function (data_source) {
                return data_source.uid === uid;
            });
            $tr.addClass('kendo-data-row').attr('data-KendoGrid-rowid', data_entry.ArticleId);
        });
        //Mark any selected rows as selected (persists selections from page to page)
        var selectedRowIds = $Grid.attr('data-KendoGrid-selected');
        if (selectedRowIds != null) {
            var selectedRowIdArray = selectedRowIds.split(',');
            var visibleRows = $Grid.find('.kendo-data-row');
            $(visibleRows).each(function () {
                $row = $(this);
                var rowID = $row.attr('data-KendoGrid-rowid');
                if (_.contains(selectedRowIdArray, rowID)) {
                    //$row.addClass('k-state-selected');
                    $row.find('.checkItem').attr('checked', 'checked');
                }
            });
            var totalview = $("#Grid").data("kendoGrid").dataSource.view().length;
            var totalchecked = $('.checkItem:checked').length;
            if (totalview != totalchecked) {
                $('#checkAll').removeAttr("checked");
            }
            else {
                $('#checkAll').attr("checked", "checked");
            }
        }
    }

    function getHeaderInfo() {
        return {
            customerid: $('#customer-id').val(),
            staff: $('#staff').val(),
            bookcode: $('#bookcode').val(),
            pkbook: $('#pkbook').val(),
            type: $('#type').val()
        }
    }


    function onAdditionalData() {
        return {
            text: $("#txt-CustomerID").val()
        };
    }
    function onSelectCustomer(e) {
        var dataItem = this.dataItem(e.item.index());
        $("#customer-id").val(dataItem.CustomerID);
    }
  
    $('#btnGridAdd').click(function () {
        $("#Grid").data("kendoGrid").dataSource.insert();
    })

    $('#btnSaveBook').bind('click', function () {
        if ($('#Grid').data('kendoGrid').dataSource.hasChanges() == true) {
            $('#Grid').data('kendoGrid').saveChanges();
        }
    })
    $('#btnCancel').click(function () {
        $('#Grid').data("kendoGrid").cancelChanges();
    })
    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }


    function showConfirmDeleteDetail(e) {
        var listrowid = "";
        $('#Grid').find(".checkrowid").each(function () {
            if ($(this).prop('checked') == true) {
                listrowid += $(this).attr("id") + '@@@@';
            }
        });
        if (listrowid != "" && listrowid != null) {
            $('#popup-delete').modal('show');
        }
        else {
            $.gritter.add({
                title: '',
                text: 'Vui lòng chọn dữ liệu',
                class_name: 'gritter-error'
            });
        }

    }

    function onEdit(e) {
        console.log(e);
        if (e.model.Status == 1) {
            $("#Grid").data("kendoGrid").closeCell();
        }
        else {
            var a = $("[aria-activedescendant=Category_option_selected]");
            if (a.length > 0) {
                var dataItem = $('#Grid').data('kendoGrid').dataItem($(e.container).closest("tr"));
                console.log(dataItem);
                if (!(dataItem.Website == null || dataItem.Website == "")) {
                    //alert(dataItem.PositionID);
                    $.post(r + "/CRM_BookingPR/GetListCategoryValue?web=" + dataItem.Website, function (data) {
                        if (!data.Errors) {
                            var ds1 = new kendo.data.DataSource();
                            ds1.data(data.listCategory);
                            $("#Category").data("kendoDropDownList").setDataSource(ds1);
                        }
                    });
                }
            }
        }
    }
    $('#back').bind("click", function () {
        window.history.back();
    })
</script>