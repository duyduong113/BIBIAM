@model ERPAPD.Models.ti_gia_tien_te
@{
    ViewBag.Title = Resources.Multi.ExchangeRate;
    bool AllowCreate = (ViewData["AllowCreate"] != null && (bool)ViewData["AllowCreate"]);
    bool AllowUpdate = (ViewData["AllowUpdate"] != null && (bool)ViewData["AllowUpdate"]);
    bool AllowDelete = (ViewData["AllowDelete"] != null && (bool)ViewData["AllowDelete"]);
    bool AllowExport = (ViewData["AllowExport"] != null && (bool)ViewData["AllowExport"]);
    var CurrencyNameDF = ViewData["CurrencyNameDF"].ToString() != null ? (string)ViewData["CurrencyNameDF"].ToString() : "";
    var listStatus = new List<Object>();
    listStatus.Add(new { ID = "true", Name = "Hoạt động" });
    listStatus.Add(new { ID = "false", Name = "Ngưng hoạt động" });
    ViewBag.listStatus = listStatus;

    var listDefault = new List<Object>();
    listDefault.Add(new { ID = "true", Name = "Mặc định" });
    listDefault.Add(new { ID = "false", Name = "" });
    ViewBag.listDefault = listDefault;


}

<div class="row-fluid">
    <div class="span12">
        <div class="widget-box">
            <div>
                <input type="text" id="txtSearch" placeholder="Mã tiền tệ" style="width:250px" />
                <button type="button" id="btnSearch" class="btn btn-primary btn-small" onclick="doSearch()" style="float:none">@Resources.Multi.Filter</button>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span12">
        @* </ Hiện thị thông tin> *@
        @(Html.Kendo()
        .Grid<ERPAPD.Models.ti_gia_tien_te>()
        .Name("Grid")
        .HtmlAttributes(new { style = "height: auto;" })
        .Columns(columns =>
        {
            columns.Bound(p => p.ID).HeaderTemplate("<input style='text-align:center;opaDistrict:1;' type='checkbox' id= 'checkboxcheckAll'  onClick='checkAll(this)' />")
                .ClientTemplate("#if(tien_te_mac_dinh!='1'){# <input style='text-align:center' class='checkrowid' type='checkbox' id='#=ID#'/> #}# ").Width(20).Filterable(false).Sortable(false);
            //columns.Bound(p => p.ID).ClientTemplate("#=GetDelete(ID)#").Width(60).Title("Action");
            columns.Bound(p => p.ma_tien_te).Width(80).Title("CurrencyCode").HtmlAttributes(new { data_id = "#=ma_tien_te#", onclick = "showForm(1, this)", @style = "color:\\#428bca;cursor:pointer" }); ;
            columns.Bound(p => p.ten_tien_te).Width(150).Title("CurrencyName");
            columns.Bound(p => p.ki_hieu_tien_te).Width(90).Title("Symbol");
            columns.Bound(p => p.ti_le_chuyen_doi).Width(100).Title("ConversionRate").Format("{0:N0}").HtmlAttributes(new { style = "text-align: right; overflow: visible; white-space: normal;vertical-align: top" });
            columns.ForeignKey(p => p.trang_thai, (System.Collections.IEnumerable)ViewBag.listStatus, "ID", "Name").Title("Status").HtmlAttributes(new { style = "text-align: right" }).Width(100);
            columns.ForeignKey(p => p.tien_te_mac_dinh, (System.Collections.IEnumerable)ViewBag.listDefault, "ID", "Name").Title("DefaultCurrency").Width(100);
            columns.Bound(p => p.ngay_tao).Width(110).Format("{0:" + Resources.Multi.DateFormat + "}").Title(Resources.Multi.CreatedAt).ClientTemplate("#=ConvertTimeZone(ngay_tao," + Constants.TIME_ZONE + ")#").HtmlAttributes(new { style = "text-align: right" });
            columns.Bound(p => p.nguoi_tao).Width(90).Title(Resources.Multi.CreatedBy).HtmlAttributes(new { style = "text-align: right" });
            columns.Bound(p => p.ngay_cap_nhat).Format("{0:" + Resources.Multi.DateFormat + "}").Width(110).Title(Resources.Multi.UpdatedAt).ClientTemplate("#if(kendo.toString(ngay_cap_nhat,'dd/MM/yyyy') != '01/01/1900'){#" + "#=ConvertTimeZone(ngay_cap_nhat," + Constants.TIME_ZONE + ")#" + "#}#").HtmlAttributes(new { style = "text-align: right;overflow: visible; white-space: normal;vertical-align: top" });
            columns.Bound(p => p.nguoi_cap_nhat).Width(90).Title(Resources.Multi.UpdatedBy).HtmlAttributes(new { style = "text-align: right;overflow: visible; white-space: normal;vertical-align: top" });

        })
         .ToolBar(toolbar =>
        {
            toolbar.Template(@<text>
                <div class="pull-left">
                    @if (AllowCreate)
                    {
                        <a class="btn btn-success btn-small" href="javascript:void(0)" id="btnInsert " onclick="showForm(0, this)">
                            @*<i class="icon-plus"></i>*@
                            @Resources.Multi.Add
                        </a>
                    }
                    @*@if (AllowUpdate)
                        {
                            <a class="btn btn-small btn-warning" href="javascript:void(0)" id="btnGridSave">
                                <i class="icon-ok"></i>
                                Ngưng hoạt động
                            </a>
                        }*@
                    @if (AllowDelete)
                    {
                        <a class="btn btn-small btn-danger" href="javascript:void(0)" id="btnGridDelete" onclick="showConfirmPopup(1)">
                            @*<i class=" icon-trash"></i>*@
                            @Resources.Multi.GridDelete
                        </a>
                    }
                </div>
            </text>);
        })
        .Events(events => { events.DataBound("dataBound"); })
        .Pageable(pager => pager.PageSizes(new[] { 50, 100, 200, 300 }))
        .Navigatable()
        .Scrollable(scrollable => scrollable.Virtual(false))
        .Sortable()
        .Resizable(resize => resize.Columns(true))
        .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .PageSize(50)
        .Model(model =>
        {
            model.Id(p => p.ma_tien_te);
        })
        .Read("Read", "Currencies", new { fromCurrence = Resources.Multi.CurencyCode })
        .Create("Create", "Currencies")
        .Update("Update", "Currencies")
            )
        )
    </div>
</div>
@Html.Partial("_popup")
@Html.Partial("_ppCreate")
<script>
    $(document).ready(function () {
        $("#CurrencyName").chosen();
        $("#Status").chosen();
    });
    function doSearch() {
        var grid = $("#Grid").data("kendoGrid");
        var valueSearch = $("#txtSearch").val();
        var filter = { logic: "or", filters: [] };
        if (valueSearch) {
            filter.filters.push({ field: "ma_tien_te", operator: "contains", value: valueSearch });
            filter.filters.push({ field: "ten_tien_te", operator: "contains", value: valueSearch });
        }
        grid.dataSource.filter(filter);
    }
    //Done
    $('#txtSearch').bind('keypress', function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            doSearch();
        }
    });
    function checkAll(e) {
        var x = $(e).prop('checked');
        $('#Grid').find(".checkrowid").each(function () {
            $(this).prop('checked', x);
        });
    }
    function dataBound(e) {
        resizeGrid();
        var grid = this;
        var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
           .options.parameterMap({
               page: grid.dataSource.page(),
               sort: grid.dataSource.sort(),
               filter: grid.dataSource.filter()
        });   
    }
    function resizeGrid() {
        var offsetbottom = parseInt($(window).height()) - parseInt($('#Grid').offset().top);
        var gridElement = $("#Grid");
        dataArea = gridElement.find(".k-grid-content"),
        otherElements = gridElement.children().not(".k-grid-content"),
        otherElementsHeight = 0;
        otherElements.each(function () {
            otherElementsHeight += $(this).outerHeight();
        });
        dataArea.height(offsetbottom - otherElementsHeight - 10);
    }
</script>
